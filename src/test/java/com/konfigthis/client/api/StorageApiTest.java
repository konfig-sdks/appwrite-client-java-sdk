/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.FileList;
import com.konfigthis.client.model.StorageCreateFileRequest;
import com.konfigthis.client.model.StorageUpdateFileByIdRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageApi
 */
@Disabled
public class StorageApiTest {

    private static StorageApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new StorageApi(apiClient);
    }

    /**
     * Create file
     *
     * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of &#x60;5MB&#x60;. The &#x60;content-range&#x60; header values should always be in bytes.  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file&#39;s **id** in &#x60;x-appwrite-id&#x60; header to allow the server to know that the partial upload is for the existing file and not for a new one.  If you&#39;re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFileTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        String _file = null;
        List<String> permissions = null;
        File response = api.createFile(bucketId, fileId, _file)
                .permissions(permissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete File
     *
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileByIdTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        api.deleteFileById(bucketId, fileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file
     *
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileByIdTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        File response = api.getFileById(bucketId, fileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file for download
     *
     * Get a file content by its unique ID. The endpoint response return with a &#39;Content-Disposition: attachment&#39; header that tells the browser to start downloading the file to user downloads directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileDownloadTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        api.getFileDownload(bucketId, fileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file for view
     *
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#39;Content-Disposition: attachment&#39; header.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileForViewTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        api.getFileForView(bucketId, fileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file preview
     *
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilePreviewImageTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        Integer width = null;
        Integer height = null;
        String gravity = null;
        Integer quality = null;
        Integer borderWidth = null;
        String borderColor = null;
        Integer borderRadius = null;
        Float opacity = null;
        Integer rotation = null;
        String background = null;
        String output = null;
        api.getFilePreviewImage(bucketId, fileId)
                .width(width)
                .height(height)
                .gravity(gravity)
                .quality(quality)
                .borderWidth(borderWidth)
                .borderColor(borderColor)
                .borderRadius(borderRadius)
                .opacity(opacity)
                .rotation(rotation)
                .background(background)
                .output(output)
                .execute();
        // TODO: test validations
    }

    /**
     * List files
     *
     * Get a list of all the user files. You can use the query params to filter your results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFilesTest() throws ApiException {
        String bucketId = null;
        List<String> queries = null;
        String search = null;
        FileList response = api.listFiles(bucketId)
                .queries(queries)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Update file
     *
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFileByIdTest() throws ApiException {
        String bucketId = null;
        String fileId = null;
        String name = null;
        List<String> permissions = null;
        File response = api.updateFileById(bucketId, fileId)
                .name(name)
                .permissions(permissions)
                .execute();
        // TODO: test validations
    }

}
