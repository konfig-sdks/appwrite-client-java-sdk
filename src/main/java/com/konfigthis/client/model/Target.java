/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Target
 */
@ApiModel(description = "Target")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Target {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_$_CREATED_AT = "$createdAt";
  @SerializedName(SERIALIZED_NAME_$_CREATED_AT)
  private String $createdAt;

  public static final String SERIALIZED_NAME_$_UPDATED_AT = "$updatedAt";
  @SerializedName(SERIALIZED_NAME_$_UPDATED_AT)
  private String $updatedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "providerType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private String providerType;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public Target() {
  }

  public Target $id(String $id) {
    
    
    
    
    this.$id = $id;
    return this;
  }

   /**
   * Target ID.
   * @return $id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target ID.")

  public String get$Id() {
    return $id;
  }


  public void set$Id(String $id) {
    
    
    
    this.$id = $id;
  }


  public Target $createdAt(String $createdAt) {
    
    
    
    
    this.$createdAt = $createdAt;
    return this;
  }

   /**
   * Target creation time in ISO 8601 format.
   * @return $createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target creation time in ISO 8601 format.")

  public String get$CreatedAt() {
    return $createdAt;
  }


  public void set$CreatedAt(String $createdAt) {
    
    
    
    this.$createdAt = $createdAt;
  }


  public Target $updatedAt(String $updatedAt) {
    
    
    
    
    this.$updatedAt = $updatedAt;
    return this;
  }

   /**
   * Target update date in ISO 8601 format.
   * @return $updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target update date in ISO 8601 format.")

  public String get$UpdatedAt() {
    return $updatedAt;
  }


  public void set$UpdatedAt(String $updatedAt) {
    
    
    
    this.$updatedAt = $updatedAt;
  }


  public Target name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Target Name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target Name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Target userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public Target providerId(String providerId) {
    
    
    
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Provider ID.
   * @return providerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provider ID.")

  public String getProviderId() {
    return providerId;
  }


  public void setProviderId(String providerId) {
    
    
    
    this.providerId = providerId;
  }


  public Target providerType(String providerType) {
    
    
    
    
    this.providerType = providerType;
    return this;
  }

   /**
   * The target provider type. Can be one of the following: &#x60;email&#x60;, &#x60;sms&#x60; or &#x60;push&#x60;.
   * @return providerType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The target provider type. Can be one of the following: `email`, `sms` or `push`.")

  public String getProviderType() {
    return providerType;
  }


  public void setProviderType(String providerType) {
    
    
    
    this.providerType = providerType;
  }


  public Target identifier(String identifier) {
    
    
    
    
    this.identifier = identifier;
    return this;
  }

   /**
   * The target identifier.
   * @return identifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The target identifier.")

  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    
    
    
    this.identifier = identifier;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Target instance itself
   */
  public Target putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Target target = (Target) o;
    return Objects.equals(this.$id, target.$id) &&
        Objects.equals(this.$createdAt, target.$createdAt) &&
        Objects.equals(this.$updatedAt, target.$updatedAt) &&
        Objects.equals(this.name, target.name) &&
        Objects.equals(this.userId, target.userId) &&
        Objects.equals(this.providerId, target.providerId) &&
        Objects.equals(this.providerType, target.providerType) &&
        Objects.equals(this.identifier, target.identifier)&&
        Objects.equals(this.additionalProperties, target.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, $createdAt, $updatedAt, name, userId, providerId, providerType, identifier, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Target {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    $createdAt: ").append(toIndentedString($createdAt)).append("\n");
    sb.append("    $updatedAt: ").append(toIndentedString($updatedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("$createdAt");
    openapiFields.add("$updatedAt");
    openapiFields.add("name");
    openapiFields.add("userId");
    openapiFields.add("providerId");
    openapiFields.add("providerType");
    openapiFields.add("identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("$createdAt");
    openapiRequiredFields.add("$updatedAt");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("providerType");
    openapiRequiredFields.add("identifier");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Target
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Target.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Target is not found in the empty JSON string", Target.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Target.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      if (!jsonObj.get("$createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$createdAt").toString()));
      }
      if (!jsonObj.get("$updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$updatedAt").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("providerId").isJsonNull() && (jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if (!jsonObj.get("providerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerType").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Target.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Target' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Target> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Target.class));

       return (TypeAdapter<T>) new TypeAdapter<Target>() {
           @Override
           public void write(JsonWriter out, Target value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Target read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Target instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Target given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Target
  * @throws IOException if the JSON string is invalid with respect to Target
  */
  public static Target fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Target.class);
  }

 /**
  * Convert an instance of Target to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

