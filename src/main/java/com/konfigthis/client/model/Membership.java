/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Membership
 */
@ApiModel(description = "Membership")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Membership {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_$_CREATED_AT = "$createdAt";
  @SerializedName(SERIALIZED_NAME_$_CREATED_AT)
  private String $createdAt;

  public static final String SERIALIZED_NAME_$_UPDATED_AT = "$updatedAt";
  @SerializedName(SERIALIZED_NAME_$_UPDATED_AT)
  private String $updatedAt;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_TEAM_NAME = "teamName";
  @SerializedName(SERIALIZED_NAME_TEAM_NAME)
  private String teamName;

  public static final String SERIALIZED_NAME_INVITED = "invited";
  @SerializedName(SERIALIZED_NAME_INVITED)
  private String invited;

  public static final String SERIALIZED_NAME_JOINED = "joined";
  @SerializedName(SERIALIZED_NAME_JOINED)
  private String joined;

  public static final String SERIALIZED_NAME_CONFIRM = "confirm";
  @SerializedName(SERIALIZED_NAME_CONFIRM)
  private Boolean confirm;

  public static final String SERIALIZED_NAME_MFA = "mfa";
  @SerializedName(SERIALIZED_NAME_MFA)
  private Boolean mfa;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<String> roles = new ArrayList<>();

  public Membership() {
  }

  public Membership $id(String $id) {
    
    
    
    
    this.$id = $id;
    return this;
  }

   /**
   * Membership ID.
   * @return $id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Membership ID.")

  public String get$Id() {
    return $id;
  }


  public void set$Id(String $id) {
    
    
    
    this.$id = $id;
  }


  public Membership $createdAt(String $createdAt) {
    
    
    
    
    this.$createdAt = $createdAt;
    return this;
  }

   /**
   * Membership creation date in ISO 8601 format.
   * @return $createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Membership creation date in ISO 8601 format.")

  public String get$CreatedAt() {
    return $createdAt;
  }


  public void set$CreatedAt(String $createdAt) {
    
    
    
    this.$createdAt = $createdAt;
  }


  public Membership $updatedAt(String $updatedAt) {
    
    
    
    
    this.$updatedAt = $updatedAt;
    return this;
  }

   /**
   * Membership update date in ISO 8601 format.
   * @return $updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Membership update date in ISO 8601 format.")

  public String get$UpdatedAt() {
    return $updatedAt;
  }


  public void set$UpdatedAt(String $updatedAt) {
    
    
    
    this.$updatedAt = $updatedAt;
  }


  public Membership userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public Membership userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * User name.
   * @return userName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User name.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public Membership userEmail(String userEmail) {
    
    
    
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * User email address.
   * @return userEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User email address.")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    
    
    
    this.userEmail = userEmail;
  }


  public Membership teamId(String teamId) {
    
    
    
    
    this.teamId = teamId;
    return this;
  }

   /**
   * Team ID.
   * @return teamId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Team ID.")

  public String getTeamId() {
    return teamId;
  }


  public void setTeamId(String teamId) {
    
    
    
    this.teamId = teamId;
  }


  public Membership teamName(String teamName) {
    
    
    
    
    this.teamName = teamName;
    return this;
  }

   /**
   * Team name.
   * @return teamName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Team name.")

  public String getTeamName() {
    return teamName;
  }


  public void setTeamName(String teamName) {
    
    
    
    this.teamName = teamName;
  }


  public Membership invited(String invited) {
    
    
    
    
    this.invited = invited;
    return this;
  }

   /**
   * Date, the user has been invited to join the team in ISO 8601 format.
   * @return invited
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date, the user has been invited to join the team in ISO 8601 format.")

  public String getInvited() {
    return invited;
  }


  public void setInvited(String invited) {
    
    
    
    this.invited = invited;
  }


  public Membership joined(String joined) {
    
    
    
    
    this.joined = joined;
    return this;
  }

   /**
   * Date, the user has accepted the invitation to join the team in ISO 8601 format.
   * @return joined
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date, the user has accepted the invitation to join the team in ISO 8601 format.")

  public String getJoined() {
    return joined;
  }


  public void setJoined(String joined) {
    
    
    
    this.joined = joined;
  }


  public Membership confirm(Boolean confirm) {
    
    
    
    
    this.confirm = confirm;
    return this;
  }

   /**
   * User confirmation status, true if the user has joined the team or false otherwise.
   * @return confirm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User confirmation status, true if the user has joined the team or false otherwise.")

  public Boolean getConfirm() {
    return confirm;
  }


  public void setConfirm(Boolean confirm) {
    
    
    
    this.confirm = confirm;
  }


  public Membership mfa(Boolean mfa) {
    
    
    
    
    this.mfa = mfa;
    return this;
  }

   /**
   * Multi factor authentication status, true if the user has MFA enabled or false otherwise.
   * @return mfa
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Multi factor authentication status, true if the user has MFA enabled or false otherwise.")

  public Boolean getMfa() {
    return mfa;
  }


  public void setMfa(Boolean mfa) {
    
    
    
    this.mfa = mfa;
  }


  public Membership roles(List<String> roles) {
    
    
    
    
    this.roles = roles;
    return this;
  }

  public Membership addRolesItem(String rolesItem) {
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * User list of roles
   * @return roles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User list of roles")

  public List<String> getRoles() {
    return roles;
  }


  public void setRoles(List<String> roles) {
    
    
    
    this.roles = roles;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Membership instance itself
   */
  public Membership putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Membership membership = (Membership) o;
    return Objects.equals(this.$id, membership.$id) &&
        Objects.equals(this.$createdAt, membership.$createdAt) &&
        Objects.equals(this.$updatedAt, membership.$updatedAt) &&
        Objects.equals(this.userId, membership.userId) &&
        Objects.equals(this.userName, membership.userName) &&
        Objects.equals(this.userEmail, membership.userEmail) &&
        Objects.equals(this.teamId, membership.teamId) &&
        Objects.equals(this.teamName, membership.teamName) &&
        Objects.equals(this.invited, membership.invited) &&
        Objects.equals(this.joined, membership.joined) &&
        Objects.equals(this.confirm, membership.confirm) &&
        Objects.equals(this.mfa, membership.mfa) &&
        Objects.equals(this.roles, membership.roles)&&
        Objects.equals(this.additionalProperties, membership.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, $createdAt, $updatedAt, userId, userName, userEmail, teamId, teamName, invited, joined, confirm, mfa, roles, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Membership {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    $createdAt: ").append(toIndentedString($createdAt)).append("\n");
    sb.append("    $updatedAt: ").append(toIndentedString($updatedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    teamName: ").append(toIndentedString(teamName)).append("\n");
    sb.append("    invited: ").append(toIndentedString(invited)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    confirm: ").append(toIndentedString(confirm)).append("\n");
    sb.append("    mfa: ").append(toIndentedString(mfa)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("$createdAt");
    openapiFields.add("$updatedAt");
    openapiFields.add("userId");
    openapiFields.add("userName");
    openapiFields.add("userEmail");
    openapiFields.add("teamId");
    openapiFields.add("teamName");
    openapiFields.add("invited");
    openapiFields.add("joined");
    openapiFields.add("confirm");
    openapiFields.add("mfa");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("$createdAt");
    openapiRequiredFields.add("$updatedAt");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("userName");
    openapiRequiredFields.add("userEmail");
    openapiRequiredFields.add("teamId");
    openapiRequiredFields.add("teamName");
    openapiRequiredFields.add("invited");
    openapiRequiredFields.add("joined");
    openapiRequiredFields.add("confirm");
    openapiRequiredFields.add("mfa");
    openapiRequiredFields.add("roles");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Membership
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Membership.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Membership is not found in the empty JSON string", Membership.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Membership.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      if (!jsonObj.get("$createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$createdAt").toString()));
      }
      if (!jsonObj.get("$updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$updatedAt").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if (!jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if (!jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
      if (!jsonObj.get("teamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamName").toString()));
      }
      if (!jsonObj.get("invited").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invited` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invited").toString()));
      }
      if (!jsonObj.get("joined").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joined` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joined").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Membership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Membership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Membership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Membership.class));

       return (TypeAdapter<T>) new TypeAdapter<Membership>() {
           @Override
           public void write(JsonWriter out, Membership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Membership read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Membership instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Membership given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Membership
  * @throws IOException if the JSON string is invalid with respect to Membership
  */
  public static Membership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Membership.class);
  }

 /**
  * Convert an instance of Membership to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

