/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.FileList;
import com.konfigthis.client.model.StorageCreateFileRequest;
import com.konfigthis.client.model.StorageUpdateFileByIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StorageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFileCall(String bucketId, String fileId, String _file, List<String> permissions, StorageCreateFileRequest storageCreateFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storageCreateFileRequest;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileId != null) {
            localVarFormParams.put("fileId", fileId);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (permissions != null) {
            localVarFormParams.put("permissions", permissions);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileValidateBeforeCall(String bucketId, String fileId, String _file, List<String> permissions, StorageCreateFileRequest storageCreateFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling createFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling createFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createFile(Async)");
        }

        return createFileCall(bucketId, fileId, _file, permissions, storageCreateFileRequest, _callback);

    }


    private ApiResponse<File> createFileWithHttpInfo(String bucketId, String fileId, String _file, List<String> permissions, StorageCreateFileRequest storageCreateFileRequest) throws ApiException {
        okhttp3.Call localVarCall = createFileValidateBeforeCall(bucketId, fileId, _file, permissions, storageCreateFileRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFileAsync(String bucketId, String fileId, String _file, List<String> permissions, StorageCreateFileRequest storageCreateFileRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileValidateBeforeCall(bucketId, fileId, _file, permissions, storageCreateFileRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFileRequestBuilder {
        private final String bucketId;
        private final String fileId;
        private final String _file;
        private List<String> permissions;

        private CreateFileRequestBuilder(String bucketId, String fileId, String _file) {
            this.bucketId = bucketId;
            this.fileId = fileId;
            this._file = _file;
        }

        /**
         * Set permissions
         * @param permissions An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions). (optional)
         * @return CreateFileRequestBuilder
         */
        public CreateFileRequestBuilder permissions(List<String> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Build call for createFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StorageCreateFileRequest storageCreateFileRequest = buildBodyParams();
            return createFileCall(bucketId, fileId, _file, permissions, storageCreateFileRequest, _callback);
        }

        private StorageCreateFileRequest buildBodyParams() {
            StorageCreateFileRequest storageCreateFileRequest = new StorageCreateFileRequest();
            storageCreateFileRequest.fileId(this.fileId);
            storageCreateFileRequest._file(this._file);
            storageCreateFileRequest.permissions(this.permissions);
            return storageCreateFileRequest;
        }

        /**
         * Execute createFile request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            StorageCreateFileRequest storageCreateFileRequest = buildBodyParams();
            ApiResponse<File> localVarResp = createFileWithHttpInfo(bucketId, fileId, _file, permissions, storageCreateFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFile request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            StorageCreateFileRequest storageCreateFileRequest = buildBodyParams();
            return createFileWithHttpInfo(bucketId, fileId, _file, permissions, storageCreateFileRequest);
        }

        /**
         * Execute createFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            StorageCreateFileRequest storageCreateFileRequest = buildBodyParams();
            return createFileAsync(bucketId, fileId, _file, permissions, storageCreateFileRequest, _callback);
        }
    }

    /**
     * Create file
     * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of &#x60;5MB&#x60;. The &#x60;content-range&#x60; header values should always be in bytes.  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file&#39;s **id** in &#x60;x-appwrite-id&#x60; header to allow the server to know that the partial upload is for the existing file and not for a new one.  If you&#39;re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally. 
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File ID. Choose a custom ID or generate a random ID with &#x60;ID.unique()&#x60;. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can&#39;t start with a special char. Max length is 36 chars. (required)
     * @param _file Binary file. Appwrite SDKs provide helpers to handle file input. [Learn about file input](https://appwrite.io/docs/storage#file-input). (required)
     * @return CreateFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public CreateFileRequestBuilder createFile(String bucketId, String fileId, String _file) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
            

        return new CreateFileRequestBuilder(bucketId, fileId, _file);
    }
    private okhttp3.Call deleteFileByIdCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files/{fileId}"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileByIdValidateBeforeCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteFileById(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileById(Async)");
        }

        return deleteFileByIdCall(bucketId, fileId, _callback);

    }


    private ApiResponse<Void> deleteFileByIdWithHttpInfo(String bucketId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileByIdValidateBeforeCall(bucketId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFileByIdAsync(String bucketId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileByIdValidateBeforeCall(bucketId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFileByIdRequestBuilder {
        private final String bucketId;
        private final String fileId;

        private DeleteFileByIdRequestBuilder(String bucketId, String fileId) {
            this.bucketId = bucketId;
            this.fileId = fileId;
        }

        /**
         * Build call for deleteFileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFileByIdCall(bucketId, fileId, _callback);
        }


        /**
         * Execute deleteFileById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFileByIdWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute deleteFileById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFileByIdWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute deleteFileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFileByIdAsync(bucketId, fileId, _callback);
        }
    }

    /**
     * Delete File
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File ID. (required)
     * @return DeleteFileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFileByIdRequestBuilder deleteFileById(String bucketId, String fileId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new DeleteFileByIdRequestBuilder(bucketId, fileId);
    }
    private okhttp3.Call getFileByIdCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files/{fileId}"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileByIdValidateBeforeCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFileById(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileById(Async)");
        }

        return getFileByIdCall(bucketId, fileId, _callback);

    }


    private ApiResponse<File> getFileByIdWithHttpInfo(String bucketId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileByIdValidateBeforeCall(bucketId, fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileByIdAsync(String bucketId, String fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileByIdValidateBeforeCall(bucketId, fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileByIdRequestBuilder {
        private final String bucketId;
        private final String fileId;

        private GetFileByIdRequestBuilder(String bucketId, String fileId) {
            this.bucketId = bucketId;
            this.fileId = fileId;
        }

        /**
         * Build call for getFileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileByIdCall(bucketId, fileId, _callback);
        }


        /**
         * Execute getFileById request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getFileByIdWithHttpInfo(bucketId, fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFileById request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getFileByIdWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute getFileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getFileByIdAsync(bucketId, fileId, _callback);
        }
    }

    /**
     * Get file
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File ID. (required)
     * @return GetFileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public GetFileByIdRequestBuilder getFileById(String bucketId, String fileId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetFileByIdRequestBuilder(bucketId, fileId);
    }
    private okhttp3.Call getFileDownloadCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files/{fileId}/download"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileDownloadValidateBeforeCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFileDownload(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileDownload(Async)");
        }

        return getFileDownloadCall(bucketId, fileId, _callback);

    }


    private ApiResponse<Void> getFileDownloadWithHttpInfo(String bucketId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileDownloadValidateBeforeCall(bucketId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFileDownloadAsync(String bucketId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileDownloadValidateBeforeCall(bucketId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFileDownloadRequestBuilder {
        private final String bucketId;
        private final String fileId;

        private GetFileDownloadRequestBuilder(String bucketId, String fileId) {
            this.bucketId = bucketId;
            this.fileId = fileId;
        }

        /**
         * Build call for getFileDownload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileDownloadCall(bucketId, fileId, _callback);
        }


        /**
         * Execute getFileDownload request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFileDownloadWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute getFileDownload request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFileDownloadWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute getFileDownload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFileDownloadAsync(bucketId, fileId, _callback);
        }
    }

    /**
     * Get file for download
     * Get a file content by its unique ID. The endpoint response return with a &#39;Content-Disposition: attachment&#39; header that tells the browser to start downloading the file to user downloads directory.
     * @param bucketId Storage bucket ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File ID. (required)
     * @return GetFileDownloadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public GetFileDownloadRequestBuilder getFileDownload(String bucketId, String fileId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetFileDownloadRequestBuilder(bucketId, fileId);
    }
    private okhttp3.Call getFileForViewCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files/{fileId}/view"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileForViewValidateBeforeCall(String bucketId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFileForView(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileForView(Async)");
        }

        return getFileForViewCall(bucketId, fileId, _callback);

    }


    private ApiResponse<Void> getFileForViewWithHttpInfo(String bucketId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileForViewValidateBeforeCall(bucketId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFileForViewAsync(String bucketId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileForViewValidateBeforeCall(bucketId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFileForViewRequestBuilder {
        private final String bucketId;
        private final String fileId;

        private GetFileForViewRequestBuilder(String bucketId, String fileId) {
            this.bucketId = bucketId;
            this.fileId = fileId;
        }

        /**
         * Build call for getFileForView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileForViewCall(bucketId, fileId, _callback);
        }


        /**
         * Execute getFileForView request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFileForViewWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute getFileForView request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFileForViewWithHttpInfo(bucketId, fileId);
        }

        /**
         * Execute getFileForView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFileForViewAsync(bucketId, fileId, _callback);
        }
    }

    /**
     * Get file for view
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#39;Content-Disposition: attachment&#39; header.
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File ID. (required)
     * @return GetFileForViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public GetFileForViewRequestBuilder getFileForView(String bucketId, String fileId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetFileForViewRequestBuilder(bucketId, fileId);
    }
    private okhttp3.Call getFilePreviewImageCall(String bucketId, String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files/{fileId}/preview"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (gravity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gravity", gravity));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (borderWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borderWidth", borderWidth));
        }

        if (borderColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borderColor", borderColor));
        }

        if (borderRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borderRadius", borderRadius));
        }

        if (opacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opacity", opacity));
        }

        if (rotation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rotation", rotation));
        }

        if (background != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("background", background));
        }

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilePreviewImageValidateBeforeCall(String bucketId, String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFilePreviewImage(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFilePreviewImage(Async)");
        }

        return getFilePreviewImageCall(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, _callback);

    }


    private ApiResponse<Void> getFilePreviewImageWithHttpInfo(String bucketId, String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output) throws ApiException {
        okhttp3.Call localVarCall = getFilePreviewImageValidateBeforeCall(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFilePreviewImageAsync(String bucketId, String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilePreviewImageValidateBeforeCall(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFilePreviewImageRequestBuilder {
        private final String bucketId;
        private final String fileId;
        private Integer width;
        private Integer height;
        private String gravity;
        private Integer quality;
        private Integer borderWidth;
        private String borderColor;
        private Integer borderRadius;
        private Float opacity;
        private Integer rotation;
        private String background;
        private String output;

        private GetFilePreviewImageRequestBuilder(String bucketId, String fileId) {
            this.bucketId = bucketId;
            this.fileId = fileId;
        }

        /**
         * Set width
         * @param width Resize preview image width, Pass an integer between 0 to 4000. (optional, default to 0)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height Resize preview image height, Pass an integer between 0 to 4000. (optional, default to 0)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set gravity
         * @param gravity Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right (optional, default to center)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder gravity(String gravity) {
            this.gravity = gravity;
            return this;
        }
        
        /**
         * Set quality
         * @param quality Preview image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder quality(Integer quality) {
            this.quality = quality;
            return this;
        }
        
        /**
         * Set borderWidth
         * @param borderWidth Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0. (optional, default to 0)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder borderWidth(Integer borderWidth) {
            this.borderWidth = borderWidth;
            return this;
        }
        
        /**
         * Set borderColor
         * @param borderColor Preview image border color. Use a valid HEX color, no # is needed for prefix. (optional, default to )
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder borderColor(String borderColor) {
            this.borderColor = borderColor;
            return this;
        }
        
        /**
         * Set borderRadius
         * @param borderRadius Preview image border radius in pixels. Pass an integer between 0 to 4000. (optional, default to 0)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder borderRadius(Integer borderRadius) {
            this.borderRadius = borderRadius;
            return this;
        }
        
        /**
         * Set opacity
         * @param opacity Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1. (optional, default to 1)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder opacity(Float opacity) {
            this.opacity = opacity;
            return this;
        }
        
        /**
         * Set rotation
         * @param rotation Preview image rotation in degrees. Pass an integer between -360 and 360. (optional, default to 0)
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder rotation(Integer rotation) {
            this.rotation = rotation;
            return this;
        }
        
        /**
         * Set background
         * @param background Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix. (optional, default to )
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder background(String background) {
            this.background = background;
            return this;
        }
        
        /**
         * Set output
         * @param output Output format type (jpeg, jpg, png, gif and webp). (optional, default to )
         * @return GetFilePreviewImageRequestBuilder
         */
        public GetFilePreviewImageRequestBuilder output(String output) {
            this.output = output;
            return this;
        }
        
        /**
         * Build call for getFilePreviewImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilePreviewImageCall(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, _callback);
        }


        /**
         * Execute getFilePreviewImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFilePreviewImageWithHttpInfo(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output);
        }

        /**
         * Execute getFilePreviewImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFilePreviewImageWithHttpInfo(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output);
        }

        /**
         * Execute getFilePreviewImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFilePreviewImageAsync(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, _callback);
        }
    }

    /**
     * Get file preview
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File ID (required)
     * @return GetFilePreviewImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetFilePreviewImageRequestBuilder getFilePreviewImage(String bucketId, String fileId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetFilePreviewImageRequestBuilder(bucketId, fileId);
    }
    private okhttp3.Call listFilesCall(String bucketId, List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesValidateBeforeCall(String bucketId, List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling listFiles(Async)");
        }

        return listFilesCall(bucketId, queries, search, _callback);

    }


    private ApiResponse<FileList> listFilesWithHttpInfo(String bucketId, List<String> queries, String search) throws ApiException {
        okhttp3.Call localVarCall = listFilesValidateBeforeCall(bucketId, queries, search, null);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFilesAsync(String bucketId, List<String> queries, String search, final ApiCallback<FileList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesValidateBeforeCall(bucketId, queries, search, _callback);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFilesRequestBuilder {
        private final String bucketId;
        private List<String> queries;
        private String search;

        private ListFilesRequestBuilder(String bucketId) {
            this.bucketId = bucketId;
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded (optional)
         * @return ListFilesRequestBuilder
         */
        public ListFilesRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Set search
         * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
         * @return ListFilesRequestBuilder
         */
        public ListFilesRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for listFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFilesCall(bucketId, queries, search, _callback);
        }


        /**
         * Execute listFiles request
         * @return FileList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
         </table>
         */
        public FileList execute() throws ApiException {
            ApiResponse<FileList> localVarResp = listFilesWithHttpInfo(bucketId, queries, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFiles request with HTTP info returned
         * @return ApiResponse&lt;FileList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileList> executeWithHttpInfo() throws ApiException {
            return listFilesWithHttpInfo(bucketId, queries, search);
        }

        /**
         * Execute listFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileList> _callback) throws ApiException {
            return listFilesAsync(bucketId, queries, search, _callback);
        }
    }

    /**
     * List files
     * Get a list of all the user files. You can use the query params to filter your results.
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @return ListFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
     </table>
     */
    public ListFilesRequestBuilder listFiles(String bucketId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        return new ListFilesRequestBuilder(bucketId);
    }
    private okhttp3.Call updateFileByIdCall(String bucketId, String fileId, StorageUpdateFileByIdRequest storageUpdateFileByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storageUpdateFileByIdRequest;

        // create path and map variables
        String localVarPath = "/storage/buckets/{bucketId}/files/{fileId}"
            .replace("{" + "bucketId" + "}", localVarApiClient.escapeString(bucketId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileByIdValidateBeforeCall(String bucketId, String fileId, StorageUpdateFileByIdRequest storageUpdateFileByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateFileById(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateFileById(Async)");
        }

        return updateFileByIdCall(bucketId, fileId, storageUpdateFileByIdRequest, _callback);

    }


    private ApiResponse<File> updateFileByIdWithHttpInfo(String bucketId, String fileId, StorageUpdateFileByIdRequest storageUpdateFileByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFileByIdValidateBeforeCall(bucketId, fileId, storageUpdateFileByIdRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFileByIdAsync(String bucketId, String fileId, StorageUpdateFileByIdRequest storageUpdateFileByIdRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileByIdValidateBeforeCall(bucketId, fileId, storageUpdateFileByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFileByIdRequestBuilder {
        private final String bucketId;
        private final String fileId;
        private String name;
        private List<String> permissions;

        private UpdateFileByIdRequestBuilder(String bucketId, String fileId) {
            this.bucketId = bucketId;
            this.fileId = fileId;
        }

        /**
         * Set name
         * @param name Name of the file (optional)
         * @return UpdateFileByIdRequestBuilder
         */
        public UpdateFileByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions An array of permission string. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions). (optional)
         * @return UpdateFileByIdRequestBuilder
         */
        public UpdateFileByIdRequestBuilder permissions(List<String> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Build call for updateFileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StorageUpdateFileByIdRequest storageUpdateFileByIdRequest = buildBodyParams();
            return updateFileByIdCall(bucketId, fileId, storageUpdateFileByIdRequest, _callback);
        }

        private StorageUpdateFileByIdRequest buildBodyParams() {
            StorageUpdateFileByIdRequest storageUpdateFileByIdRequest = new StorageUpdateFileByIdRequest();
            storageUpdateFileByIdRequest.name(this.name);
            storageUpdateFileByIdRequest.permissions(this.permissions);
            return storageUpdateFileByIdRequest;
        }

        /**
         * Execute updateFileById request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            StorageUpdateFileByIdRequest storageUpdateFileByIdRequest = buildBodyParams();
            ApiResponse<File> localVarResp = updateFileByIdWithHttpInfo(bucketId, fileId, storageUpdateFileByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFileById request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            StorageUpdateFileByIdRequest storageUpdateFileByIdRequest = buildBodyParams();
            return updateFileByIdWithHttpInfo(bucketId, fileId, storageUpdateFileByIdRequest);
        }

        /**
         * Execute updateFileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            StorageUpdateFileByIdRequest storageUpdateFileByIdRequest = buildBodyParams();
            return updateFileByIdAsync(bucketId, fileId, storageUpdateFileByIdRequest, _callback);
        }
    }

    /**
     * Update file
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     * @param bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket). (required)
     * @param fileId File unique ID. (required)
     * @return UpdateFileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFileByIdRequestBuilder updateFileById(String bucketId, String fileId) throws IllegalArgumentException {
        if (bucketId == null) throw new IllegalArgumentException("\"bucketId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new UpdateFileByIdRequestBuilder(bucketId, fileId);
    }
}
