/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContinentList;
import com.konfigthis.client.model.CountryList;
import com.konfigthis.client.model.CurrencyList;
import com.konfigthis.client.model.LanguageList;
import com.konfigthis.client.model.Locale;
import com.konfigthis.client.model.LocaleCodeList;
import com.konfigthis.client.model.PhoneList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocaleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocaleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocaleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrenciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrenciesCall(_callback);

    }


    private ApiResponse<CurrencyList> getCurrenciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CurrencyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrenciesAsync(final ApiCallback<CurrencyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CurrencyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrenciesRequestBuilder {

        private GetCurrenciesRequestBuilder() {
        }

        /**
         * Build call for getCurrencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Currencies List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrenciesCall(_callback);
        }


        /**
         * Execute getCurrencies request
         * @return CurrencyList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Currencies List </td><td>  -  </td></tr>
         </table>
         */
        public CurrencyList execute() throws ApiException {
            ApiResponse<CurrencyList> localVarResp = getCurrenciesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrencies request with HTTP info returned
         * @return ApiResponse&lt;CurrencyList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Currencies List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrencyList> executeWithHttpInfo() throws ApiException {
            return getCurrenciesWithHttpInfo();
        }

        /**
         * Execute getCurrencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Currencies List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrencyList> _callback) throws ApiException {
            return getCurrenciesAsync(_callback);
        }
    }

    /**
     * List currencies
     * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
     * @return GetCurrenciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Currencies List </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrenciesRequestBuilder getCurrencies() throws IllegalArgumentException {
        return new GetCurrenciesRequestBuilder();
    }
    private okhttp3.Call getEUCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/countries/eu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEUCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEUCountriesCall(_callback);

    }


    private ApiResponse<CountryList> getEUCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEUCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEUCountriesAsync(final ApiCallback<CountryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEUCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEUCountriesRequestBuilder {

        private GetEUCountriesRequestBuilder() {
        }

        /**
         * Build call for getEUCountries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEUCountriesCall(_callback);
        }


        /**
         * Execute getEUCountries request
         * @return CountryList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public CountryList execute() throws ApiException {
            ApiResponse<CountryList> localVarResp = getEUCountriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEUCountries request with HTTP info returned
         * @return ApiResponse&lt;CountryList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountryList> executeWithHttpInfo() throws ApiException {
            return getEUCountriesWithHttpInfo();
        }

        /**
         * Execute getEUCountries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountryList> _callback) throws ApiException {
            return getEUCountriesAsync(_callback);
        }
    }

    /**
     * List EU countries
     * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
     * @return GetEUCountriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
     </table>
     */
    public GetEUCountriesRequestBuilder getEUCountries() throws IllegalArgumentException {
        return new GetEUCountriesRequestBuilder();
    }
    private okhttp3.Call getUserLocaleCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLocaleValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserLocaleCall(_callback);

    }


    private ApiResponse<Locale> getUserLocaleWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserLocaleValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Locale>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserLocaleAsync(final ApiCallback<Locale> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserLocaleValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Locale>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserLocaleRequestBuilder {

        private GetUserLocaleRequestBuilder() {
        }

        /**
         * Build call for getUserLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserLocaleCall(_callback);
        }


        /**
         * Execute getUserLocale request
         * @return Locale
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale </td><td>  -  </td></tr>
         </table>
         */
        public Locale execute() throws ApiException {
            ApiResponse<Locale> localVarResp = getUserLocaleWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserLocale request with HTTP info returned
         * @return ApiResponse&lt;Locale&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Locale> executeWithHttpInfo() throws ApiException {
            return getUserLocaleWithHttpInfo();
        }

        /**
         * Execute getUserLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Locale> _callback) throws ApiException {
            return getUserLocaleAsync(_callback);
        }
    }

    /**
     * Get user locale
     * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.  ([IP Geolocation by DB-IP](https://db-ip.com))
     * @return GetUserLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Locale </td><td>  -  </td></tr>
     </table>
     */
    public GetUserLocaleRequestBuilder getUserLocale() throws IllegalArgumentException {
        return new GetUserLocaleRequestBuilder();
    }
    private okhttp3.Call listCodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCodesCall(_callback);

    }


    private ApiResponse<LocaleCodeList> listCodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LocaleCodeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCodesAsync(final ApiCallback<LocaleCodeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LocaleCodeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCodesRequestBuilder {

        private ListCodesRequestBuilder() {
        }

        /**
         * Build call for listCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale codes list </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCodesCall(_callback);
        }


        /**
         * Execute listCodes request
         * @return LocaleCodeList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale codes list </td><td>  -  </td></tr>
         </table>
         */
        public LocaleCodeList execute() throws ApiException {
            ApiResponse<LocaleCodeList> localVarResp = listCodesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCodes request with HTTP info returned
         * @return ApiResponse&lt;LocaleCodeList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale codes list </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocaleCodeList> executeWithHttpInfo() throws ApiException {
            return listCodesWithHttpInfo();
        }

        /**
         * Execute listCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Locale codes list </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocaleCodeList> _callback) throws ApiException {
            return listCodesAsync(_callback);
        }
    }

    /**
     * List Locale Codes
     * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
     * @return ListCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Locale codes list </td><td>  -  </td></tr>
     </table>
     */
    public ListCodesRequestBuilder listCodes() throws IllegalArgumentException {
        return new ListCodesRequestBuilder();
    }
    private okhttp3.Call listContinentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/continents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContinentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listContinentsCall(_callback);

    }


    private ApiResponse<ContinentList> listContinentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listContinentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContinentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listContinentsAsync(final ApiCallback<ContinentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContinentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContinentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListContinentsRequestBuilder {

        private ListContinentsRequestBuilder() {
        }

        /**
         * Build call for listContinents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Continents List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listContinentsCall(_callback);
        }


        /**
         * Execute listContinents request
         * @return ContinentList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Continents List </td><td>  -  </td></tr>
         </table>
         */
        public ContinentList execute() throws ApiException {
            ApiResponse<ContinentList> localVarResp = listContinentsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listContinents request with HTTP info returned
         * @return ApiResponse&lt;ContinentList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Continents List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContinentList> executeWithHttpInfo() throws ApiException {
            return listContinentsWithHttpInfo();
        }

        /**
         * Execute listContinents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Continents List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContinentList> _callback) throws ApiException {
            return listContinentsAsync(_callback);
        }
    }

    /**
     * List continents
     * List of all continents. You can use the locale header to get the data in a supported language.
     * @return ListContinentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Continents List </td><td>  -  </td></tr>
     </table>
     */
    public ListContinentsRequestBuilder listContinents() throws IllegalArgumentException {
        return new ListContinentsRequestBuilder();
    }
    private okhttp3.Call listCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCountriesCall(_callback);

    }


    private ApiResponse<CountryList> listCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCountriesAsync(final ApiCallback<CountryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCountriesRequestBuilder {

        private ListCountriesRequestBuilder() {
        }

        /**
         * Build call for listCountries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCountriesCall(_callback);
        }


        /**
         * Execute listCountries request
         * @return CountryList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public CountryList execute() throws ApiException {
            ApiResponse<CountryList> localVarResp = listCountriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCountries request with HTTP info returned
         * @return ApiResponse&lt;CountryList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountryList> executeWithHttpInfo() throws ApiException {
            return listCountriesWithHttpInfo();
        }

        /**
         * Execute listCountries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountryList> _callback) throws ApiException {
            return listCountriesAsync(_callback);
        }
    }

    /**
     * List countries
     * List of all countries. You can use the locale header to get the data in a supported language.
     * @return ListCountriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Countries List </td><td>  -  </td></tr>
     </table>
     */
    public ListCountriesRequestBuilder listCountries() throws IllegalArgumentException {
        return new ListCountriesRequestBuilder();
    }
    private okhttp3.Call listCountriesPhonesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/countries/phones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCountriesPhonesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCountriesPhonesCall(_callback);

    }


    private ApiResponse<PhoneList> listCountriesPhonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCountriesPhonesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PhoneList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCountriesPhonesAsync(final ApiCallback<PhoneList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCountriesPhonesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PhoneList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCountriesPhonesRequestBuilder {

        private ListCountriesPhonesRequestBuilder() {
        }

        /**
         * Build call for listCountriesPhones
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Phones List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCountriesPhonesCall(_callback);
        }


        /**
         * Execute listCountriesPhones request
         * @return PhoneList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Phones List </td><td>  -  </td></tr>
         </table>
         */
        public PhoneList execute() throws ApiException {
            ApiResponse<PhoneList> localVarResp = listCountriesPhonesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCountriesPhones request with HTTP info returned
         * @return ApiResponse&lt;PhoneList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Phones List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneList> executeWithHttpInfo() throws ApiException {
            return listCountriesPhonesWithHttpInfo();
        }

        /**
         * Execute listCountriesPhones request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Phones List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneList> _callback) throws ApiException {
            return listCountriesPhonesAsync(_callback);
        }
    }

    /**
     * List countries phone codes
     * List of all countries phone codes. You can use the locale header to get the data in a supported language.
     * @return ListCountriesPhonesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Phones List </td><td>  -  </td></tr>
     </table>
     */
    public ListCountriesPhonesRequestBuilder listCountriesPhones() throws IllegalArgumentException {
        return new ListCountriesPhonesRequestBuilder();
    }
    private okhttp3.Call listLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLanguagesCall(_callback);

    }


    private ApiResponse<LanguageList> listLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LanguageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLanguagesAsync(final ApiCallback<LanguageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LanguageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLanguagesRequestBuilder {

        private ListLanguagesRequestBuilder() {
        }

        /**
         * Build call for listLanguages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLanguagesCall(_callback);
        }


        /**
         * Execute listLanguages request
         * @return LanguageList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages List </td><td>  -  </td></tr>
         </table>
         */
        public LanguageList execute() throws ApiException {
            ApiResponse<LanguageList> localVarResp = listLanguagesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLanguages request with HTTP info returned
         * @return ApiResponse&lt;LanguageList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LanguageList> executeWithHttpInfo() throws ApiException {
            return listLanguagesWithHttpInfo();
        }

        /**
         * Execute listLanguages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LanguageList> _callback) throws ApiException {
            return listLanguagesAsync(_callback);
        }
    }

    /**
     * List languages
     * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
     * @return ListLanguagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Languages List </td><td>  -  </td></tr>
     </table>
     */
    public ListLanguagesRequestBuilder listLanguages() throws IllegalArgumentException {
        return new ListLanguagesRequestBuilder();
    }
}
