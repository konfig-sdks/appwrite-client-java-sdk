/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Execution;
import com.konfigthis.client.model.ExecutionList;
import com.konfigthis.client.model.FunctionsTriggerFunctionExecutionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FunctionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getExecutionLogCall(String functionId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functions/{functionId}/executions/{executionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExecutionLogValidateBeforeCall(String functionId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling getExecutionLog(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling getExecutionLog(Async)");
        }

        return getExecutionLogCall(functionId, executionId, _callback);

    }


    private ApiResponse<Execution> getExecutionLogWithHttpInfo(String functionId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = getExecutionLogValidateBeforeCall(functionId, executionId, null);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExecutionLogAsync(String functionId, String executionId, final ApiCallback<Execution> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExecutionLogValidateBeforeCall(functionId, executionId, _callback);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExecutionLogRequestBuilder {
        private final String functionId;
        private final String executionId;

        private GetExecutionLogRequestBuilder(String functionId, String executionId) {
            this.functionId = functionId;
            this.executionId = executionId;
        }

        /**
         * Build call for getExecutionLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExecutionLogCall(functionId, executionId, _callback);
        }


        /**
         * Execute getExecutionLog request
         * @return Execution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public Execution execute() throws ApiException {
            ApiResponse<Execution> localVarResp = getExecutionLogWithHttpInfo(functionId, executionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExecutionLog request with HTTP info returned
         * @return ApiResponse&lt;Execution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Execution> executeWithHttpInfo() throws ApiException {
            return getExecutionLogWithHttpInfo(functionId, executionId);
        }

        /**
         * Execute getExecutionLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Execution> _callback) throws ApiException {
            return getExecutionLogAsync(functionId, executionId, _callback);
        }
    }

    /**
     * Get execution
     * Get a function execution log by its unique ID.
     * @param functionId Function ID. (required)
     * @param executionId Execution ID. (required)
     * @return GetExecutionLogRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public GetExecutionLogRequestBuilder getExecutionLog(String functionId, String executionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (executionId == null) throw new IllegalArgumentException("\"executionId\" is required but got null");
            

        return new GetExecutionLogRequestBuilder(functionId, executionId);
    }
    private okhttp3.Call listExecutionsCall(String functionId, List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functions/{functionId}/executions"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExecutionsValidateBeforeCall(String functionId, List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling listExecutions(Async)");
        }

        return listExecutionsCall(functionId, queries, search, _callback);

    }


    private ApiResponse<ExecutionList> listExecutionsWithHttpInfo(String functionId, List<String> queries, String search) throws ApiException {
        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(functionId, queries, search, null);
        Type localVarReturnType = new TypeToken<ExecutionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExecutionsAsync(String functionId, List<String> queries, String search, final ApiCallback<ExecutionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(functionId, queries, search, _callback);
        Type localVarReturnType = new TypeToken<ExecutionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListExecutionsRequestBuilder {
        private final String functionId;
        private List<String> queries;
        private String search;

        private ListExecutionsRequestBuilder(String functionId) {
            this.functionId = functionId;
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration (optional)
         * @return ListExecutionsRequestBuilder
         */
        public ListExecutionsRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Set search
         * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
         * @return ListExecutionsRequestBuilder
         */
        public ListExecutionsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for listExecutions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listExecutionsCall(functionId, queries, search, _callback);
        }


        /**
         * Execute listExecutions request
         * @return ExecutionList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
         </table>
         */
        public ExecutionList execute() throws ApiException {
            ApiResponse<ExecutionList> localVarResp = listExecutionsWithHttpInfo(functionId, queries, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listExecutions request with HTTP info returned
         * @return ApiResponse&lt;ExecutionList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExecutionList> executeWithHttpInfo() throws ApiException {
            return listExecutionsWithHttpInfo(functionId, queries, search);
        }

        /**
         * Execute listExecutions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExecutionList> _callback) throws ApiException {
            return listExecutionsAsync(functionId, queries, search, _callback);
        }
    }

    /**
     * List executions
     * Get a list of all the current user function execution logs. You can use the query params to filter your results.
     * @param functionId Function ID. (required)
     * @return ListExecutionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
     </table>
     */
    public ListExecutionsRequestBuilder listExecutions(String functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new ListExecutionsRequestBuilder(functionId);
    }
    private okhttp3.Call triggerFunctionExecutionCall(String functionId, FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionsTriggerFunctionExecutionRequest;

        // create path and map variables
        String localVarPath = "/functions/{functionId}/executions"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerFunctionExecutionValidateBeforeCall(String functionId, FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling triggerFunctionExecution(Async)");
        }

        return triggerFunctionExecutionCall(functionId, functionsTriggerFunctionExecutionRequest, _callback);

    }


    private ApiResponse<Execution> triggerFunctionExecutionWithHttpInfo(String functionId, FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerFunctionExecutionValidateBeforeCall(functionId, functionsTriggerFunctionExecutionRequest, null);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerFunctionExecutionAsync(String functionId, FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest, final ApiCallback<Execution> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerFunctionExecutionValidateBeforeCall(functionId, functionsTriggerFunctionExecutionRequest, _callback);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerFunctionExecutionRequestBuilder {
        private final String functionId;
        private String body;
        private Boolean async;
        private String path;
        private String method;
        private Object headers;

        private TriggerFunctionExecutionRequestBuilder(String functionId) {
            this.functionId = functionId;
        }

        /**
         * Set body
         * @param body HTTP body of execution. Default value is empty string. (optional)
         * @return TriggerFunctionExecutionRequestBuilder
         */
        public TriggerFunctionExecutionRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set async
         * @param async Execute code in the background. Default value is false. (optional)
         * @return TriggerFunctionExecutionRequestBuilder
         */
        public TriggerFunctionExecutionRequestBuilder async(Boolean async) {
            this.async = async;
            return this;
        }
        
        /**
         * Set path
         * @param path HTTP path of execution. Path can include query params. Default value is / (optional)
         * @return TriggerFunctionExecutionRequestBuilder
         */
        public TriggerFunctionExecutionRequestBuilder path(String path) {
            this.path = path;
            return this;
        }
        
        /**
         * Set method
         * @param method HTTP method of execution. Default value is GET. (optional)
         * @return TriggerFunctionExecutionRequestBuilder
         */
        public TriggerFunctionExecutionRequestBuilder method(String method) {
            this.method = method;
            return this;
        }
        
        /**
         * Set headers
         * @param headers HTTP headers of execution. Defaults to empty. (optional)
         * @return TriggerFunctionExecutionRequestBuilder
         */
        public TriggerFunctionExecutionRequestBuilder headers(Object headers) {
            this.headers = headers;
            return this;
        }
        
        /**
         * Build call for triggerFunctionExecution
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest = buildBodyParams();
            return triggerFunctionExecutionCall(functionId, functionsTriggerFunctionExecutionRequest, _callback);
        }

        private FunctionsTriggerFunctionExecutionRequest buildBodyParams() {
            FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest = new FunctionsTriggerFunctionExecutionRequest();
            functionsTriggerFunctionExecutionRequest.body(this.body);
            functionsTriggerFunctionExecutionRequest.async(this.async);
            functionsTriggerFunctionExecutionRequest.path(this.path);
            if (this.method != null)
            functionsTriggerFunctionExecutionRequest.method(FunctionsTriggerFunctionExecutionRequest.MethodEnum.fromValue(this.method));
            functionsTriggerFunctionExecutionRequest.headers(this.headers);
            return functionsTriggerFunctionExecutionRequest;
        }

        /**
         * Execute triggerFunctionExecution request
         * @return Execution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public Execution execute() throws ApiException {
            FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest = buildBodyParams();
            ApiResponse<Execution> localVarResp = triggerFunctionExecutionWithHttpInfo(functionId, functionsTriggerFunctionExecutionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerFunctionExecution request with HTTP info returned
         * @return ApiResponse&lt;Execution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Execution> executeWithHttpInfo() throws ApiException {
            FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest = buildBodyParams();
            return triggerFunctionExecutionWithHttpInfo(functionId, functionsTriggerFunctionExecutionRequest);
        }

        /**
         * Execute triggerFunctionExecution request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Execution> _callback) throws ApiException {
            FunctionsTriggerFunctionExecutionRequest functionsTriggerFunctionExecutionRequest = buildBodyParams();
            return triggerFunctionExecutionAsync(functionId, functionsTriggerFunctionExecutionRequest, _callback);
        }
    }

    /**
     * Create execution
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the &#x60;Get Execution&#x60; endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @param functionId Function ID. (required)
     * @return TriggerFunctionExecutionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public TriggerFunctionExecutionRequestBuilder triggerFunctionExecution(String functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new TriggerFunctionExecutionRequestBuilder(functionId);
    }
}
