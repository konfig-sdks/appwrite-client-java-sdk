/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Membership;
import com.konfigthis.client.model.MembershipList;
import com.konfigthis.client.model.Team;
import com.konfigthis.client.model.TeamList;
import com.konfigthis.client.model.TeamsCreateMembershipRequest;
import com.konfigthis.client.model.TeamsCreateNewTeamRequest;
import com.konfigthis.client.model.TeamsUpdateMembershipRolesRequest;
import com.konfigthis.client.model.TeamsUpdateMembershipStatusRequest;
import com.konfigthis.client.model.TeamsUpdateNameByIdRequest;
import com.konfigthis.client.model.TeamsUpdatePrefsByIdRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private static TeamsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TeamsApi(apiClient);
    }

    /**
     * Create team membership
     *
     * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn&#39;t exist. If initiated from a Server SDK, the new member will be added automatically to the team.  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID &gt; email &gt; phone number if you provide more than one of these parameters.  Use the &#x60;url&#x60; parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team.   Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMembershipTest() throws ApiException {
        List<String> roles = null;
        String teamId = null;
        String email = null;
        String userId = null;
        String phone = null;
        String url = null;
        String name = null;
        Membership response = api.createMembership(roles, teamId)
                .email(email)
                .userId(userId)
                .phone(phone)
                .url(url)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team
     *
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTeamTest() throws ApiException {
        String teamId = null;
        String name = null;
        List<String> roles = null;
        Team response = api.createNewTeam(teamId, name)
                .roles(roles)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete team membership
     *
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembershipTest() throws ApiException {
        String teamId = null;
        String membershipId = null;
        api.deleteMembership(teamId, membershipId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get team
     *
     * Get a team by its ID. All team members have read access for this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String teamId = null;
        Team response = api.getById(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get team membership
     *
     * Get a team member by the membership unique id. All team members have read access for this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembershipTest() throws ApiException {
        String teamId = null;
        String membershipId = null;
        Membership response = api.getMembership(teamId, membershipId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get team preferences
     *
     * Get the team&#39;s shared preferences by its unique ID. If a preference doesn&#39;t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrefsTest() throws ApiException {
        String teamId = null;
        Map<String, Object> response = api.getPrefs(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List teams
     *
     * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserMembershipsTest() throws ApiException {
        List<String> queries = null;
        String search = null;
        TeamList response = api.getUserMemberships()
                .queries(queries)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * List team memberships
     *
     * Use this endpoint to list a team&#39;s members using the team&#39;s ID. All team members have read access to this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembershipsTest() throws ApiException {
        String teamId = null;
        List<String> queries = null;
        String search = null;
        MembershipList response = api.listMemberships(teamId)
                .queries(queries)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete team
     *
     * Delete a team using its ID. Only team members with the owner role can delete the team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTeamTest() throws ApiException {
        String teamId = null;
        api.removeTeam(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update membership
     *
     * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembershipRolesTest() throws ApiException {
        List<String> roles = null;
        String teamId = null;
        String membershipId = null;
        Membership response = api.updateMembershipRoles(roles, teamId, membershipId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update team membership status
     *
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.  If the request is successful, a session for the user is automatically created. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembershipStatusTest() throws ApiException {
        String userId = null;
        String secret = null;
        String teamId = null;
        String membershipId = null;
        Membership response = api.updateMembershipStatus(userId, secret, teamId, membershipId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update name
     *
     * Update the team&#39;s name by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNameByIdTest() throws ApiException {
        String name = null;
        String teamId = null;
        Team response = api.updateNameById(name, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update preferences
     *
     * Update the team&#39;s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsByIdTest() throws ApiException {
        Object prefs = null;
        String teamId = null;
        Map<String, Object> response = api.updatePrefsById(prefs, teamId)
                .execute();
        // TODO: test validations
    }

}
