/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Target;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * User
 */
@ApiModel(description = "User")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class User {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_$_CREATED_AT = "$createdAt";
  @SerializedName(SERIALIZED_NAME_$_CREATED_AT)
  private String $createdAt;

  public static final String SERIALIZED_NAME_$_UPDATED_AT = "$updatedAt";
  @SerializedName(SERIALIZED_NAME_$_UPDATED_AT)
  private String $updatedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_HASH_OPTIONS = "hashOptions";
  @SerializedName(SERIALIZED_NAME_HASH_OPTIONS)
  private List<Object> hashOptions = null;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private String registration;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Boolean status;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_UPDATE = "passwordUpdate";
  @SerializedName(SERIALIZED_NAME_PASSWORD_UPDATE)
  private String passwordUpdate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_EMAIL_VERIFICATION = "emailVerification";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFICATION)
  private Boolean emailVerification;

  public static final String SERIALIZED_NAME_PHONE_VERIFICATION = "phoneVerification";
  @SerializedName(SERIALIZED_NAME_PHONE_VERIFICATION)
  private Boolean phoneVerification;

  public static final String SERIALIZED_NAME_MFA = "mfa";
  @SerializedName(SERIALIZED_NAME_MFA)
  private Boolean mfa;

  public static final String SERIALIZED_NAME_PREFS = "prefs";
  @SerializedName(SERIALIZED_NAME_PREFS)
  private List<Map<String, Object>> prefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Target> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESSED_AT = "accessedAt";
  @SerializedName(SERIALIZED_NAME_ACCESSED_AT)
  private String accessedAt;

  public User() {
  }

  public User $id(String $id) {
    
    
    
    
    this.$id = $id;
    return this;
  }

   /**
   * User ID.
   * @return $id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID.")

  public String get$Id() {
    return $id;
  }


  public void set$Id(String $id) {
    
    
    
    this.$id = $id;
  }


  public User $createdAt(String $createdAt) {
    
    
    
    
    this.$createdAt = $createdAt;
    return this;
  }

   /**
   * User creation date in ISO 8601 format.
   * @return $createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User creation date in ISO 8601 format.")

  public String get$CreatedAt() {
    return $createdAt;
  }


  public void set$CreatedAt(String $createdAt) {
    
    
    
    this.$createdAt = $createdAt;
  }


  public User $updatedAt(String $updatedAt) {
    
    
    
    
    this.$updatedAt = $updatedAt;
    return this;
  }

   /**
   * User update date in ISO 8601 format.
   * @return $updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User update date in ISO 8601 format.")

  public String get$UpdatedAt() {
    return $updatedAt;
  }


  public void set$UpdatedAt(String $updatedAt) {
    
    
    
    this.$updatedAt = $updatedAt;
  }


  public User name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * User name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public User password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * Hashed user password.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hashed user password.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public User hash(String hash) {
    
    
    
    
    this.hash = hash;
    return this;
  }

   /**
   * Password hashing algorithm.
   * @return hash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Password hashing algorithm.")

  public String getHash() {
    return hash;
  }


  public void setHash(String hash) {
    
    
    
    this.hash = hash;
  }


  public User hashOptions(List<Object> hashOptions) {
    
    
    
    
    this.hashOptions = hashOptions;
    return this;
  }

  public User addHashOptionsItem(Object hashOptionsItem) {
    if (this.hashOptions == null) {
      this.hashOptions = new ArrayList<>();
    }
    this.hashOptions.add(hashOptionsItem);
    return this;
  }

   /**
   * Password hashing algorithm configuration.
   * @return hashOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Password hashing algorithm configuration.")

  public List<Object> getHashOptions() {
    return hashOptions;
  }


  public void setHashOptions(List<Object> hashOptions) {
    
    
    
    this.hashOptions = hashOptions;
  }


  public User registration(String registration) {
    
    
    
    
    this.registration = registration;
    return this;
  }

   /**
   * User registration date in ISO 8601 format.
   * @return registration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User registration date in ISO 8601 format.")

  public String getRegistration() {
    return registration;
  }


  public void setRegistration(String registration) {
    
    
    
    this.registration = registration;
  }


  public User status(Boolean status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * User status. Pass &#x60;true&#x60; for enabled and &#x60;false&#x60; for disabled.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User status. Pass `true` for enabled and `false` for disabled.")

  public Boolean getStatus() {
    return status;
  }


  public void setStatus(Boolean status) {
    
    
    
    this.status = status;
  }


  public User labels(List<String> labels) {
    
    
    
    
    this.labels = labels;
    return this;
  }

  public User addLabelsItem(String labelsItem) {
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Labels for the user.
   * @return labels
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Labels for the user.")

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    
    
    
    this.labels = labels;
  }


  public User passwordUpdate(String passwordUpdate) {
    
    
    
    
    this.passwordUpdate = passwordUpdate;
    return this;
  }

   /**
   * Password update time in ISO 8601 format.
   * @return passwordUpdate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Password update time in ISO 8601 format.")

  public String getPasswordUpdate() {
    return passwordUpdate;
  }


  public void setPasswordUpdate(String passwordUpdate) {
    
    
    
    this.passwordUpdate = passwordUpdate;
  }


  public User email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * User email address.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User email address.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public User phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * User phone number in E.164 format.
   * @return phone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User phone number in E.164 format.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public User emailVerification(Boolean emailVerification) {
    
    
    
    
    this.emailVerification = emailVerification;
    return this;
  }

   /**
   * Email verification status.
   * @return emailVerification
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Email verification status.")

  public Boolean getEmailVerification() {
    return emailVerification;
  }


  public void setEmailVerification(Boolean emailVerification) {
    
    
    
    this.emailVerification = emailVerification;
  }


  public User phoneVerification(Boolean phoneVerification) {
    
    
    
    
    this.phoneVerification = phoneVerification;
    return this;
  }

   /**
   * Phone verification status.
   * @return phoneVerification
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Phone verification status.")

  public Boolean getPhoneVerification() {
    return phoneVerification;
  }


  public void setPhoneVerification(Boolean phoneVerification) {
    
    
    
    this.phoneVerification = phoneVerification;
  }


  public User mfa(Boolean mfa) {
    
    
    
    
    this.mfa = mfa;
    return this;
  }

   /**
   * Multi factor authentication status.
   * @return mfa
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Multi factor authentication status.")

  public Boolean getMfa() {
    return mfa;
  }


  public void setMfa(Boolean mfa) {
    
    
    
    this.mfa = mfa;
  }


  public User prefs(List<Map<String, Object>> prefs) {
    
    
    
    
    this.prefs = prefs;
    return this;
  }

  public User addPrefsItem(Map<String, Object> prefsItem) {
    this.prefs.add(prefsItem);
    return this;
  }

   /**
   * User preferences as a key-value object
   * @return prefs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User preferences as a key-value object")

  public List<Map<String, Object>> getPrefs() {
    return prefs;
  }


  public void setPrefs(List<Map<String, Object>> prefs) {
    
    
    
    this.prefs = prefs;
  }


  public User targets(List<Target> targets) {
    
    
    
    
    this.targets = targets;
    return this;
  }

  public User addTargetsItem(Target targetsItem) {
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * A user-owned message receiver. A single user may have multiple e.g. emails, phones, and a browser. Each target is registered with a single provider.
   * @return targets
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A user-owned message receiver. A single user may have multiple e.g. emails, phones, and a browser. Each target is registered with a single provider.")

  public List<Target> getTargets() {
    return targets;
  }


  public void setTargets(List<Target> targets) {
    
    
    
    this.targets = targets;
  }


  public User accessedAt(String accessedAt) {
    
    
    
    
    this.accessedAt = accessedAt;
    return this;
  }

   /**
   * Most recent access date in ISO 8601 format. This attribute is only updated again after 24 hours.
   * @return accessedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Most recent access date in ISO 8601 format. This attribute is only updated again after 24 hours.")

  public String getAccessedAt() {
    return accessedAt;
  }


  public void setAccessedAt(String accessedAt) {
    
    
    
    this.accessedAt = accessedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the User instance itself
   */
  public User putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.$id, user.$id) &&
        Objects.equals(this.$createdAt, user.$createdAt) &&
        Objects.equals(this.$updatedAt, user.$updatedAt) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.hash, user.hash) &&
        Objects.equals(this.hashOptions, user.hashOptions) &&
        Objects.equals(this.registration, user.registration) &&
        Objects.equals(this.status, user.status) &&
        Objects.equals(this.labels, user.labels) &&
        Objects.equals(this.passwordUpdate, user.passwordUpdate) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.phone, user.phone) &&
        Objects.equals(this.emailVerification, user.emailVerification) &&
        Objects.equals(this.phoneVerification, user.phoneVerification) &&
        Objects.equals(this.mfa, user.mfa) &&
        Objects.equals(this.prefs, user.prefs) &&
        Objects.equals(this.targets, user.targets) &&
        Objects.equals(this.accessedAt, user.accessedAt)&&
        Objects.equals(this.additionalProperties, user.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, $createdAt, $updatedAt, name, password, hash, hashOptions, registration, status, labels, passwordUpdate, email, phone, emailVerification, phoneVerification, mfa, prefs, targets, accessedAt, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    $createdAt: ").append(toIndentedString($createdAt)).append("\n");
    sb.append("    $updatedAt: ").append(toIndentedString($updatedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    hashOptions: ").append(toIndentedString(hashOptions)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    passwordUpdate: ").append(toIndentedString(passwordUpdate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    emailVerification: ").append(toIndentedString(emailVerification)).append("\n");
    sb.append("    phoneVerification: ").append(toIndentedString(phoneVerification)).append("\n");
    sb.append("    mfa: ").append(toIndentedString(mfa)).append("\n");
    sb.append("    prefs: ").append(toIndentedString(prefs)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    accessedAt: ").append(toIndentedString(accessedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("$createdAt");
    openapiFields.add("$updatedAt");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("hash");
    openapiFields.add("hashOptions");
    openapiFields.add("registration");
    openapiFields.add("status");
    openapiFields.add("labels");
    openapiFields.add("passwordUpdate");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("emailVerification");
    openapiFields.add("phoneVerification");
    openapiFields.add("mfa");
    openapiFields.add("prefs");
    openapiFields.add("targets");
    openapiFields.add("accessedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("$createdAt");
    openapiRequiredFields.add("$updatedAt");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("registration");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("passwordUpdate");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("emailVerification");
    openapiRequiredFields.add("phoneVerification");
    openapiRequiredFields.add("mfa");
    openapiRequiredFields.add("prefs");
    openapiRequiredFields.add("targets");
    openapiRequiredFields.add("accessedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      if (!jsonObj.get("$createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$createdAt").toString()));
      }
      if (!jsonObj.get("$updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$updatedAt").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("password").isJsonNull() && (jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("hash").isJsonNull() && (jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("hashOptions") != null && !jsonObj.get("hashOptions").isJsonNull() && !jsonObj.get("hashOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashOptions` to be an array in the JSON string or null but got `%s`", jsonObj.get("hashOptions").toString()));
      }
      if (!jsonObj.get("registration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("labels") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if (!jsonObj.get("passwordUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordUpdate").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("prefs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("prefs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs` to be an array in the JSON string but got `%s`", jsonObj.get("prefs").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
      }

      JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
      // validate the required field `targets` (array)
      for (int i = 0; i < jsonArraytargets.size(); i++) {
        Target.validateJsonObject(jsonArraytargets.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("accessedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             User instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

