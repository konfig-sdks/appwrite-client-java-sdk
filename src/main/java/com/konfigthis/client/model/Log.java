/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Log
 */
@ApiModel(description = "Log")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Log {
  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_OS_CODE = "osCode";
  @SerializedName(SERIALIZED_NAME_OS_CODE)
  private String osCode;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "clientType";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private String clientType;

  public static final String SERIALIZED_NAME_CLIENT_CODE = "clientCode";
  @SerializedName(SERIALIZED_NAME_CLIENT_CODE)
  private String clientCode;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "clientVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_CLIENT_ENGINE = "clientEngine";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENGINE)
  private String clientEngine;

  public static final String SERIALIZED_NAME_CLIENT_ENGINE_VERSION = "clientEngineVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENGINE_VERSION)
  private String clientEngineVersion;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_BRAND = "deviceBrand";
  @SerializedName(SERIALIZED_NAME_DEVICE_BRAND)
  private String deviceBrand;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "deviceModel";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private String deviceModel;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public Log() {
  }

  public Log event(String event) {
    
    
    
    
    this.event = event;
    return this;
  }

   /**
   * Event name.
   * @return event
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Event name.")

  public String getEvent() {
    return event;
  }


  public void setEvent(String event) {
    
    
    
    this.event = event;
  }


  public Log userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public Log userEmail(String userEmail) {
    
    
    
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * User Email.
   * @return userEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User Email.")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    
    
    
    this.userEmail = userEmail;
  }


  public Log userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * User Name.
   * @return userName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User Name.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public Log mode(String mode) {
    
    
    
    
    this.mode = mode;
    return this;
  }

   /**
   * API mode when event triggered.
   * @return mode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "API mode when event triggered.")

  public String getMode() {
    return mode;
  }


  public void setMode(String mode) {
    
    
    
    this.mode = mode;
  }


  public Log ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * IP session in use when the session was created.
   * @return ip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IP session in use when the session was created.")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public Log time(String time) {
    
    
    
    
    this.time = time;
    return this;
  }

   /**
   * Log creation date in ISO 8601 format.
   * @return time
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Log creation date in ISO 8601 format.")

  public String getTime() {
    return time;
  }


  public void setTime(String time) {
    
    
    
    this.time = time;
  }


  public Log osCode(String osCode) {
    
    
    
    
    this.osCode = osCode;
    return this;
  }

   /**
   * Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
   * @return osCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).")

  public String getOsCode() {
    return osCode;
  }


  public void setOsCode(String osCode) {
    
    
    
    this.osCode = osCode;
  }


  public Log osName(String osName) {
    
    
    
    
    this.osName = osName;
    return this;
  }

   /**
   * Operating system name.
   * @return osName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operating system name.")

  public String getOsName() {
    return osName;
  }


  public void setOsName(String osName) {
    
    
    
    this.osName = osName;
  }


  public Log osVersion(String osVersion) {
    
    
    
    
    this.osVersion = osVersion;
    return this;
  }

   /**
   * Operating system version.
   * @return osVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operating system version.")

  public String getOsVersion() {
    return osVersion;
  }


  public void setOsVersion(String osVersion) {
    
    
    
    this.osVersion = osVersion;
  }


  public Log clientType(String clientType) {
    
    
    
    
    this.clientType = clientType;
    return this;
  }

   /**
   * Client type.
   * @return clientType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client type.")

  public String getClientType() {
    return clientType;
  }


  public void setClientType(String clientType) {
    
    
    
    this.clientType = clientType;
  }


  public Log clientCode(String clientCode) {
    
    
    
    
    this.clientCode = clientCode;
    return this;
  }

   /**
   * Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
   * @return clientCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).")

  public String getClientCode() {
    return clientCode;
  }


  public void setClientCode(String clientCode) {
    
    
    
    this.clientCode = clientCode;
  }


  public Log clientName(String clientName) {
    
    
    
    
    this.clientName = clientName;
    return this;
  }

   /**
   * Client name.
   * @return clientName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client name.")

  public String getClientName() {
    return clientName;
  }


  public void setClientName(String clientName) {
    
    
    
    this.clientName = clientName;
  }


  public Log clientVersion(String clientVersion) {
    
    
    
    
    this.clientVersion = clientVersion;
    return this;
  }

   /**
   * Client version.
   * @return clientVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client version.")

  public String getClientVersion() {
    return clientVersion;
  }


  public void setClientVersion(String clientVersion) {
    
    
    
    this.clientVersion = clientVersion;
  }


  public Log clientEngine(String clientEngine) {
    
    
    
    
    this.clientEngine = clientEngine;
    return this;
  }

   /**
   * Client engine name.
   * @return clientEngine
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client engine name.")

  public String getClientEngine() {
    return clientEngine;
  }


  public void setClientEngine(String clientEngine) {
    
    
    
    this.clientEngine = clientEngine;
  }


  public Log clientEngineVersion(String clientEngineVersion) {
    
    
    
    
    this.clientEngineVersion = clientEngineVersion;
    return this;
  }

   /**
   * Client engine name.
   * @return clientEngineVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client engine name.")

  public String getClientEngineVersion() {
    return clientEngineVersion;
  }


  public void setClientEngineVersion(String clientEngineVersion) {
    
    
    
    this.clientEngineVersion = clientEngineVersion;
  }


  public Log deviceName(String deviceName) {
    
    
    
    
    this.deviceName = deviceName;
    return this;
  }

   /**
   * Device name.
   * @return deviceName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device name.")

  public String getDeviceName() {
    return deviceName;
  }


  public void setDeviceName(String deviceName) {
    
    
    
    this.deviceName = deviceName;
  }


  public Log deviceBrand(String deviceBrand) {
    
    
    
    
    this.deviceBrand = deviceBrand;
    return this;
  }

   /**
   * Device brand name.
   * @return deviceBrand
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device brand name.")

  public String getDeviceBrand() {
    return deviceBrand;
  }


  public void setDeviceBrand(String deviceBrand) {
    
    
    
    this.deviceBrand = deviceBrand;
  }


  public Log deviceModel(String deviceModel) {
    
    
    
    
    this.deviceModel = deviceModel;
    return this;
  }

   /**
   * Device model name.
   * @return deviceModel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device model name.")

  public String getDeviceModel() {
    return deviceModel;
  }


  public void setDeviceModel(String deviceModel) {
    
    
    
    this.deviceModel = deviceModel;
  }


  public Log countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country two-character ISO 3166-1 alpha code.
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Country two-character ISO 3166-1 alpha code.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public Log countryName(String countryName) {
    
    
    
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Country name.
   * @return countryName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Country name.")

  public String getCountryName() {
    return countryName;
  }


  public void setCountryName(String countryName) {
    
    
    
    this.countryName = countryName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Log instance itself
   */
  public Log putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Log log = (Log) o;
    return Objects.equals(this.event, log.event) &&
        Objects.equals(this.userId, log.userId) &&
        Objects.equals(this.userEmail, log.userEmail) &&
        Objects.equals(this.userName, log.userName) &&
        Objects.equals(this.mode, log.mode) &&
        Objects.equals(this.ip, log.ip) &&
        Objects.equals(this.time, log.time) &&
        Objects.equals(this.osCode, log.osCode) &&
        Objects.equals(this.osName, log.osName) &&
        Objects.equals(this.osVersion, log.osVersion) &&
        Objects.equals(this.clientType, log.clientType) &&
        Objects.equals(this.clientCode, log.clientCode) &&
        Objects.equals(this.clientName, log.clientName) &&
        Objects.equals(this.clientVersion, log.clientVersion) &&
        Objects.equals(this.clientEngine, log.clientEngine) &&
        Objects.equals(this.clientEngineVersion, log.clientEngineVersion) &&
        Objects.equals(this.deviceName, log.deviceName) &&
        Objects.equals(this.deviceBrand, log.deviceBrand) &&
        Objects.equals(this.deviceModel, log.deviceModel) &&
        Objects.equals(this.countryCode, log.countryCode) &&
        Objects.equals(this.countryName, log.countryName)&&
        Objects.equals(this.additionalProperties, log.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(event, userId, userEmail, userName, mode, ip, time, osCode, osName, osVersion, clientType, clientCode, clientName, clientVersion, clientEngine, clientEngineVersion, deviceName, deviceBrand, deviceModel, countryCode, countryName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Log {\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    osCode: ").append(toIndentedString(osCode)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    clientCode: ").append(toIndentedString(clientCode)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    clientEngine: ").append(toIndentedString(clientEngine)).append("\n");
    sb.append("    clientEngineVersion: ").append(toIndentedString(clientEngineVersion)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceBrand: ").append(toIndentedString(deviceBrand)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event");
    openapiFields.add("userId");
    openapiFields.add("userEmail");
    openapiFields.add("userName");
    openapiFields.add("mode");
    openapiFields.add("ip");
    openapiFields.add("time");
    openapiFields.add("osCode");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("clientType");
    openapiFields.add("clientCode");
    openapiFields.add("clientName");
    openapiFields.add("clientVersion");
    openapiFields.add("clientEngine");
    openapiFields.add("clientEngineVersion");
    openapiFields.add("deviceName");
    openapiFields.add("deviceBrand");
    openapiFields.add("deviceModel");
    openapiFields.add("countryCode");
    openapiFields.add("countryName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("userEmail");
    openapiRequiredFields.add("userName");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("osCode");
    openapiRequiredFields.add("osName");
    openapiRequiredFields.add("osVersion");
    openapiRequiredFields.add("clientType");
    openapiRequiredFields.add("clientCode");
    openapiRequiredFields.add("clientName");
    openapiRequiredFields.add("clientVersion");
    openapiRequiredFields.add("clientEngine");
    openapiRequiredFields.add("clientEngineVersion");
    openapiRequiredFields.add("deviceName");
    openapiRequiredFields.add("deviceBrand");
    openapiRequiredFields.add("deviceModel");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("countryName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Log
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Log.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Log is not found in the empty JSON string", Log.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Log.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if (!jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if (!jsonObj.get("osCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osCode").toString()));
      }
      if (!jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if (!jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if (!jsonObj.get("clientType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientType").toString()));
      }
      if (!jsonObj.get("clientCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCode").toString()));
      }
      if (!jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if (!jsonObj.get("clientVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientVersion").toString()));
      }
      if (!jsonObj.get("clientEngine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEngine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEngine").toString()));
      }
      if (!jsonObj.get("clientEngineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEngineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEngineVersion").toString()));
      }
      if (!jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if (!jsonObj.get("deviceBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceBrand").toString()));
      }
      if (!jsonObj.get("deviceModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceModel").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Log.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Log' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Log> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Log.class));

       return (TypeAdapter<T>) new TypeAdapter<Log>() {
           @Override
           public void write(JsonWriter out, Log value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Log read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Log instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Log given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Log
  * @throws IOException if the JSON string is invalid with respect to Log
  */
  public static Log fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Log.class);
  }

 /**
  * Convert an instance of Log to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

