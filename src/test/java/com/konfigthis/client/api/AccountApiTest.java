/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccountCompleteMfaChallengeRequest;
import com.konfigthis.client.model.AccountCompletePasswordRecoveryRequest;
import com.konfigthis.client.model.AccountConfirmPhoneVerificationRequest;
import com.konfigthis.client.model.AccountCreateEmailPasswordSessionRequest;
import com.konfigthis.client.model.AccountCreateEmailTokenRequest;
import com.konfigthis.client.model.AccountCreateEmailVerificationRequest;
import com.konfigthis.client.model.AccountCreateEmailVerificationRequest1;
import com.konfigthis.client.model.AccountCreateMagicUrlTokenRequest;
import com.konfigthis.client.model.AccountCreateMfaChallengeRequest;
import com.konfigthis.client.model.AccountCreatePasswordRecoveryRequest;
import com.konfigthis.client.model.AccountCreatePhoneTokenRequest;
import com.konfigthis.client.model.AccountCreatePushTargetRequest;
import com.konfigthis.client.model.AccountCreateSessionFromTokenRequest;
import com.konfigthis.client.model.AccountDeleteAuthenticatorRequest;
import com.konfigthis.client.model.AccountRegisterUserRequest;
import com.konfigthis.client.model.AccountUpdateMagicUrlSessionRequest;
import com.konfigthis.client.model.AccountUpdateMfaStatusRequest;
import com.konfigthis.client.model.AccountUpdateNameOperationRequest;
import com.konfigthis.client.model.AccountUpdatePasswordRequest;
import com.konfigthis.client.model.AccountUpdatePhoneRequest;
import com.konfigthis.client.model.AccountUpdatePhoneSessionRequest;
import com.konfigthis.client.model.AccountUpdatePreferencesRequest;
import com.konfigthis.client.model.AccountUpdatePushTargetRequest;
import com.konfigthis.client.model.AccountUpdateUserEmailRequest;
import com.konfigthis.client.model.AccountVerifyAuthenticatorRequest;
import com.konfigthis.client.model.IdentityList;
import com.konfigthis.client.model.Jwt;
import com.konfigthis.client.model.LogList;
import com.konfigthis.client.model.MfaChallenge;
import com.konfigthis.client.model.MfaFactors;
import com.konfigthis.client.model.MfaRecoveryCodes;
import com.konfigthis.client.model.MfaType;
import com.konfigthis.client.model.Session;
import com.konfigthis.client.model.SessionList;
import com.konfigthis.client.model.Target;
import com.konfigthis.client.model.Token;
import com.konfigthis.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private static AccountApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AccountApi(apiClient);
    }

    /**
     * Add Authenticator
     *
     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator) method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAuthenticatorTest() throws ApiException {
        String type = null;
        MfaType response = api.addAuthenticator(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Update status
     *
     * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockUserStatusTest() throws ApiException {
        User response = api.blockUserStatus()
                .execute();
        // TODO: test validations
    }

    /**
     * Create MFA Challenge (confirmation)
     *
     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeMfaChallengeTest() throws ApiException {
        String challengeId = null;
        String otp = null;
        Session response = api.completeMfaChallenge(challengeId, otp)
                .execute();
        // TODO: test validations
    }

    /**
     * Create password recovery (confirmation)
     *
     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completePasswordRecoveryTest() throws ApiException {
        String userId = null;
        String secret = null;
        String password = null;
        Token response = api.completePasswordRecovery(userId, secret, password)
                .execute();
        // TODO: test validations
    }

    /**
     * Create phone verification (confirmation)
     *
     * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user&#39;s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmPhoneVerificationTest() throws ApiException {
        String userId = null;
        String secret = null;
        Token response = api.confirmPhoneVerification(userId, secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Create anonymous session
     *
     * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnonymousSessionTest() throws ApiException {
        Session response = api.createAnonymousSession()
                .execute();
        // TODO: test validations
    }

    /**
     * Create email password session
     *
     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailPasswordSessionTest() throws ApiException {
        String email = null;
        String password = null;
        Session response = api.createEmailPasswordSession(email, password)
                .execute();
        // TODO: test validations
    }

    /**
     * Create email token (OTP)
     *
     * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#39;s email is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailTokenTest() throws ApiException {
        String userId = null;
        String email = null;
        Boolean phrase = null;
        Token response = api.createEmailToken(userId, email)
                .phrase(phrase)
                .execute();
        // TODO: test validations
    }

    /**
     * Create email verification (confirmation)
     *
     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailVerificationTest() throws ApiException {
        String userId = null;
        String secret = null;
        Token response = api.createEmailVerification(userId, secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Create email verification
     *
     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user&#39;s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailVerification_0Test() throws ApiException {
        String url = null;
        Token response = api.createEmailVerification_0(url)
                .execute();
        // TODO: test validations
    }

    /**
     * Create JWT
     *
     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJwtTest() throws ApiException {
        Jwt response = api.createJwt()
                .execute();
        // TODO: test validations
    }

    /**
     * Create magic URL token
     *
     * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user&#39;s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMagicUrlTokenTest() throws ApiException {
        String userId = null;
        String email = null;
        String url = null;
        Boolean phrase = null;
        Token response = api.createMagicUrlToken(userId, email)
                .url(url)
                .phrase(phrase)
                .execute();
        // TODO: test validations
    }

    /**
     * Create 2FA Challenge
     *
     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMfaChallengeTest() throws ApiException {
        String factor = null;
        MfaChallenge response = api.createMfaChallenge(factor)
                .execute();
        // TODO: test validations
    }

    /**
     * Create MFA Recovery Codes
     *
     * Generate recovery codes as backup for MFA flow. It&#39;s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMfaRecoveryCodesTest() throws ApiException {
        MfaRecoveryCodes response = api.createMfaRecoveryCodes()
                .execute();
        // TODO: test validations
    }

    /**
     * Create OAuth2 session
     *
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#39;s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOAuth2SessionTest() throws ApiException {
        String provider = null;
        String success = null;
        String failure = null;
        List<String> scopes = null;
        api.createOAuth2Session(provider)
                .success(success)
                .failure(failure)
                .scopes(scopes)
                .execute();
        // TODO: test validations
    }

    /**
     * Create OAuth2 token
     *
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#39;s back to your app when login is completed.   If authentication succeeds, &#x60;userId&#x60; and &#x60;secret&#x60; of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOAuth2TokenTest() throws ApiException {
        String provider = null;
        String success = null;
        String failure = null;
        List<String> scopes = null;
        api.createOAuth2Token(provider)
                .success(success)
                .failure(failure)
                .scopes(scopes)
                .execute();
        // TODO: test validations
    }

    /**
     * Create password recovery
     *
     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user&#39;s email address is valid for 1 hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPasswordRecoveryTest() throws ApiException {
        String email = null;
        String url = null;
        Token response = api.createPasswordRecovery(email, url)
                .execute();
        // TODO: test validations
    }

    /**
     * Create phone token
     *
     * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#39;s phone is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPhoneTokenTest() throws ApiException {
        String userId = null;
        String phone = null;
        Token response = api.createPhoneToken(userId, phone)
                .execute();
        // TODO: test validations
    }

    /**
     * Create phone verification
     *
     * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user&#39;s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user&#39;s phone number is valid for 15 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPhoneVerificationTest() throws ApiException {
        Token response = api.createPhoneVerification()
                .execute();
        // TODO: test validations
    }

    /**
     * Create push target
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPushTargetTest() throws ApiException {
        String targetId = null;
        String identifier = null;
        String providerId = null;
        Target response = api.createPushTarget(targetId, identifier)
                .providerId(providerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create session
     *
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSessionFromTokenTest() throws ApiException {
        String userId = null;
        String secret = null;
        Session response = api.createSessionFromToken(userId, secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Authenticator
     *
     * Delete an authenticator for a user by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthenticatorTest() throws ApiException {
        String otp = null;
        String type = null;
        User response = api.deleteAuthenticator(otp, type)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete identity
     *
     * Delete an identity by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIdentityByIdTest() throws ApiException {
        String identityId = null;
        api.deleteIdentityById(identityId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete push target
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePushTargetTest() throws ApiException {
        String targetId = null;
        Target response = api.deletePushTarget(targetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update session
     *
     * Use this endpoint to extend a session&#39;s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendSessionLengthTest() throws ApiException {
        String sessionId = null;
        Session response = api.extendSessionLength(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get account
     *
     * Get the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        User response = api.getCurrentUser()
                .execute();
        // TODO: test validations
    }

    /**
     * Get MFA Recovery Codes
     *
     * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMfaRecoveryCodesTest() throws ApiException {
        MfaRecoveryCodes response = api.getMfaRecoveryCodes()
                .execute();
        // TODO: test validations
    }

    /**
     * Get account preferences
     *
     * Get the preferences as a key-value object for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrefsTest() throws ApiException {
        Map<String, Object> response = api.getPrefs()
                .execute();
        // TODO: test validations
    }

    /**
     * Get session
     *
     * Use this endpoint to get a logged in user&#39;s session using a Session ID. Inputting &#39;current&#39; will return the current session being used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        String sessionId = null;
        Session response = api.getSession(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Identities
     *
     * Get the list of identities for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentitiesTest() throws ApiException {
        List<String> queries = null;
        IdentityList response = api.listIdentities()
                .queries(queries)
                .execute();
        // TODO: test validations
    }

    /**
     * List logs
     *
     * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLogsTest() throws ApiException {
        List<String> queries = null;
        LogList response = api.listLogs()
                .queries(queries)
                .execute();
        // TODO: test validations
    }

    /**
     * List Factors
     *
     * List the factors available on the account to be used as a MFA challange.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMfaFactorsTest() throws ApiException {
        MfaFactors response = api.listMfaFactors()
                .execute();
        // TODO: test validations
    }

    /**
     * List sessions
     *
     * Get the list of active sessions across different devices for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionsTest() throws ApiException {
        SessionList response = api.listSessions()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete session
     *
     * Logout the user. Use &#39;current&#39; as the session ID to logout on this device, use a session ID to logout on another device. If you&#39;re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logoutSessionByIdTest() throws ApiException {
        String sessionId = null;
        api.logoutSessionById(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Regenerate MFA Recovery Codes
     *
     * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void regenerateMfaRecoveryCodesTest() throws ApiException {
        MfaRecoveryCodes response = api.regenerateMfaRecoveryCodes()
                .execute();
        // TODO: test validations
    }

    /**
     * Create account
     *
     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        String userId = null;
        String email = null;
        String password = null;
        String name = null;
        User response = api.registerUser(userId, email, password)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete sessions
     *
     * Delete all sessions from the user account and remove any sessions cookies from the end client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSessionsTest() throws ApiException {
        api.removeSessions()
                .execute();
        // TODO: test validations
    }

    /**
     * Update magic URL session
     *
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMagicUrlSessionTest() throws ApiException {
        String userId = null;
        String secret = null;
        Session response = api.updateMagicUrlSession(userId, secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Update MFA
     *
     * Enable or disable MFA on an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMfaStatusTest() throws ApiException {
        Boolean mfa = null;
        User response = api.updateMfaStatus(mfa)
                .execute();
        // TODO: test validations
    }

    /**
     * Update name
     *
     * Update currently logged in user account name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNameOperationTest() throws ApiException {
        String name = null;
        User response = api.updateNameOperation(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Update password
     *
     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePasswordTest() throws ApiException {
        String password = null;
        String oldPassword = null;
        User response = api.updatePassword(password)
                .oldPassword(oldPassword)
                .execute();
        // TODO: test validations
    }

    /**
     * Update phone
     *
     * Update the currently logged in user&#39;s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePhoneTest() throws ApiException {
        String phone = null;
        String password = null;
        User response = api.updatePhone(phone, password)
                .execute();
        // TODO: test validations
    }

    /**
     * Update phone session
     *
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePhoneSessionTest() throws ApiException {
        String userId = null;
        String secret = null;
        Session response = api.updatePhoneSession(userId, secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Update preferences
     *
     * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePreferencesTest() throws ApiException {
        Object prefs = null;
        User response = api.updatePreferences(prefs)
                .execute();
        // TODO: test validations
    }

    /**
     * Update push target
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePushTargetTest() throws ApiException {
        String identifier = null;
        String targetId = null;
        Target response = api.updatePushTarget(identifier, targetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update email
     *
     * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserEmailTest() throws ApiException {
        String email = null;
        String password = null;
        User response = api.updateUserEmail(email, password)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify Authenticator
     *
     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#addAuthenticator) method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyAuthenticatorTest() throws ApiException {
        String otp = null;
        String type = null;
        User response = api.verifyAuthenticator(otp, type)
                .execute();
        // TODO: test validations
    }

}
