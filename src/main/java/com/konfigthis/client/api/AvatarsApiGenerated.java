/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AvatarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AvatarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AvatarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateQrCodeImageCall(String text, Integer size, Integer margin, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/qr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (margin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("margin", margin));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateQrCodeImageValidateBeforeCall(String text, Integer size, Integer margin, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling generateQrCodeImage(Async)");
        }

        return generateQrCodeImageCall(text, size, margin, download, _callback);

    }


    private ApiResponse<Void> generateQrCodeImageWithHttpInfo(String text, Integer size, Integer margin, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = generateQrCodeImageValidateBeforeCall(text, size, margin, download, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generateQrCodeImageAsync(String text, Integer size, Integer margin, Boolean download, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateQrCodeImageValidateBeforeCall(text, size, margin, download, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GenerateQrCodeImageRequestBuilder {
        private final String text;
        private Integer size;
        private Integer margin;
        private Boolean download;

        private GenerateQrCodeImageRequestBuilder(String text) {
            this.text = text;
        }

        /**
         * Set size
         * @param size QR code size. Pass an integer between 1 to 1000. Defaults to 400. (optional, default to 400)
         * @return GenerateQrCodeImageRequestBuilder
         */
        public GenerateQrCodeImageRequestBuilder size(Integer size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set margin
         * @param margin Margin from edge. Pass an integer between 0 to 10. Defaults to 1. (optional, default to 1)
         * @return GenerateQrCodeImageRequestBuilder
         */
        public GenerateQrCodeImageRequestBuilder margin(Integer margin) {
            this.margin = margin;
            return this;
        }
        
        /**
         * Set download
         * @param download Return resulting image with &#39;Content-Disposition: attachment &#39; headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0. (optional, default to false)
         * @return GenerateQrCodeImageRequestBuilder
         */
        public GenerateQrCodeImageRequestBuilder download(Boolean download) {
            this.download = download;
            return this;
        }
        
        /**
         * Build call for generateQrCodeImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateQrCodeImageCall(text, size, margin, download, _callback);
        }


        /**
         * Execute generateQrCodeImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            generateQrCodeImageWithHttpInfo(text, size, margin, download);
        }

        /**
         * Execute generateQrCodeImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return generateQrCodeImageWithHttpInfo(text, size, margin, download);
        }

        /**
         * Execute generateQrCodeImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return generateQrCodeImageAsync(text, size, margin, download, _callback);
        }
    }

    /**
     * Get QR code
     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image. 
     * @param text Plain text to be converted to QR code image. (required)
     * @return GenerateQrCodeImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GenerateQrCodeImageRequestBuilder generateQrCodeImage(String text) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        return new GenerateQrCodeImageRequestBuilder(text);
    }
    private okhttp3.Call getBrowserIconByCodeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/browsers/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrowserIconByCodeValidateBeforeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getBrowserIconByCode(Async)");
        }

        return getBrowserIconByCodeCall(code, width, height, quality, _callback);

    }


    private ApiResponse<Void> getBrowserIconByCodeWithHttpInfo(String code, Integer width, Integer height, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = getBrowserIconByCodeValidateBeforeCall(code, width, height, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBrowserIconByCodeAsync(String code, Integer width, Integer height, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrowserIconByCodeValidateBeforeCall(code, width, height, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBrowserIconByCodeRequestBuilder {
        private final String code;
        private Integer width;
        private Integer height;
        private Integer quality;

        private GetBrowserIconByCodeRequestBuilder(String code) {
            this.code = code;
        }

        /**
         * Set width
         * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
         * @return GetBrowserIconByCodeRequestBuilder
         */
        public GetBrowserIconByCodeRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
         * @return GetBrowserIconByCodeRequestBuilder
         */
        public GetBrowserIconByCodeRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set quality
         * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
         * @return GetBrowserIconByCodeRequestBuilder
         */
        public GetBrowserIconByCodeRequestBuilder quality(Integer quality) {
            this.quality = quality;
            return this;
        }
        
        /**
         * Build call for getBrowserIconByCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBrowserIconByCodeCall(code, width, height, quality, _callback);
        }


        /**
         * Execute getBrowserIconByCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBrowserIconByCodeWithHttpInfo(code, width, height, quality);
        }

        /**
         * Execute getBrowserIconByCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBrowserIconByCodeWithHttpInfo(code, width, height, quality);
        }

        /**
         * Execute getBrowserIconByCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBrowserIconByCodeAsync(code, width, height, quality, _callback);
        }
    }

    /**
     * Get browser icon
     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.
     * @param code Browser Code. (required)
     * @return GetBrowserIconByCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetBrowserIconByCodeRequestBuilder getBrowserIconByCode(String code) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new GetBrowserIconByCodeRequestBuilder(code);
    }
    private okhttp3.Call getCountryFlagByCodeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/flags/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryFlagByCodeValidateBeforeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCountryFlagByCode(Async)");
        }

        return getCountryFlagByCodeCall(code, width, height, quality, _callback);

    }


    private ApiResponse<Void> getCountryFlagByCodeWithHttpInfo(String code, Integer width, Integer height, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = getCountryFlagByCodeValidateBeforeCall(code, width, height, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCountryFlagByCodeAsync(String code, Integer width, Integer height, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryFlagByCodeValidateBeforeCall(code, width, height, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCountryFlagByCodeRequestBuilder {
        private final String code;
        private Integer width;
        private Integer height;
        private Integer quality;

        private GetCountryFlagByCodeRequestBuilder(String code) {
            this.code = code;
        }

        /**
         * Set width
         * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
         * @return GetCountryFlagByCodeRequestBuilder
         */
        public GetCountryFlagByCodeRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
         * @return GetCountryFlagByCodeRequestBuilder
         */
        public GetCountryFlagByCodeRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set quality
         * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
         * @return GetCountryFlagByCodeRequestBuilder
         */
        public GetCountryFlagByCodeRequestBuilder quality(Integer quality) {
            this.quality = quality;
            return this;
        }
        
        /**
         * Build call for getCountryFlagByCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCountryFlagByCodeCall(code, width, height, quality, _callback);
        }


        /**
         * Execute getCountryFlagByCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCountryFlagByCodeWithHttpInfo(code, width, height, quality);
        }

        /**
         * Execute getCountryFlagByCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCountryFlagByCodeWithHttpInfo(code, width, height, quality);
        }

        /**
         * Execute getCountryFlagByCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCountryFlagByCodeAsync(code, width, height, quality, _callback);
        }
    }

    /**
     * Get country flag
     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
     * @param code Country Code. ISO Alpha-2 country code format. (required)
     * @return GetCountryFlagByCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryFlagByCodeRequestBuilder getCountryFlagByCode(String code) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new GetCountryFlagByCodeRequestBuilder(code);
    }
    private okhttp3.Call getCreditCardIconCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/credit-cards/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditCardIconValidateBeforeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCreditCardIcon(Async)");
        }

        return getCreditCardIconCall(code, width, height, quality, _callback);

    }


    private ApiResponse<Void> getCreditCardIconWithHttpInfo(String code, Integer width, Integer height, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = getCreditCardIconValidateBeforeCall(code, width, height, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCreditCardIconAsync(String code, Integer width, Integer height, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditCardIconValidateBeforeCall(code, width, height, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCreditCardIconRequestBuilder {
        private final String code;
        private Integer width;
        private Integer height;
        private Integer quality;

        private GetCreditCardIconRequestBuilder(String code) {
            this.code = code;
        }

        /**
         * Set width
         * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
         * @return GetCreditCardIconRequestBuilder
         */
        public GetCreditCardIconRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
         * @return GetCreditCardIconRequestBuilder
         */
        public GetCreditCardIconRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set quality
         * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
         * @return GetCreditCardIconRequestBuilder
         */
        public GetCreditCardIconRequestBuilder quality(Integer quality) {
            this.quality = quality;
            return this;
        }
        
        /**
         * Build call for getCreditCardIcon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCreditCardIconCall(code, width, height, quality, _callback);
        }


        /**
         * Execute getCreditCardIcon request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCreditCardIconWithHttpInfo(code, width, height, quality);
        }

        /**
         * Execute getCreditCardIcon request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCreditCardIconWithHttpInfo(code, width, height, quality);
        }

        /**
         * Execute getCreditCardIcon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCreditCardIconAsync(code, width, height, quality, _callback);
        }
    }

    /**
     * Get credit card icon
     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
     * @param code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro. (required)
     * @return GetCreditCardIconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetCreditCardIconRequestBuilder getCreditCardIcon(String code) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new GetCreditCardIconRequestBuilder(code);
    }
    private okhttp3.Call getFaviconCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/favicon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFaviconValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getFavicon(Async)");
        }

        return getFaviconCall(url, _callback);

    }


    private ApiResponse<Void> getFaviconWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getFaviconValidateBeforeCall(url, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFaviconAsync(String url, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFaviconValidateBeforeCall(url, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFaviconRequestBuilder {
        private final String url;

        private GetFaviconRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Build call for getFavicon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFaviconCall(url, _callback);
        }


        /**
         * Execute getFavicon request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFaviconWithHttpInfo(url);
        }

        /**
         * Execute getFavicon request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFaviconWithHttpInfo(url);
        }

        /**
         * Execute getFavicon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFaviconAsync(url, _callback);
        }
    }

    /**
     * Get favicon
     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
     * @param url Website URL which you want to fetch the favicon from. (required)
     * @return GetFaviconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetFaviconRequestBuilder getFavicon(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new GetFaviconRequestBuilder(url);
    }
    private okhttp3.Call getRemoteImageCall(String url, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemoteImageValidateBeforeCall(String url, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getRemoteImage(Async)");
        }

        return getRemoteImageCall(url, width, height, _callback);

    }


    private ApiResponse<Void> getRemoteImageWithHttpInfo(String url, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = getRemoteImageValidateBeforeCall(url, width, height, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getRemoteImageAsync(String url, Integer width, Integer height, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemoteImageValidateBeforeCall(url, width, height, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetRemoteImageRequestBuilder {
        private final String url;
        private Integer width;
        private Integer height;

        private GetRemoteImageRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Set width
         * @param width Resize preview image width, Pass an integer between 0 to 2000. Defaults to 400. (optional, default to 400)
         * @return GetRemoteImageRequestBuilder
         */
        public GetRemoteImageRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height Resize preview image height, Pass an integer between 0 to 2000. Defaults to 400. (optional, default to 400)
         * @return GetRemoteImageRequestBuilder
         */
        public GetRemoteImageRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Build call for getRemoteImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRemoteImageCall(url, width, height, _callback);
        }


        /**
         * Execute getRemoteImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getRemoteImageWithHttpInfo(url, width, height);
        }

        /**
         * Execute getRemoteImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getRemoteImageWithHttpInfo(url, width, height);
        }

        /**
         * Execute getRemoteImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getRemoteImageAsync(url, width, height, _callback);
        }
    }

    /**
     * Get image from URL
     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px. 
     * @param url Image URL which you want to crop. (required)
     * @return GetRemoteImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetRemoteImageRequestBuilder getRemoteImage(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new GetRemoteImageRequestBuilder(url);
    }
    private okhttp3.Call getUserInitialsCall(String name, Integer width, Integer height, String background, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/initials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (background != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("background", background));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserInitialsValidateBeforeCall(String name, Integer width, Integer height, String background, final ApiCallback _callback) throws ApiException {
        return getUserInitialsCall(name, width, height, background, _callback);

    }


    private ApiResponse<Void> getUserInitialsWithHttpInfo(String name, Integer width, Integer height, String background) throws ApiException {
        okhttp3.Call localVarCall = getUserInitialsValidateBeforeCall(name, width, height, background, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getUserInitialsAsync(String name, Integer width, Integer height, String background, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserInitialsValidateBeforeCall(name, width, height, background, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetUserInitialsRequestBuilder {
        private String name;
        private Integer width;
        private Integer height;
        private String background;

        private GetUserInitialsRequestBuilder() {
        }

        /**
         * Set name
         * @param name Full Name. When empty, current user name or email will be used. Max length: 128 chars. (optional, default to )
         * @return GetUserInitialsRequestBuilder
         */
        public GetUserInitialsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set width
         * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
         * @return GetUserInitialsRequestBuilder
         */
        public GetUserInitialsRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
         * @return GetUserInitialsRequestBuilder
         */
        public GetUserInitialsRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set background
         * @param background Changes background color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
         * @return GetUserInitialsRequestBuilder
         */
        public GetUserInitialsRequestBuilder background(String background) {
            this.background = background;
            return this;
        }
        
        /**
         * Build call for getUserInitials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserInitialsCall(name, width, height, background, _callback);
        }


        /**
         * Execute getUserInitials request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getUserInitialsWithHttpInfo(name, width, height, background);
        }

        /**
         * Execute getUserInitials request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getUserInitialsWithHttpInfo(name, width, height, background);
        }

        /**
         * Execute getUserInitials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getUserInitialsAsync(name, width, height, background, _callback);
        }
    }

    /**
     * Get user initials
     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#39;name&#39; parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#39;s initials when reloading the same theme will always return for the same initials.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
     * @return GetUserInitialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public GetUserInitialsRequestBuilder getUserInitials() throws IllegalArgumentException {
        return new GetUserInitialsRequestBuilder();
    }
}
