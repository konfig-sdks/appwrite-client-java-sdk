/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Session
 */
@ApiModel(description = "Session")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Session {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_$_CREATED_AT = "$createdAt";
  @SerializedName(SERIALIZED_NAME_$_CREATED_AT)
  private String $createdAt;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_EXPIRE = "expire";
  @SerializedName(SERIALIZED_NAME_EXPIRE)
  private String expire;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PROVIDER_UID = "providerUid";
  @SerializedName(SERIALIZED_NAME_PROVIDER_UID)
  private String providerUid;

  public static final String SERIALIZED_NAME_PROVIDER_ACCESS_TOKEN = "providerAccessToken";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCESS_TOKEN)
  private String providerAccessToken;

  public static final String SERIALIZED_NAME_PROVIDER_ACCESS_TOKEN_EXPIRY = "providerAccessTokenExpiry";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCESS_TOKEN_EXPIRY)
  private String providerAccessTokenExpiry;

  public static final String SERIALIZED_NAME_PROVIDER_REFRESH_TOKEN = "providerRefreshToken";
  @SerializedName(SERIALIZED_NAME_PROVIDER_REFRESH_TOKEN)
  private String providerRefreshToken;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_OS_CODE = "osCode";
  @SerializedName(SERIALIZED_NAME_OS_CODE)
  private String osCode;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "clientType";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private String clientType;

  public static final String SERIALIZED_NAME_CLIENT_CODE = "clientCode";
  @SerializedName(SERIALIZED_NAME_CLIENT_CODE)
  private String clientCode;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "clientVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_CLIENT_ENGINE = "clientEngine";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENGINE)
  private String clientEngine;

  public static final String SERIALIZED_NAME_CLIENT_ENGINE_VERSION = "clientEngineVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENGINE_VERSION)
  private String clientEngineVersion;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_BRAND = "deviceBrand";
  @SerializedName(SERIALIZED_NAME_DEVICE_BRAND)
  private String deviceBrand;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "deviceModel";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private String deviceModel;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Boolean current;

  public static final String SERIALIZED_NAME_FACTORS = "factors";
  @SerializedName(SERIALIZED_NAME_FACTORS)
  private List<String> factors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_MFA_UPDATED_AT = "mfaUpdatedAt";
  @SerializedName(SERIALIZED_NAME_MFA_UPDATED_AT)
  private String mfaUpdatedAt;

  public Session() {
  }

  public Session $id(String $id) {
    
    
    
    
    this.$id = $id;
    return this;
  }

   /**
   * Session ID.
   * @return $id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session ID.")

  public String get$Id() {
    return $id;
  }


  public void set$Id(String $id) {
    
    
    
    this.$id = $id;
  }


  public Session $createdAt(String $createdAt) {
    
    
    
    
    this.$createdAt = $createdAt;
    return this;
  }

   /**
   * Session creation date in ISO 8601 format.
   * @return $createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session creation date in ISO 8601 format.")

  public String get$CreatedAt() {
    return $createdAt;
  }


  public void set$CreatedAt(String $createdAt) {
    
    
    
    this.$createdAt = $createdAt;
  }


  public Session userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public Session expire(String expire) {
    
    
    
    
    this.expire = expire;
    return this;
  }

   /**
   * Session expiration date in ISO 8601 format.
   * @return expire
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session expiration date in ISO 8601 format.")

  public String getExpire() {
    return expire;
  }


  public void setExpire(String expire) {
    
    
    
    this.expire = expire;
  }


  public Session provider(String provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * Session Provider.
   * @return provider
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session Provider.")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    
    
    
    this.provider = provider;
  }


  public Session providerUid(String providerUid) {
    
    
    
    
    this.providerUid = providerUid;
    return this;
  }

   /**
   * Session Provider User ID.
   * @return providerUid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session Provider User ID.")

  public String getProviderUid() {
    return providerUid;
  }


  public void setProviderUid(String providerUid) {
    
    
    
    this.providerUid = providerUid;
  }


  public Session providerAccessToken(String providerAccessToken) {
    
    
    
    
    this.providerAccessToken = providerAccessToken;
    return this;
  }

   /**
   * Session Provider Access Token.
   * @return providerAccessToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session Provider Access Token.")

  public String getProviderAccessToken() {
    return providerAccessToken;
  }


  public void setProviderAccessToken(String providerAccessToken) {
    
    
    
    this.providerAccessToken = providerAccessToken;
  }


  public Session providerAccessTokenExpiry(String providerAccessTokenExpiry) {
    
    
    
    
    this.providerAccessTokenExpiry = providerAccessTokenExpiry;
    return this;
  }

   /**
   * The date of when the access token expires in ISO 8601 format.
   * @return providerAccessTokenExpiry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date of when the access token expires in ISO 8601 format.")

  public String getProviderAccessTokenExpiry() {
    return providerAccessTokenExpiry;
  }


  public void setProviderAccessTokenExpiry(String providerAccessTokenExpiry) {
    
    
    
    this.providerAccessTokenExpiry = providerAccessTokenExpiry;
  }


  public Session providerRefreshToken(String providerRefreshToken) {
    
    
    
    
    this.providerRefreshToken = providerRefreshToken;
    return this;
  }

   /**
   * Session Provider Refresh Token.
   * @return providerRefreshToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Session Provider Refresh Token.")

  public String getProviderRefreshToken() {
    return providerRefreshToken;
  }


  public void setProviderRefreshToken(String providerRefreshToken) {
    
    
    
    this.providerRefreshToken = providerRefreshToken;
  }


  public Session ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * IP in use when the session was created.
   * @return ip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IP in use when the session was created.")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public Session osCode(String osCode) {
    
    
    
    
    this.osCode = osCode;
    return this;
  }

   /**
   * Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
   * @return osCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).")

  public String getOsCode() {
    return osCode;
  }


  public void setOsCode(String osCode) {
    
    
    
    this.osCode = osCode;
  }


  public Session osName(String osName) {
    
    
    
    
    this.osName = osName;
    return this;
  }

   /**
   * Operating system name.
   * @return osName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operating system name.")

  public String getOsName() {
    return osName;
  }


  public void setOsName(String osName) {
    
    
    
    this.osName = osName;
  }


  public Session osVersion(String osVersion) {
    
    
    
    
    this.osVersion = osVersion;
    return this;
  }

   /**
   * Operating system version.
   * @return osVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operating system version.")

  public String getOsVersion() {
    return osVersion;
  }


  public void setOsVersion(String osVersion) {
    
    
    
    this.osVersion = osVersion;
  }


  public Session clientType(String clientType) {
    
    
    
    
    this.clientType = clientType;
    return this;
  }

   /**
   * Client type.
   * @return clientType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client type.")

  public String getClientType() {
    return clientType;
  }


  public void setClientType(String clientType) {
    
    
    
    this.clientType = clientType;
  }


  public Session clientCode(String clientCode) {
    
    
    
    
    this.clientCode = clientCode;
    return this;
  }

   /**
   * Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
   * @return clientCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).")

  public String getClientCode() {
    return clientCode;
  }


  public void setClientCode(String clientCode) {
    
    
    
    this.clientCode = clientCode;
  }


  public Session clientName(String clientName) {
    
    
    
    
    this.clientName = clientName;
    return this;
  }

   /**
   * Client name.
   * @return clientName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client name.")

  public String getClientName() {
    return clientName;
  }


  public void setClientName(String clientName) {
    
    
    
    this.clientName = clientName;
  }


  public Session clientVersion(String clientVersion) {
    
    
    
    
    this.clientVersion = clientVersion;
    return this;
  }

   /**
   * Client version.
   * @return clientVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client version.")

  public String getClientVersion() {
    return clientVersion;
  }


  public void setClientVersion(String clientVersion) {
    
    
    
    this.clientVersion = clientVersion;
  }


  public Session clientEngine(String clientEngine) {
    
    
    
    
    this.clientEngine = clientEngine;
    return this;
  }

   /**
   * Client engine name.
   * @return clientEngine
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client engine name.")

  public String getClientEngine() {
    return clientEngine;
  }


  public void setClientEngine(String clientEngine) {
    
    
    
    this.clientEngine = clientEngine;
  }


  public Session clientEngineVersion(String clientEngineVersion) {
    
    
    
    
    this.clientEngineVersion = clientEngineVersion;
    return this;
  }

   /**
   * Client engine name.
   * @return clientEngineVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client engine name.")

  public String getClientEngineVersion() {
    return clientEngineVersion;
  }


  public void setClientEngineVersion(String clientEngineVersion) {
    
    
    
    this.clientEngineVersion = clientEngineVersion;
  }


  public Session deviceName(String deviceName) {
    
    
    
    
    this.deviceName = deviceName;
    return this;
  }

   /**
   * Device name.
   * @return deviceName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device name.")

  public String getDeviceName() {
    return deviceName;
  }


  public void setDeviceName(String deviceName) {
    
    
    
    this.deviceName = deviceName;
  }


  public Session deviceBrand(String deviceBrand) {
    
    
    
    
    this.deviceBrand = deviceBrand;
    return this;
  }

   /**
   * Device brand name.
   * @return deviceBrand
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device brand name.")

  public String getDeviceBrand() {
    return deviceBrand;
  }


  public void setDeviceBrand(String deviceBrand) {
    
    
    
    this.deviceBrand = deviceBrand;
  }


  public Session deviceModel(String deviceModel) {
    
    
    
    
    this.deviceModel = deviceModel;
    return this;
  }

   /**
   * Device model name.
   * @return deviceModel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device model name.")

  public String getDeviceModel() {
    return deviceModel;
  }


  public void setDeviceModel(String deviceModel) {
    
    
    
    this.deviceModel = deviceModel;
  }


  public Session countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country two-character ISO 3166-1 alpha code.
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Country two-character ISO 3166-1 alpha code.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public Session countryName(String countryName) {
    
    
    
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Country name.
   * @return countryName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Country name.")

  public String getCountryName() {
    return countryName;
  }


  public void setCountryName(String countryName) {
    
    
    
    this.countryName = countryName;
  }


  public Session current(Boolean current) {
    
    
    
    
    this.current = current;
    return this;
  }

   /**
   * Returns true if this the current user session.
   * @return current
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Returns true if this the current user session.")

  public Boolean getCurrent() {
    return current;
  }


  public void setCurrent(Boolean current) {
    
    
    
    this.current = current;
  }


  public Session factors(List<String> factors) {
    
    
    
    
    this.factors = factors;
    return this;
  }

  public Session addFactorsItem(String factorsItem) {
    this.factors.add(factorsItem);
    return this;
  }

   /**
   * Returns a list of active session factors.
   * @return factors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Returns a list of active session factors.")

  public List<String> getFactors() {
    return factors;
  }


  public void setFactors(List<String> factors) {
    
    
    
    this.factors = factors;
  }


  public Session secret(String secret) {
    
    
    
    
    this.secret = secret;
    return this;
  }

   /**
   * Secret used to authenticate the user. Only included if the request was made with an API key
   * @return secret
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Secret used to authenticate the user. Only included if the request was made with an API key")

  public String getSecret() {
    return secret;
  }


  public void setSecret(String secret) {
    
    
    
    this.secret = secret;
  }


  public Session mfaUpdatedAt(String mfaUpdatedAt) {
    
    
    
    
    this.mfaUpdatedAt = mfaUpdatedAt;
    return this;
  }

   /**
   * Most recent date in ISO 8601 format when the session successfully passed MFA challenge.
   * @return mfaUpdatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Most recent date in ISO 8601 format when the session successfully passed MFA challenge.")

  public String getMfaUpdatedAt() {
    return mfaUpdatedAt;
  }


  public void setMfaUpdatedAt(String mfaUpdatedAt) {
    
    
    
    this.mfaUpdatedAt = mfaUpdatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Session instance itself
   */
  public Session putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.$id, session.$id) &&
        Objects.equals(this.$createdAt, session.$createdAt) &&
        Objects.equals(this.userId, session.userId) &&
        Objects.equals(this.expire, session.expire) &&
        Objects.equals(this.provider, session.provider) &&
        Objects.equals(this.providerUid, session.providerUid) &&
        Objects.equals(this.providerAccessToken, session.providerAccessToken) &&
        Objects.equals(this.providerAccessTokenExpiry, session.providerAccessTokenExpiry) &&
        Objects.equals(this.providerRefreshToken, session.providerRefreshToken) &&
        Objects.equals(this.ip, session.ip) &&
        Objects.equals(this.osCode, session.osCode) &&
        Objects.equals(this.osName, session.osName) &&
        Objects.equals(this.osVersion, session.osVersion) &&
        Objects.equals(this.clientType, session.clientType) &&
        Objects.equals(this.clientCode, session.clientCode) &&
        Objects.equals(this.clientName, session.clientName) &&
        Objects.equals(this.clientVersion, session.clientVersion) &&
        Objects.equals(this.clientEngine, session.clientEngine) &&
        Objects.equals(this.clientEngineVersion, session.clientEngineVersion) &&
        Objects.equals(this.deviceName, session.deviceName) &&
        Objects.equals(this.deviceBrand, session.deviceBrand) &&
        Objects.equals(this.deviceModel, session.deviceModel) &&
        Objects.equals(this.countryCode, session.countryCode) &&
        Objects.equals(this.countryName, session.countryName) &&
        Objects.equals(this.current, session.current) &&
        Objects.equals(this.factors, session.factors) &&
        Objects.equals(this.secret, session.secret) &&
        Objects.equals(this.mfaUpdatedAt, session.mfaUpdatedAt)&&
        Objects.equals(this.additionalProperties, session.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, $createdAt, userId, expire, provider, providerUid, providerAccessToken, providerAccessTokenExpiry, providerRefreshToken, ip, osCode, osName, osVersion, clientType, clientCode, clientName, clientVersion, clientEngine, clientEngineVersion, deviceName, deviceBrand, deviceModel, countryCode, countryName, current, factors, secret, mfaUpdatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    $createdAt: ").append(toIndentedString($createdAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerUid: ").append(toIndentedString(providerUid)).append("\n");
    sb.append("    providerAccessToken: ").append(toIndentedString(providerAccessToken)).append("\n");
    sb.append("    providerAccessTokenExpiry: ").append(toIndentedString(providerAccessTokenExpiry)).append("\n");
    sb.append("    providerRefreshToken: ").append(toIndentedString(providerRefreshToken)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    osCode: ").append(toIndentedString(osCode)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    clientCode: ").append(toIndentedString(clientCode)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    clientEngine: ").append(toIndentedString(clientEngine)).append("\n");
    sb.append("    clientEngineVersion: ").append(toIndentedString(clientEngineVersion)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceBrand: ").append(toIndentedString(deviceBrand)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    factors: ").append(toIndentedString(factors)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    mfaUpdatedAt: ").append(toIndentedString(mfaUpdatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("$createdAt");
    openapiFields.add("userId");
    openapiFields.add("expire");
    openapiFields.add("provider");
    openapiFields.add("providerUid");
    openapiFields.add("providerAccessToken");
    openapiFields.add("providerAccessTokenExpiry");
    openapiFields.add("providerRefreshToken");
    openapiFields.add("ip");
    openapiFields.add("osCode");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("clientType");
    openapiFields.add("clientCode");
    openapiFields.add("clientName");
    openapiFields.add("clientVersion");
    openapiFields.add("clientEngine");
    openapiFields.add("clientEngineVersion");
    openapiFields.add("deviceName");
    openapiFields.add("deviceBrand");
    openapiFields.add("deviceModel");
    openapiFields.add("countryCode");
    openapiFields.add("countryName");
    openapiFields.add("current");
    openapiFields.add("factors");
    openapiFields.add("secret");
    openapiFields.add("mfaUpdatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("$createdAt");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("expire");
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("providerUid");
    openapiRequiredFields.add("providerAccessToken");
    openapiRequiredFields.add("providerAccessTokenExpiry");
    openapiRequiredFields.add("providerRefreshToken");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("osCode");
    openapiRequiredFields.add("osName");
    openapiRequiredFields.add("osVersion");
    openapiRequiredFields.add("clientType");
    openapiRequiredFields.add("clientCode");
    openapiRequiredFields.add("clientName");
    openapiRequiredFields.add("clientVersion");
    openapiRequiredFields.add("clientEngine");
    openapiRequiredFields.add("clientEngineVersion");
    openapiRequiredFields.add("deviceName");
    openapiRequiredFields.add("deviceBrand");
    openapiRequiredFields.add("deviceModel");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("countryName");
    openapiRequiredFields.add("current");
    openapiRequiredFields.add("factors");
    openapiRequiredFields.add("secret");
    openapiRequiredFields.add("mfaUpdatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Session
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Session.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      if (!jsonObj.get("$createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$createdAt").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("expire").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire").toString()));
      }
      if (!jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if (!jsonObj.get("providerUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerUid").toString()));
      }
      if (!jsonObj.get("providerAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccessToken").toString()));
      }
      if (!jsonObj.get("providerAccessTokenExpiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccessTokenExpiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccessTokenExpiry").toString()));
      }
      if (!jsonObj.get("providerRefreshToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerRefreshToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerRefreshToken").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("osCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osCode").toString()));
      }
      if (!jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if (!jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if (!jsonObj.get("clientType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientType").toString()));
      }
      if (!jsonObj.get("clientCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCode").toString()));
      }
      if (!jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if (!jsonObj.get("clientVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientVersion").toString()));
      }
      if (!jsonObj.get("clientEngine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEngine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEngine").toString()));
      }
      if (!jsonObj.get("clientEngineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEngineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEngineVersion").toString()));
      }
      if (!jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if (!jsonObj.get("deviceBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceBrand").toString()));
      }
      if (!jsonObj.get("deviceModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceModel").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("factors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("factors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `factors` to be an array in the JSON string but got `%s`", jsonObj.get("factors").toString()));
      }
      if (!jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if (!jsonObj.get("mfaUpdatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfaUpdatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfaUpdatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Session instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Session given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Session
  * @throws IOException if the JSON string is invalid with respect to Session
  */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

 /**
  * Convert an instance of Session to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

