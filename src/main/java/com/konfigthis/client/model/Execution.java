/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Headers;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Execution
 */
@ApiModel(description = "Execution")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Execution {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_$_CREATED_AT = "$createdAt";
  @SerializedName(SERIALIZED_NAME_$_CREATED_AT)
  private String $createdAt;

  public static final String SERIALIZED_NAME_$_UPDATED_AT = "$updatedAt";
  @SerializedName(SERIALIZED_NAME_$_UPDATED_AT)
  private String $updatedAt;

  public static final String SERIALIZED_NAME_$_PERMISSIONS = "$permissions";
  @SerializedName(SERIALIZED_NAME_$_PERMISSIONS)
  private List<String> $permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNCTION_ID = "functionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ID)
  private String functionId;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private String trigger;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_REQUEST_METHOD = "requestMethod";
  @SerializedName(SERIALIZED_NAME_REQUEST_METHOD)
  private String requestMethod;

  public static final String SERIALIZED_NAME_REQUEST_PATH = "requestPath";
  @SerializedName(SERIALIZED_NAME_REQUEST_PATH)
  private String requestPath;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "requestHeaders";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private List<Headers> requestHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_STATUS_CODE = "responseStatusCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS_CODE)
  private Integer responseStatusCode;

  public static final String SERIALIZED_NAME_RESPONSE_BODY = "responseBody";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY)
  private String responseBody;

  public static final String SERIALIZED_NAME_RESPONSE_HEADERS = "responseHeaders";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADERS)
  private List<Headers> responseHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private String logs;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private String errors;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public Execution() {
  }

  public Execution $id(String $id) {
    
    
    
    
    this.$id = $id;
    return this;
  }

   /**
   * Execution ID.
   * @return $id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution ID.")

  public String get$Id() {
    return $id;
  }


  public void set$Id(String $id) {
    
    
    
    this.$id = $id;
  }


  public Execution $createdAt(String $createdAt) {
    
    
    
    
    this.$createdAt = $createdAt;
    return this;
  }

   /**
   * Execution creation date in ISO 8601 format.
   * @return $createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution creation date in ISO 8601 format.")

  public String get$CreatedAt() {
    return $createdAt;
  }


  public void set$CreatedAt(String $createdAt) {
    
    
    
    this.$createdAt = $createdAt;
  }


  public Execution $updatedAt(String $updatedAt) {
    
    
    
    
    this.$updatedAt = $updatedAt;
    return this;
  }

   /**
   * Execution upate date in ISO 8601 format.
   * @return $updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution upate date in ISO 8601 format.")

  public String get$UpdatedAt() {
    return $updatedAt;
  }


  public void set$UpdatedAt(String $updatedAt) {
    
    
    
    this.$updatedAt = $updatedAt;
  }


  public Execution $permissions(List<String> $permissions) {
    
    
    
    
    this.$permissions = $permissions;
    return this;
  }

  public Execution add$PermissionsItem(String $permissionsItem) {
    this.$permissions.add($permissionsItem);
    return this;
  }

   /**
   * Execution roles.
   * @return $permissions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution roles.")

  public List<String> get$Permissions() {
    return $permissions;
  }


  public void set$Permissions(List<String> $permissions) {
    
    
    
    this.$permissions = $permissions;
  }


  public Execution functionId(String functionId) {
    
    
    
    
    this.functionId = functionId;
    return this;
  }

   /**
   * Function ID.
   * @return functionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function ID.")

  public String getFunctionId() {
    return functionId;
  }


  public void setFunctionId(String functionId) {
    
    
    
    this.functionId = functionId;
  }


  public Execution trigger(String trigger) {
    
    
    
    
    this.trigger = trigger;
    return this;
  }

   /**
   * The trigger that caused the function to execute. Possible values can be: &#x60;http&#x60;, &#x60;schedule&#x60;, or &#x60;event&#x60;.
   * @return trigger
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The trigger that caused the function to execute. Possible values can be: `http`, `schedule`, or `event`.")

  public String getTrigger() {
    return trigger;
  }


  public void setTrigger(String trigger) {
    
    
    
    this.trigger = trigger;
  }


  public Execution status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the function execution. Possible values can be: &#x60;waiting&#x60;, &#x60;processing&#x60;, &#x60;completed&#x60;, or &#x60;failed&#x60;.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the function execution. Possible values can be: `waiting`, `processing`, `completed`, or `failed`.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public Execution requestMethod(String requestMethod) {
    
    
    
    
    this.requestMethod = requestMethod;
    return this;
  }

   /**
   * HTTP request method type.
   * @return requestMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP request method type.")

  public String getRequestMethod() {
    return requestMethod;
  }


  public void setRequestMethod(String requestMethod) {
    
    
    
    this.requestMethod = requestMethod;
  }


  public Execution requestPath(String requestPath) {
    
    
    
    
    this.requestPath = requestPath;
    return this;
  }

   /**
   * HTTP request path and query.
   * @return requestPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP request path and query.")

  public String getRequestPath() {
    return requestPath;
  }


  public void setRequestPath(String requestPath) {
    
    
    
    this.requestPath = requestPath;
  }


  public Execution requestHeaders(List<Headers> requestHeaders) {
    
    
    
    
    this.requestHeaders = requestHeaders;
    return this;
  }

  public Execution addRequestHeadersItem(Headers requestHeadersItem) {
    this.requestHeaders.add(requestHeadersItem);
    return this;
  }

   /**
   * HTTP response headers as a key-value object. This will return only whitelisted headers. All headers are returned if execution is created as synchronous.
   * @return requestHeaders
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP response headers as a key-value object. This will return only whitelisted headers. All headers are returned if execution is created as synchronous.")

  public List<Headers> getRequestHeaders() {
    return requestHeaders;
  }


  public void setRequestHeaders(List<Headers> requestHeaders) {
    
    
    
    this.requestHeaders = requestHeaders;
  }


  public Execution responseStatusCode(Integer responseStatusCode) {
    
    
    
    
    this.responseStatusCode = responseStatusCode;
    return this;
  }

   /**
   * HTTP response status code.
   * @return responseStatusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP response status code.")

  public Integer getResponseStatusCode() {
    return responseStatusCode;
  }


  public void setResponseStatusCode(Integer responseStatusCode) {
    
    
    
    this.responseStatusCode = responseStatusCode;
  }


  public Execution responseBody(String responseBody) {
    
    
    
    
    this.responseBody = responseBody;
    return this;
  }

   /**
   * HTTP response body. This will return empty unless execution is created as synchronous.
   * @return responseBody
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP response body. This will return empty unless execution is created as synchronous.")

  public String getResponseBody() {
    return responseBody;
  }


  public void setResponseBody(String responseBody) {
    
    
    
    this.responseBody = responseBody;
  }


  public Execution responseHeaders(List<Headers> responseHeaders) {
    
    
    
    
    this.responseHeaders = responseHeaders;
    return this;
  }

  public Execution addResponseHeadersItem(Headers responseHeadersItem) {
    this.responseHeaders.add(responseHeadersItem);
    return this;
  }

   /**
   * HTTP response headers as a key-value object. This will return only whitelisted headers. All headers are returned if execution is created as synchronous.
   * @return responseHeaders
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP response headers as a key-value object. This will return only whitelisted headers. All headers are returned if execution is created as synchronous.")

  public List<Headers> getResponseHeaders() {
    return responseHeaders;
  }


  public void setResponseHeaders(List<Headers> responseHeaders) {
    
    
    
    this.responseHeaders = responseHeaders;
  }


  public Execution logs(String logs) {
    
    
    
    
    this.logs = logs;
    return this;
  }

   /**
   * Function logs. Includes the last 4,000 characters. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.
   * @return logs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function logs. Includes the last 4,000 characters. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.")

  public String getLogs() {
    return logs;
  }


  public void setLogs(String logs) {
    
    
    
    this.logs = logs;
  }


  public Execution errors(String errors) {
    
    
    
    
    this.errors = errors;
    return this;
  }

   /**
   * Function errors. Includes the last 4,000 characters. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.
   * @return errors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function errors. Includes the last 4,000 characters. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.")

  public String getErrors() {
    return errors;
  }


  public void setErrors(String errors) {
    
    
    
    this.errors = errors;
  }


  public Execution duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Function execution duration in seconds.
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function execution duration in seconds.")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Execution instance itself
   */
  public Execution putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Execution execution = (Execution) o;
    return Objects.equals(this.$id, execution.$id) &&
        Objects.equals(this.$createdAt, execution.$createdAt) &&
        Objects.equals(this.$updatedAt, execution.$updatedAt) &&
        Objects.equals(this.$permissions, execution.$permissions) &&
        Objects.equals(this.functionId, execution.functionId) &&
        Objects.equals(this.trigger, execution.trigger) &&
        Objects.equals(this.status, execution.status) &&
        Objects.equals(this.requestMethod, execution.requestMethod) &&
        Objects.equals(this.requestPath, execution.requestPath) &&
        Objects.equals(this.requestHeaders, execution.requestHeaders) &&
        Objects.equals(this.responseStatusCode, execution.responseStatusCode) &&
        Objects.equals(this.responseBody, execution.responseBody) &&
        Objects.equals(this.responseHeaders, execution.responseHeaders) &&
        Objects.equals(this.logs, execution.logs) &&
        Objects.equals(this.errors, execution.errors) &&
        Objects.equals(this.duration, execution.duration)&&
        Objects.equals(this.additionalProperties, execution.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, $createdAt, $updatedAt, $permissions, functionId, trigger, status, requestMethod, requestPath, requestHeaders, responseStatusCode, responseBody, responseHeaders, logs, errors, duration, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Execution {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    $createdAt: ").append(toIndentedString($createdAt)).append("\n");
    sb.append("    $updatedAt: ").append(toIndentedString($updatedAt)).append("\n");
    sb.append("    $permissions: ").append(toIndentedString($permissions)).append("\n");
    sb.append("    functionId: ").append(toIndentedString(functionId)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    requestMethod: ").append(toIndentedString(requestMethod)).append("\n");
    sb.append("    requestPath: ").append(toIndentedString(requestPath)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    responseStatusCode: ").append(toIndentedString(responseStatusCode)).append("\n");
    sb.append("    responseBody: ").append(toIndentedString(responseBody)).append("\n");
    sb.append("    responseHeaders: ").append(toIndentedString(responseHeaders)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("$createdAt");
    openapiFields.add("$updatedAt");
    openapiFields.add("$permissions");
    openapiFields.add("functionId");
    openapiFields.add("trigger");
    openapiFields.add("status");
    openapiFields.add("requestMethod");
    openapiFields.add("requestPath");
    openapiFields.add("requestHeaders");
    openapiFields.add("responseStatusCode");
    openapiFields.add("responseBody");
    openapiFields.add("responseHeaders");
    openapiFields.add("logs");
    openapiFields.add("errors");
    openapiFields.add("duration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("$createdAt");
    openapiRequiredFields.add("$updatedAt");
    openapiRequiredFields.add("$permissions");
    openapiRequiredFields.add("functionId");
    openapiRequiredFields.add("trigger");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("requestMethod");
    openapiRequiredFields.add("requestPath");
    openapiRequiredFields.add("requestHeaders");
    openapiRequiredFields.add("responseStatusCode");
    openapiRequiredFields.add("responseBody");
    openapiRequiredFields.add("responseHeaders");
    openapiRequiredFields.add("logs");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("duration");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Execution
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Execution.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Execution is not found in the empty JSON string", Execution.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Execution.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      if (!jsonObj.get("$createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$createdAt").toString()));
      }
      if (!jsonObj.get("$updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$updatedAt").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("$permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("$permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `$permissions` to be an array in the JSON string but got `%s`", jsonObj.get("$permissions").toString()));
      }
      if (!jsonObj.get("functionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionId").toString()));
      }
      if (!jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("requestMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestMethod").toString()));
      }
      if (!jsonObj.get("requestPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestPath").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("requestHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("requestHeaders").toString()));
      }

      JsonArray jsonArrayrequestHeaders = jsonObj.getAsJsonArray("requestHeaders");
      // validate the required field `requestHeaders` (array)
      for (int i = 0; i < jsonArrayrequestHeaders.size(); i++) {
        Headers.validateJsonObject(jsonArrayrequestHeaders.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("responseBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBody").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("responseHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeaders").toString()));
      }

      JsonArray jsonArrayresponseHeaders = jsonObj.getAsJsonArray("responseHeaders");
      // validate the required field `responseHeaders` (array)
      for (int i = 0; i < jsonArrayresponseHeaders.size(); i++) {
        Headers.validateJsonObject(jsonArrayresponseHeaders.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("logs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }
      if (!jsonObj.get("errors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Execution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Execution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Execution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Execution.class));

       return (TypeAdapter<T>) new TypeAdapter<Execution>() {
           @Override
           public void write(JsonWriter out, Execution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Execution read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Execution instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Execution given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Execution
  * @throws IOException if the JSON string is invalid with respect to Execution
  */
  public static Execution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Execution.class);
  }

 /**
  * Convert an instance of Execution to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

