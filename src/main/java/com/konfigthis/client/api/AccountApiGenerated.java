/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountCompleteMfaChallengeRequest;
import com.konfigthis.client.model.AccountCompletePasswordRecoveryRequest;
import com.konfigthis.client.model.AccountConfirmPhoneVerificationRequest;
import com.konfigthis.client.model.AccountCreateEmailPasswordSessionRequest;
import com.konfigthis.client.model.AccountCreateEmailTokenRequest;
import com.konfigthis.client.model.AccountCreateEmailVerificationRequest;
import com.konfigthis.client.model.AccountCreateEmailVerificationRequest1;
import com.konfigthis.client.model.AccountCreateMagicUrlTokenRequest;
import com.konfigthis.client.model.AccountCreateMfaChallengeRequest;
import com.konfigthis.client.model.AccountCreatePasswordRecoveryRequest;
import com.konfigthis.client.model.AccountCreatePhoneTokenRequest;
import com.konfigthis.client.model.AccountCreatePushTargetRequest;
import com.konfigthis.client.model.AccountCreateSessionFromTokenRequest;
import com.konfigthis.client.model.AccountDeleteAuthenticatorRequest;
import com.konfigthis.client.model.AccountRegisterUserRequest;
import com.konfigthis.client.model.AccountUpdateMagicUrlSessionRequest;
import com.konfigthis.client.model.AccountUpdateMfaStatusRequest;
import com.konfigthis.client.model.AccountUpdateNameOperationRequest;
import com.konfigthis.client.model.AccountUpdatePasswordRequest;
import com.konfigthis.client.model.AccountUpdatePhoneRequest;
import com.konfigthis.client.model.AccountUpdatePhoneSessionRequest;
import com.konfigthis.client.model.AccountUpdatePreferencesRequest;
import com.konfigthis.client.model.AccountUpdatePushTargetRequest;
import com.konfigthis.client.model.AccountUpdateUserEmailRequest;
import com.konfigthis.client.model.AccountVerifyAuthenticatorRequest;
import com.konfigthis.client.model.IdentityList;
import com.konfigthis.client.model.Jwt;
import com.konfigthis.client.model.LogList;
import com.konfigthis.client.model.MfaChallenge;
import com.konfigthis.client.model.MfaFactors;
import com.konfigthis.client.model.MfaRecoveryCodes;
import com.konfigthis.client.model.MfaType;
import com.konfigthis.client.model.Session;
import com.konfigthis.client.model.SessionList;
import com.konfigthis.client.model.Target;
import com.konfigthis.client.model.Token;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAuthenticatorCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/mfa/authenticators/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAuthenticatorValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addAuthenticator(Async)");
        }

        return addAuthenticatorCall(type, _callback);

    }


    private ApiResponse<MfaType> addAuthenticatorWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = addAuthenticatorValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<MfaType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAuthenticatorAsync(String type, final ApiCallback<MfaType> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAuthenticatorValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<MfaType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAuthenticatorRequestBuilder {
        private final String type;

        private AddAuthenticatorRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Build call for addAuthenticator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAType </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addAuthenticatorCall(type, _callback);
        }


        /**
         * Execute addAuthenticator request
         * @return MfaType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAType </td><td>  -  </td></tr>
         </table>
         */
        public MfaType execute() throws ApiException {
            ApiResponse<MfaType> localVarResp = addAuthenticatorWithHttpInfo(type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAuthenticator request with HTTP info returned
         * @return ApiResponse&lt;MfaType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAType </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MfaType> executeWithHttpInfo() throws ApiException {
            return addAuthenticatorWithHttpInfo(type);
        }

        /**
         * Execute addAuthenticator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAType </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MfaType> _callback) throws ApiException {
            return addAuthenticatorAsync(type, _callback);
        }
    }

    /**
     * Add Authenticator
     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator) method.
     * @param type Type of authenticator. Must be &#x60;totp&#x60; (required)
     * @return AddAuthenticatorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MFAType </td><td>  -  </td></tr>
     </table>
     */
    public AddAuthenticatorRequestBuilder addAuthenticator(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new AddAuthenticatorRequestBuilder(type);
    }
    private okhttp3.Call blockUserStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockUserStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return blockUserStatusCall(_callback);

    }


    private ApiResponse<User> blockUserStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = blockUserStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call blockUserStatusAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockUserStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BlockUserStatusRequestBuilder {

        private BlockUserStatusRequestBuilder() {
        }

        /**
         * Build call for blockUserStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return blockUserStatusCall(_callback);
        }


        /**
         * Execute blockUserStatus request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = blockUserStatusWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute blockUserStatus request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return blockUserStatusWithHttpInfo();
        }

        /**
         * Execute blockUserStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return blockUserStatusAsync(_callback);
        }
    }

    /**
     * Update status
     * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.
     * @return BlockUserStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public BlockUserStatusRequestBuilder blockUserStatus() throws IllegalArgumentException {
        return new BlockUserStatusRequestBuilder();
    }
    private okhttp3.Call completeMfaChallengeCall(AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCompleteMfaChallengeRequest;

        // create path and map variables
        String localVarPath = "/account/mfa/challenge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            ""
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeMfaChallengeValidateBeforeCall(AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest, final ApiCallback _callback) throws ApiException {
        return completeMfaChallengeCall(accountCompleteMfaChallengeRequest, _callback);

    }


    private ApiResponse<Session> completeMfaChallengeWithHttpInfo(AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest) throws ApiException {
        okhttp3.Call localVarCall = completeMfaChallengeValidateBeforeCall(accountCompleteMfaChallengeRequest, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeMfaChallengeAsync(AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeMfaChallengeValidateBeforeCall(accountCompleteMfaChallengeRequest, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteMfaChallengeRequestBuilder {
        private final String challengeId;
        private final String otp;

        private CompleteMfaChallengeRequestBuilder(String challengeId, String otp) {
            this.challengeId = challengeId;
            this.otp = otp;
        }

        /**
         * Build call for completeMfaChallenge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest = buildBodyParams();
            return completeMfaChallengeCall(accountCompleteMfaChallengeRequest, _callback);
        }

        private AccountCompleteMfaChallengeRequest buildBodyParams() {
            AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest = new AccountCompleteMfaChallengeRequest();
            accountCompleteMfaChallengeRequest.challengeId(this.challengeId);
            accountCompleteMfaChallengeRequest.otp(this.otp);
            return accountCompleteMfaChallengeRequest;
        }

        /**
         * Execute completeMfaChallenge request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest = buildBodyParams();
            ApiResponse<Session> localVarResp = completeMfaChallengeWithHttpInfo(accountCompleteMfaChallengeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeMfaChallenge request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest = buildBodyParams();
            return completeMfaChallengeWithHttpInfo(accountCompleteMfaChallengeRequest);
        }

        /**
         * Execute completeMfaChallenge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            AccountCompleteMfaChallengeRequest accountCompleteMfaChallengeRequest = buildBodyParams();
            return completeMfaChallengeAsync(accountCompleteMfaChallengeRequest, _callback);
        }
    }

    /**
     * Create MFA Challenge (confirmation)
     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
     * @return CompleteMfaChallengeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CompleteMfaChallengeRequestBuilder completeMfaChallenge(String challengeId, String otp) throws IllegalArgumentException {
        if (challengeId == null) throw new IllegalArgumentException("\"challengeId\" is required but got null");
            

        if (otp == null) throw new IllegalArgumentException("\"otp\" is required but got null");
            

        return new CompleteMfaChallengeRequestBuilder(challengeId, otp);
    }
    private okhttp3.Call completePasswordRecoveryCall(AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCompletePasswordRecoveryRequest;

        // create path and map variables
        String localVarPath = "/account/recovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completePasswordRecoveryValidateBeforeCall(AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest, final ApiCallback _callback) throws ApiException {
        return completePasswordRecoveryCall(accountCompletePasswordRecoveryRequest, _callback);

    }


    private ApiResponse<Token> completePasswordRecoveryWithHttpInfo(AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest) throws ApiException {
        okhttp3.Call localVarCall = completePasswordRecoveryValidateBeforeCall(accountCompletePasswordRecoveryRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completePasswordRecoveryAsync(AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = completePasswordRecoveryValidateBeforeCall(accountCompletePasswordRecoveryRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompletePasswordRecoveryRequestBuilder {
        private final String userId;
        private final String secret;
        private final String password;

        private CompletePasswordRecoveryRequestBuilder(String userId, String secret, String password) {
            this.userId = userId;
            this.secret = secret;
            this.password = password;
        }

        /**
         * Build call for completePasswordRecovery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest = buildBodyParams();
            return completePasswordRecoveryCall(accountCompletePasswordRecoveryRequest, _callback);
        }

        private AccountCompletePasswordRecoveryRequest buildBodyParams() {
            AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest = new AccountCompletePasswordRecoveryRequest();
            accountCompletePasswordRecoveryRequest.userId(this.userId);
            accountCompletePasswordRecoveryRequest.secret(this.secret);
            accountCompletePasswordRecoveryRequest.password(this.password);
            return accountCompletePasswordRecoveryRequest;
        }

        /**
         * Execute completePasswordRecovery request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = completePasswordRecoveryWithHttpInfo(accountCompletePasswordRecoveryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completePasswordRecovery request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest = buildBodyParams();
            return completePasswordRecoveryWithHttpInfo(accountCompletePasswordRecoveryRequest);
        }

        /**
         * Execute completePasswordRecovery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCompletePasswordRecoveryRequest accountCompletePasswordRecoveryRequest = buildBodyParams();
            return completePasswordRecoveryAsync(accountCompletePasswordRecoveryRequest, _callback);
        }
    }

    /**
     * Create password recovery (confirmation)
     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
     * @return CompletePasswordRecoveryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CompletePasswordRecoveryRequestBuilder completePasswordRecovery(String userId, String secret, String password) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new CompletePasswordRecoveryRequestBuilder(userId, secret, password);
    }
    private okhttp3.Call confirmPhoneVerificationCall(AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountConfirmPhoneVerificationRequest;

        // create path and map variables
        String localVarPath = "/account/verification/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPhoneVerificationValidateBeforeCall(AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest, final ApiCallback _callback) throws ApiException {
        return confirmPhoneVerificationCall(accountConfirmPhoneVerificationRequest, _callback);

    }


    private ApiResponse<Token> confirmPhoneVerificationWithHttpInfo(AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = confirmPhoneVerificationValidateBeforeCall(accountConfirmPhoneVerificationRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call confirmPhoneVerificationAsync(AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPhoneVerificationValidateBeforeCall(accountConfirmPhoneVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConfirmPhoneVerificationRequestBuilder {
        private final String userId;
        private final String secret;

        private ConfirmPhoneVerificationRequestBuilder(String userId, String secret) {
            this.userId = userId;
            this.secret = secret;
        }

        /**
         * Build call for confirmPhoneVerification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest = buildBodyParams();
            return confirmPhoneVerificationCall(accountConfirmPhoneVerificationRequest, _callback);
        }

        private AccountConfirmPhoneVerificationRequest buildBodyParams() {
            AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest = new AccountConfirmPhoneVerificationRequest();
            accountConfirmPhoneVerificationRequest.userId(this.userId);
            accountConfirmPhoneVerificationRequest.secret(this.secret);
            return accountConfirmPhoneVerificationRequest;
        }

        /**
         * Execute confirmPhoneVerification request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = confirmPhoneVerificationWithHttpInfo(accountConfirmPhoneVerificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute confirmPhoneVerification request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest = buildBodyParams();
            return confirmPhoneVerificationWithHttpInfo(accountConfirmPhoneVerificationRequest);
        }

        /**
         * Execute confirmPhoneVerification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountConfirmPhoneVerificationRequest accountConfirmPhoneVerificationRequest = buildBodyParams();
            return confirmPhoneVerificationAsync(accountConfirmPhoneVerificationRequest, _callback);
        }
    }

    /**
     * Create phone verification (confirmation)
     * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user&#39;s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.
     * @return ConfirmPhoneVerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmPhoneVerificationRequestBuilder confirmPhoneVerification(String userId, String secret) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        return new ConfirmPhoneVerificationRequestBuilder(userId, secret);
    }
    private okhttp3.Call createAnonymousSessionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions/anonymous";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnonymousSessionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createAnonymousSessionCall(_callback);

    }


    private ApiResponse<Session> createAnonymousSessionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createAnonymousSessionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAnonymousSessionAsync(final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnonymousSessionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAnonymousSessionRequestBuilder {

        private CreateAnonymousSessionRequestBuilder() {
        }

        /**
         * Build call for createAnonymousSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAnonymousSessionCall(_callback);
        }


        /**
         * Execute createAnonymousSession request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            ApiResponse<Session> localVarResp = createAnonymousSessionWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAnonymousSession request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            return createAnonymousSessionWithHttpInfo();
        }

        /**
         * Execute createAnonymousSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            return createAnonymousSessionAsync(_callback);
        }
    }

    /**
     * Create anonymous session
     * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
     * @return CreateAnonymousSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public CreateAnonymousSessionRequestBuilder createAnonymousSession() throws IllegalArgumentException {
        return new CreateAnonymousSessionRequestBuilder();
    }
    private okhttp3.Call createEmailPasswordSessionCall(AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateEmailPasswordSessionRequest;

        // create path and map variables
        String localVarPath = "/account/sessions/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailPasswordSessionValidateBeforeCall(AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest, final ApiCallback _callback) throws ApiException {
        return createEmailPasswordSessionCall(accountCreateEmailPasswordSessionRequest, _callback);

    }


    private ApiResponse<Session> createEmailPasswordSessionWithHttpInfo(AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmailPasswordSessionValidateBeforeCall(accountCreateEmailPasswordSessionRequest, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailPasswordSessionAsync(AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailPasswordSessionValidateBeforeCall(accountCreateEmailPasswordSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailPasswordSessionRequestBuilder {
        private final String email;
        private final String password;

        private CreateEmailPasswordSessionRequestBuilder(String email, String password) {
            this.email = email;
            this.password = password;
        }

        /**
         * Build call for createEmailPasswordSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest = buildBodyParams();
            return createEmailPasswordSessionCall(accountCreateEmailPasswordSessionRequest, _callback);
        }

        private AccountCreateEmailPasswordSessionRequest buildBodyParams() {
            AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest = new AccountCreateEmailPasswordSessionRequest();
            accountCreateEmailPasswordSessionRequest.email(this.email);
            accountCreateEmailPasswordSessionRequest.password(this.password);
            return accountCreateEmailPasswordSessionRequest;
        }

        /**
         * Execute createEmailPasswordSession request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest = buildBodyParams();
            ApiResponse<Session> localVarResp = createEmailPasswordSessionWithHttpInfo(accountCreateEmailPasswordSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmailPasswordSession request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest = buildBodyParams();
            return createEmailPasswordSessionWithHttpInfo(accountCreateEmailPasswordSessionRequest);
        }

        /**
         * Execute createEmailPasswordSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            AccountCreateEmailPasswordSessionRequest accountCreateEmailPasswordSessionRequest = buildBodyParams();
            return createEmailPasswordSessionAsync(accountCreateEmailPasswordSessionRequest, _callback);
        }
    }

    /**
     * Create email password session
     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @return CreateEmailPasswordSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailPasswordSessionRequestBuilder createEmailPasswordSession(String email, String password) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new CreateEmailPasswordSessionRequestBuilder(email, password);
    }
    private okhttp3.Call createEmailTokenCall(AccountCreateEmailTokenRequest accountCreateEmailTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateEmailTokenRequest;

        // create path and map variables
        String localVarPath = "/account/tokens/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailTokenValidateBeforeCall(AccountCreateEmailTokenRequest accountCreateEmailTokenRequest, final ApiCallback _callback) throws ApiException {
        return createEmailTokenCall(accountCreateEmailTokenRequest, _callback);

    }


    private ApiResponse<Token> createEmailTokenWithHttpInfo(AccountCreateEmailTokenRequest accountCreateEmailTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmailTokenValidateBeforeCall(accountCreateEmailTokenRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailTokenAsync(AccountCreateEmailTokenRequest accountCreateEmailTokenRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailTokenValidateBeforeCall(accountCreateEmailTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailTokenRequestBuilder {
        private final String userId;
        private final String email;
        private Boolean phrase;

        private CreateEmailTokenRequestBuilder(String userId, String email) {
            this.userId = userId;
            this.email = email;
        }

        /**
         * Set phrase
         * @param phrase Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow. (optional)
         * @return CreateEmailTokenRequestBuilder
         */
        public CreateEmailTokenRequestBuilder phrase(Boolean phrase) {
            this.phrase = phrase;
            return this;
        }
        
        /**
         * Build call for createEmailToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateEmailTokenRequest accountCreateEmailTokenRequest = buildBodyParams();
            return createEmailTokenCall(accountCreateEmailTokenRequest, _callback);
        }

        private AccountCreateEmailTokenRequest buildBodyParams() {
            AccountCreateEmailTokenRequest accountCreateEmailTokenRequest = new AccountCreateEmailTokenRequest();
            accountCreateEmailTokenRequest.userId(this.userId);
            accountCreateEmailTokenRequest.email(this.email);
            accountCreateEmailTokenRequest.phrase(this.phrase);
            return accountCreateEmailTokenRequest;
        }

        /**
         * Execute createEmailToken request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCreateEmailTokenRequest accountCreateEmailTokenRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = createEmailTokenWithHttpInfo(accountCreateEmailTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmailToken request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCreateEmailTokenRequest accountCreateEmailTokenRequest = buildBodyParams();
            return createEmailTokenWithHttpInfo(accountCreateEmailTokenRequest);
        }

        /**
         * Execute createEmailToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCreateEmailTokenRequest accountCreateEmailTokenRequest = buildBodyParams();
            return createEmailTokenAsync(accountCreateEmailTokenRequest, _callback);
        }
    }

    /**
     * Create email token (OTP)
     * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#39;s email is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @return CreateEmailTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailTokenRequestBuilder createEmailToken(String userId, String email) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new CreateEmailTokenRequestBuilder(userId, email);
    }
    private okhttp3.Call createEmailVerificationCall(AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateEmailVerificationRequest1;

        // create path and map variables
        String localVarPath = "/account/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailVerificationValidateBeforeCall(AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1, final ApiCallback _callback) throws ApiException {
        return createEmailVerificationCall(accountCreateEmailVerificationRequest1, _callback);

    }


    private ApiResponse<Token> createEmailVerificationWithHttpInfo(AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1) throws ApiException {
        okhttp3.Call localVarCall = createEmailVerificationValidateBeforeCall(accountCreateEmailVerificationRequest1, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailVerificationAsync(AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailVerificationValidateBeforeCall(accountCreateEmailVerificationRequest1, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailVerificationRequestBuilder {
        private final String userId;
        private final String secret;

        private CreateEmailVerificationRequestBuilder(String userId, String secret) {
            this.userId = userId;
            this.secret = secret;
        }

        /**
         * Build call for createEmailVerification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1 = buildBodyParams();
            return createEmailVerificationCall(accountCreateEmailVerificationRequest1, _callback);
        }

        private AccountCreateEmailVerificationRequest1 buildBodyParams() {
            AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1 = new AccountCreateEmailVerificationRequest1();
            accountCreateEmailVerificationRequest1.userId(this.userId);
            accountCreateEmailVerificationRequest1.secret(this.secret);
            return accountCreateEmailVerificationRequest1;
        }

        /**
         * Execute createEmailVerification request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1 = buildBodyParams();
            ApiResponse<Token> localVarResp = createEmailVerificationWithHttpInfo(accountCreateEmailVerificationRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmailVerification request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1 = buildBodyParams();
            return createEmailVerificationWithHttpInfo(accountCreateEmailVerificationRequest1);
        }

        /**
         * Execute createEmailVerification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCreateEmailVerificationRequest1 accountCreateEmailVerificationRequest1 = buildBodyParams();
            return createEmailVerificationAsync(accountCreateEmailVerificationRequest1, _callback);
        }
    }

    /**
     * Create email verification (confirmation)
     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
     * @return CreateEmailVerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailVerificationRequestBuilder createEmailVerification(String userId, String secret) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        return new CreateEmailVerificationRequestBuilder(userId, secret);
    }
    private okhttp3.Call createEmailVerification_0Call(AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateEmailVerificationRequest;

        // create path and map variables
        String localVarPath = "/account/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailVerification_0ValidateBeforeCall(AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest, final ApiCallback _callback) throws ApiException {
        return createEmailVerification_0Call(accountCreateEmailVerificationRequest, _callback);

    }


    private ApiResponse<Token> createEmailVerification_0WithHttpInfo(AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmailVerification_0ValidateBeforeCall(accountCreateEmailVerificationRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailVerification_0Async(AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailVerification_0ValidateBeforeCall(accountCreateEmailVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailVerification0RequestBuilder {
        private final String url;

        private CreateEmailVerification0RequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Build call for createEmailVerification_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest = buildBodyParams();
            return createEmailVerification_0Call(accountCreateEmailVerificationRequest, _callback);
        }

        private AccountCreateEmailVerificationRequest buildBodyParams() {
            AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest = new AccountCreateEmailVerificationRequest();
            accountCreateEmailVerificationRequest.url(this.url);
            return accountCreateEmailVerificationRequest;
        }

        /**
         * Execute createEmailVerification_0 request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = createEmailVerification_0WithHttpInfo(accountCreateEmailVerificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmailVerification_0 request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest = buildBodyParams();
            return createEmailVerification_0WithHttpInfo(accountCreateEmailVerificationRequest);
        }

        /**
         * Execute createEmailVerification_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCreateEmailVerificationRequest accountCreateEmailVerificationRequest = buildBodyParams();
            return createEmailVerification_0Async(accountCreateEmailVerificationRequest, _callback);
        }
    }

    /**
     * Create email verification
     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user&#39;s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
     * @return CreateEmailVerification0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailVerification0RequestBuilder createEmailVerification_0(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new CreateEmailVerification0RequestBuilder(url);
    }
    private okhttp3.Call createJwtCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/jwt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJwtValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createJwtCall(_callback);

    }


    private ApiResponse<Jwt> createJwtWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createJwtValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Jwt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createJwtAsync(final ApiCallback<Jwt> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJwtValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Jwt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateJwtRequestBuilder {

        private CreateJwtRequestBuilder() {
        }

        /**
         * Build call for createJwt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> JWT </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createJwtCall(_callback);
        }


        /**
         * Execute createJwt request
         * @return Jwt
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> JWT </td><td>  -  </td></tr>
         </table>
         */
        public Jwt execute() throws ApiException {
            ApiResponse<Jwt> localVarResp = createJwtWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createJwt request with HTTP info returned
         * @return ApiResponse&lt;Jwt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> JWT </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Jwt> executeWithHttpInfo() throws ApiException {
            return createJwtWithHttpInfo();
        }

        /**
         * Execute createJwt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> JWT </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Jwt> _callback) throws ApiException {
            return createJwtAsync(_callback);
        }
    }

    /**
     * Create JWT
     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
     * @return CreateJwtRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> JWT </td><td>  -  </td></tr>
     </table>
     */
    public CreateJwtRequestBuilder createJwt() throws IllegalArgumentException {
        return new CreateJwtRequestBuilder();
    }
    private okhttp3.Call createMagicUrlTokenCall(AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateMagicUrlTokenRequest;

        // create path and map variables
        String localVarPath = "/account/tokens/magic-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMagicUrlTokenValidateBeforeCall(AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest, final ApiCallback _callback) throws ApiException {
        return createMagicUrlTokenCall(accountCreateMagicUrlTokenRequest, _callback);

    }


    private ApiResponse<Token> createMagicUrlTokenWithHttpInfo(AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createMagicUrlTokenValidateBeforeCall(accountCreateMagicUrlTokenRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMagicUrlTokenAsync(AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMagicUrlTokenValidateBeforeCall(accountCreateMagicUrlTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMagicUrlTokenRequestBuilder {
        private final String userId;
        private final String email;
        private String url;
        private Boolean phrase;

        private CreateMagicUrlTokenRequestBuilder(String userId, String email) {
            this.userId = userId;
            this.email = email;
        }

        /**
         * Set url
         * @param url URL to redirect the user back to your app from the magic URL login. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API. (optional)
         * @return CreateMagicUrlTokenRequestBuilder
         */
        public CreateMagicUrlTokenRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set phrase
         * @param phrase Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow. (optional)
         * @return CreateMagicUrlTokenRequestBuilder
         */
        public CreateMagicUrlTokenRequestBuilder phrase(Boolean phrase) {
            this.phrase = phrase;
            return this;
        }
        
        /**
         * Build call for createMagicUrlToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest = buildBodyParams();
            return createMagicUrlTokenCall(accountCreateMagicUrlTokenRequest, _callback);
        }

        private AccountCreateMagicUrlTokenRequest buildBodyParams() {
            AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest = new AccountCreateMagicUrlTokenRequest();
            accountCreateMagicUrlTokenRequest.userId(this.userId);
            accountCreateMagicUrlTokenRequest.email(this.email);
            accountCreateMagicUrlTokenRequest.url(this.url);
            accountCreateMagicUrlTokenRequest.phrase(this.phrase);
            return accountCreateMagicUrlTokenRequest;
        }

        /**
         * Execute createMagicUrlToken request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = createMagicUrlTokenWithHttpInfo(accountCreateMagicUrlTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMagicUrlToken request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest = buildBodyParams();
            return createMagicUrlTokenWithHttpInfo(accountCreateMagicUrlTokenRequest);
        }

        /**
         * Execute createMagicUrlToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCreateMagicUrlTokenRequest accountCreateMagicUrlTokenRequest = buildBodyParams();
            return createMagicUrlTokenAsync(accountCreateMagicUrlTokenRequest, _callback);
        }
    }

    /**
     * Create magic URL token
     * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user&#39;s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
     * @return CreateMagicUrlTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreateMagicUrlTokenRequestBuilder createMagicUrlToken(String userId, String email) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new CreateMagicUrlTokenRequestBuilder(userId, email);
    }
    private okhttp3.Call createMfaChallengeCall(AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateMfaChallengeRequest;

        // create path and map variables
        String localVarPath = "/account/mfa/challenge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMfaChallengeValidateBeforeCall(AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest, final ApiCallback _callback) throws ApiException {
        return createMfaChallengeCall(accountCreateMfaChallengeRequest, _callback);

    }


    private ApiResponse<MfaChallenge> createMfaChallengeWithHttpInfo(AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest) throws ApiException {
        okhttp3.Call localVarCall = createMfaChallengeValidateBeforeCall(accountCreateMfaChallengeRequest, null);
        Type localVarReturnType = new TypeToken<MfaChallenge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMfaChallengeAsync(AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest, final ApiCallback<MfaChallenge> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMfaChallengeValidateBeforeCall(accountCreateMfaChallengeRequest, _callback);
        Type localVarReturnType = new TypeToken<MfaChallenge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMfaChallengeRequestBuilder {
        private final String factor;

        private CreateMfaChallengeRequestBuilder(String factor) {
            this.factor = factor;
        }

        /**
         * Build call for createMfaChallenge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Challenge </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest = buildBodyParams();
            return createMfaChallengeCall(accountCreateMfaChallengeRequest, _callback);
        }

        private AccountCreateMfaChallengeRequest buildBodyParams() {
            AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest = new AccountCreateMfaChallengeRequest();
            if (this.factor != null)
            accountCreateMfaChallengeRequest.factor(AccountCreateMfaChallengeRequest.FactorEnum.fromValue(this.factor));
            return accountCreateMfaChallengeRequest;
        }

        /**
         * Execute createMfaChallenge request
         * @return MfaChallenge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Challenge </td><td>  -  </td></tr>
         </table>
         */
        public MfaChallenge execute() throws ApiException {
            AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest = buildBodyParams();
            ApiResponse<MfaChallenge> localVarResp = createMfaChallengeWithHttpInfo(accountCreateMfaChallengeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMfaChallenge request with HTTP info returned
         * @return ApiResponse&lt;MfaChallenge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Challenge </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MfaChallenge> executeWithHttpInfo() throws ApiException {
            AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest = buildBodyParams();
            return createMfaChallengeWithHttpInfo(accountCreateMfaChallengeRequest);
        }

        /**
         * Execute createMfaChallenge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Challenge </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MfaChallenge> _callback) throws ApiException {
            AccountCreateMfaChallengeRequest accountCreateMfaChallengeRequest = buildBodyParams();
            return createMfaChallengeAsync(accountCreateMfaChallengeRequest, _callback);
        }
    }

    /**
     * Create 2FA Challenge
     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.
     * @return CreateMfaChallengeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> MFA Challenge </td><td>  -  </td></tr>
     </table>
     */
    public CreateMfaChallengeRequestBuilder createMfaChallenge(String factor) throws IllegalArgumentException {
        if (factor == null) throw new IllegalArgumentException("\"factor\" is required but got null");
            

        return new CreateMfaChallengeRequestBuilder(factor);
    }
    private okhttp3.Call createMfaRecoveryCodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/mfa/recovery-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMfaRecoveryCodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createMfaRecoveryCodesCall(_callback);

    }


    private ApiResponse<MfaRecoveryCodes> createMfaRecoveryCodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createMfaRecoveryCodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MfaRecoveryCodes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMfaRecoveryCodesAsync(final ApiCallback<MfaRecoveryCodes> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMfaRecoveryCodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MfaRecoveryCodes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMfaRecoveryCodesRequestBuilder {

        private CreateMfaRecoveryCodesRequestBuilder() {
        }

        /**
         * Build call for createMfaRecoveryCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createMfaRecoveryCodesCall(_callback);
        }


        /**
         * Execute createMfaRecoveryCodes request
         * @return MfaRecoveryCodes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public MfaRecoveryCodes execute() throws ApiException {
            ApiResponse<MfaRecoveryCodes> localVarResp = createMfaRecoveryCodesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMfaRecoveryCodes request with HTTP info returned
         * @return ApiResponse&lt;MfaRecoveryCodes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MfaRecoveryCodes> executeWithHttpInfo() throws ApiException {
            return createMfaRecoveryCodesWithHttpInfo();
        }

        /**
         * Execute createMfaRecoveryCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MfaRecoveryCodes> _callback) throws ApiException {
            return createMfaRecoveryCodesAsync(_callback);
        }
    }

    /**
     * Create MFA Recovery Codes
     * Generate recovery codes as backup for MFA flow. It&#39;s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
     * @return CreateMfaRecoveryCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
     </table>
     */
    public CreateMfaRecoveryCodesRequestBuilder createMfaRecoveryCodes() throws IllegalArgumentException {
        return new CreateMfaRecoveryCodesRequestBuilder();
    }
    private okhttp3.Call createOAuth2SessionCall(String provider, String success, String failure, List<String> scopes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions/oauth2/{provider}"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (success != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("success", success));
        }

        if (failure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failure", failure));
        }

        if (scopes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scopes", scopes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOAuth2SessionValidateBeforeCall(String provider, String success, String failure, List<String> scopes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling createOAuth2Session(Async)");
        }

        return createOAuth2SessionCall(provider, success, failure, scopes, _callback);

    }


    private ApiResponse<Void> createOAuth2SessionWithHttpInfo(String provider, String success, String failure, List<String> scopes) throws ApiException {
        okhttp3.Call localVarCall = createOAuth2SessionValidateBeforeCall(provider, success, failure, scopes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOAuth2SessionAsync(String provider, String success, String failure, List<String> scopes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOAuth2SessionValidateBeforeCall(provider, success, failure, scopes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateOAuth2SessionRequestBuilder {
        private final String provider;
        private String success;
        private String failure;
        private List<String> scopes;

        private CreateOAuth2SessionRequestBuilder(String provider) {
            this.provider = provider;
        }

        /**
         * Set success
         * @param success URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API. (optional, default to )
         * @return CreateOAuth2SessionRequestBuilder
         */
        public CreateOAuth2SessionRequestBuilder success(String success) {
            this.success = success;
            return this;
        }
        
        /**
         * Set failure
         * @param failure URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API. (optional, default to )
         * @return CreateOAuth2SessionRequestBuilder
         */
        public CreateOAuth2SessionRequestBuilder failure(String failure) {
            this.failure = failure;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long. (optional)
         * @return CreateOAuth2SessionRequestBuilder
         */
        public CreateOAuth2SessionRequestBuilder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Build call for createOAuth2Session
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOAuth2SessionCall(provider, success, failure, scopes, _callback);
        }


        /**
         * Execute createOAuth2Session request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createOAuth2SessionWithHttpInfo(provider, success, failure, scopes);
        }

        /**
         * Execute createOAuth2Session request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createOAuth2SessionWithHttpInfo(provider, success, failure, scopes);
        }

        /**
         * Execute createOAuth2Session request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createOAuth2SessionAsync(provider, success, failure, scopes, _callback);
        }
    }

    /**
     * Create OAuth2 session
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#39;s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
     * @param provider OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom. (required)
     * @return CreateOAuth2SessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public CreateOAuth2SessionRequestBuilder createOAuth2Session(String provider) throws IllegalArgumentException {
        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        return new CreateOAuth2SessionRequestBuilder(provider);
    }
    private okhttp3.Call createOAuth2TokenCall(String provider, String success, String failure, List<String> scopes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/tokens/oauth2/{provider}"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (success != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("success", success));
        }

        if (failure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failure", failure));
        }

        if (scopes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scopes", scopes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOAuth2TokenValidateBeforeCall(String provider, String success, String failure, List<String> scopes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling createOAuth2Token(Async)");
        }

        return createOAuth2TokenCall(provider, success, failure, scopes, _callback);

    }


    private ApiResponse<Void> createOAuth2TokenWithHttpInfo(String provider, String success, String failure, List<String> scopes) throws ApiException {
        okhttp3.Call localVarCall = createOAuth2TokenValidateBeforeCall(provider, success, failure, scopes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOAuth2TokenAsync(String provider, String success, String failure, List<String> scopes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOAuth2TokenValidateBeforeCall(provider, success, failure, scopes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateOAuth2TokenRequestBuilder {
        private final String provider;
        private String success;
        private String failure;
        private List<String> scopes;

        private CreateOAuth2TokenRequestBuilder(String provider) {
            this.provider = provider;
        }

        /**
         * Set success
         * @param success URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API. (optional, default to )
         * @return CreateOAuth2TokenRequestBuilder
         */
        public CreateOAuth2TokenRequestBuilder success(String success) {
            this.success = success;
            return this;
        }
        
        /**
         * Set failure
         * @param failure URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API. (optional, default to )
         * @return CreateOAuth2TokenRequestBuilder
         */
        public CreateOAuth2TokenRequestBuilder failure(String failure) {
            this.failure = failure;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long. (optional)
         * @return CreateOAuth2TokenRequestBuilder
         */
        public CreateOAuth2TokenRequestBuilder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Build call for createOAuth2Token
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOAuth2TokenCall(provider, success, failure, scopes, _callback);
        }


        /**
         * Execute createOAuth2Token request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createOAuth2TokenWithHttpInfo(provider, success, failure, scopes);
        }

        /**
         * Execute createOAuth2Token request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createOAuth2TokenWithHttpInfo(provider, success, failure, scopes);
        }

        /**
         * Execute createOAuth2Token request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createOAuth2TokenAsync(provider, success, failure, scopes, _callback);
        }
    }

    /**
     * Create OAuth2 token
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#39;s back to your app when login is completed.   If authentication succeeds, &#x60;userId&#x60; and &#x60;secret&#x60; of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @param provider OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom. (required)
     * @return CreateOAuth2TokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public CreateOAuth2TokenRequestBuilder createOAuth2Token(String provider) throws IllegalArgumentException {
        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        return new CreateOAuth2TokenRequestBuilder(provider);
    }
    private okhttp3.Call createPasswordRecoveryCall(AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreatePasswordRecoveryRequest;

        // create path and map variables
        String localVarPath = "/account/recovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPasswordRecoveryValidateBeforeCall(AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest, final ApiCallback _callback) throws ApiException {
        return createPasswordRecoveryCall(accountCreatePasswordRecoveryRequest, _callback);

    }


    private ApiResponse<Token> createPasswordRecoveryWithHttpInfo(AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest) throws ApiException {
        okhttp3.Call localVarCall = createPasswordRecoveryValidateBeforeCall(accountCreatePasswordRecoveryRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPasswordRecoveryAsync(AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPasswordRecoveryValidateBeforeCall(accountCreatePasswordRecoveryRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePasswordRecoveryRequestBuilder {
        private final String email;
        private final String url;

        private CreatePasswordRecoveryRequestBuilder(String email, String url) {
            this.email = email;
            this.url = url;
        }

        /**
         * Build call for createPasswordRecovery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest = buildBodyParams();
            return createPasswordRecoveryCall(accountCreatePasswordRecoveryRequest, _callback);
        }

        private AccountCreatePasswordRecoveryRequest buildBodyParams() {
            AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest = new AccountCreatePasswordRecoveryRequest();
            accountCreatePasswordRecoveryRequest.email(this.email);
            accountCreatePasswordRecoveryRequest.url(this.url);
            return accountCreatePasswordRecoveryRequest;
        }

        /**
         * Execute createPasswordRecovery request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = createPasswordRecoveryWithHttpInfo(accountCreatePasswordRecoveryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPasswordRecovery request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest = buildBodyParams();
            return createPasswordRecoveryWithHttpInfo(accountCreatePasswordRecoveryRequest);
        }

        /**
         * Execute createPasswordRecovery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCreatePasswordRecoveryRequest accountCreatePasswordRecoveryRequest = buildBodyParams();
            return createPasswordRecoveryAsync(accountCreatePasswordRecoveryRequest, _callback);
        }
    }

    /**
     * Create password recovery
     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user&#39;s email address is valid for 1 hour.
     * @return CreatePasswordRecoveryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreatePasswordRecoveryRequestBuilder createPasswordRecovery(String email, String url) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new CreatePasswordRecoveryRequestBuilder(email, url);
    }
    private okhttp3.Call createPhoneTokenCall(AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreatePhoneTokenRequest;

        // create path and map variables
        String localVarPath = "/account/tokens/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPhoneTokenValidateBeforeCall(AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest, final ApiCallback _callback) throws ApiException {
        return createPhoneTokenCall(accountCreatePhoneTokenRequest, _callback);

    }


    private ApiResponse<Token> createPhoneTokenWithHttpInfo(AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createPhoneTokenValidateBeforeCall(accountCreatePhoneTokenRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPhoneTokenAsync(AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPhoneTokenValidateBeforeCall(accountCreatePhoneTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePhoneTokenRequestBuilder {
        private final String userId;
        private final String phone;

        private CreatePhoneTokenRequestBuilder(String userId, String phone) {
            this.userId = userId;
            this.phone = phone;
        }

        /**
         * Build call for createPhoneToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest = buildBodyParams();
            return createPhoneTokenCall(accountCreatePhoneTokenRequest, _callback);
        }

        private AccountCreatePhoneTokenRequest buildBodyParams() {
            AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest = new AccountCreatePhoneTokenRequest();
            accountCreatePhoneTokenRequest.userId(this.userId);
            accountCreatePhoneTokenRequest.phone(this.phone);
            return accountCreatePhoneTokenRequest;
        }

        /**
         * Execute createPhoneToken request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = createPhoneTokenWithHttpInfo(accountCreatePhoneTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPhoneToken request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest = buildBodyParams();
            return createPhoneTokenWithHttpInfo(accountCreatePhoneTokenRequest);
        }

        /**
         * Execute createPhoneToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AccountCreatePhoneTokenRequest accountCreatePhoneTokenRequest = buildBodyParams();
            return createPhoneTokenAsync(accountCreatePhoneTokenRequest, _callback);
        }
    }

    /**
     * Create phone token
     * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#39;s phone is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @return CreatePhoneTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreatePhoneTokenRequestBuilder createPhoneToken(String userId, String phone) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        return new CreatePhoneTokenRequestBuilder(userId, phone);
    }
    private okhttp3.Call createPhoneVerificationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/verification/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPhoneVerificationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createPhoneVerificationCall(_callback);

    }


    private ApiResponse<Token> createPhoneVerificationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createPhoneVerificationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPhoneVerificationAsync(final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPhoneVerificationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePhoneVerificationRequestBuilder {

        private CreatePhoneVerificationRequestBuilder() {
        }

        /**
         * Build call for createPhoneVerification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPhoneVerificationCall(_callback);
        }


        /**
         * Execute createPhoneVerification request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            ApiResponse<Token> localVarResp = createPhoneVerificationWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPhoneVerification request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            return createPhoneVerificationWithHttpInfo();
        }

        /**
         * Execute createPhoneVerification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            return createPhoneVerificationAsync(_callback);
        }
    }

    /**
     * Create phone verification
     * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user&#39;s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user&#39;s phone number is valid for 15 minutes.
     * @return CreatePhoneVerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token </td><td>  -  </td></tr>
     </table>
     */
    public CreatePhoneVerificationRequestBuilder createPhoneVerification() throws IllegalArgumentException {
        return new CreatePhoneVerificationRequestBuilder();
    }
    private okhttp3.Call createPushTargetCall(AccountCreatePushTargetRequest accountCreatePushTargetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreatePushTargetRequest;

        // create path and map variables
        String localVarPath = "/account/targets/push";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPushTargetValidateBeforeCall(AccountCreatePushTargetRequest accountCreatePushTargetRequest, final ApiCallback _callback) throws ApiException {
        return createPushTargetCall(accountCreatePushTargetRequest, _callback);

    }


    private ApiResponse<Target> createPushTargetWithHttpInfo(AccountCreatePushTargetRequest accountCreatePushTargetRequest) throws ApiException {
        okhttp3.Call localVarCall = createPushTargetValidateBeforeCall(accountCreatePushTargetRequest, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPushTargetAsync(AccountCreatePushTargetRequest accountCreatePushTargetRequest, final ApiCallback<Target> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPushTargetValidateBeforeCall(accountCreatePushTargetRequest, _callback);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePushTargetRequestBuilder {
        private final String targetId;
        private final String identifier;
        private String providerId;

        private CreatePushTargetRequestBuilder(String targetId, String identifier) {
            this.targetId = targetId;
            this.identifier = identifier;
        }

        /**
         * Set providerId
         * @param providerId Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used. (optional)
         * @return CreatePushTargetRequestBuilder
         */
        public CreatePushTargetRequestBuilder providerId(String providerId) {
            this.providerId = providerId;
            return this;
        }
        
        /**
         * Build call for createPushTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreatePushTargetRequest accountCreatePushTargetRequest = buildBodyParams();
            return createPushTargetCall(accountCreatePushTargetRequest, _callback);
        }

        private AccountCreatePushTargetRequest buildBodyParams() {
            AccountCreatePushTargetRequest accountCreatePushTargetRequest = new AccountCreatePushTargetRequest();
            accountCreatePushTargetRequest.targetId(this.targetId);
            accountCreatePushTargetRequest.identifier(this.identifier);
            accountCreatePushTargetRequest.providerId(this.providerId);
            return accountCreatePushTargetRequest;
        }

        /**
         * Execute createPushTarget request
         * @return Target
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public Target execute() throws ApiException {
            AccountCreatePushTargetRequest accountCreatePushTargetRequest = buildBodyParams();
            ApiResponse<Target> localVarResp = createPushTargetWithHttpInfo(accountCreatePushTargetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPushTarget request with HTTP info returned
         * @return ApiResponse&lt;Target&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Target> executeWithHttpInfo() throws ApiException {
            AccountCreatePushTargetRequest accountCreatePushTargetRequest = buildBodyParams();
            return createPushTargetWithHttpInfo(accountCreatePushTargetRequest);
        }

        /**
         * Execute createPushTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Target> _callback) throws ApiException {
            AccountCreatePushTargetRequest accountCreatePushTargetRequest = buildBodyParams();
            return createPushTargetAsync(accountCreatePushTargetRequest, _callback);
        }
    }

    /**
     * Create push target
     * 
     * @return CreatePushTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Target </td><td>  -  </td></tr>
     </table>
     */
    public CreatePushTargetRequestBuilder createPushTarget(String targetId, String identifier) throws IllegalArgumentException {
        if (targetId == null) throw new IllegalArgumentException("\"targetId\" is required but got null");
            

        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new CreatePushTargetRequestBuilder(targetId, identifier);
    }
    private okhttp3.Call createSessionFromTokenCall(AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateSessionFromTokenRequest;

        // create path and map variables
        String localVarPath = "/account/sessions/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionFromTokenValidateBeforeCall(AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest, final ApiCallback _callback) throws ApiException {
        return createSessionFromTokenCall(accountCreateSessionFromTokenRequest, _callback);

    }


    private ApiResponse<Session> createSessionFromTokenWithHttpInfo(AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionFromTokenValidateBeforeCall(accountCreateSessionFromTokenRequest, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSessionFromTokenAsync(AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionFromTokenValidateBeforeCall(accountCreateSessionFromTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSessionFromTokenRequestBuilder {
        private final String userId;
        private final String secret;

        private CreateSessionFromTokenRequestBuilder(String userId, String secret) {
            this.userId = userId;
            this.secret = secret;
        }

        /**
         * Build call for createSessionFromToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest = buildBodyParams();
            return createSessionFromTokenCall(accountCreateSessionFromTokenRequest, _callback);
        }

        private AccountCreateSessionFromTokenRequest buildBodyParams() {
            AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest = new AccountCreateSessionFromTokenRequest();
            accountCreateSessionFromTokenRequest.userId(this.userId);
            accountCreateSessionFromTokenRequest.secret(this.secret);
            return accountCreateSessionFromTokenRequest;
        }

        /**
         * Execute createSessionFromToken request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest = buildBodyParams();
            ApiResponse<Session> localVarResp = createSessionFromTokenWithHttpInfo(accountCreateSessionFromTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSessionFromToken request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest = buildBodyParams();
            return createSessionFromTokenWithHttpInfo(accountCreateSessionFromTokenRequest);
        }

        /**
         * Execute createSessionFromToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            AccountCreateSessionFromTokenRequest accountCreateSessionFromTokenRequest = buildBodyParams();
            return createSessionFromTokenAsync(accountCreateSessionFromTokenRequest, _callback);
        }
    }

    /**
     * Create session
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     * @return CreateSessionFromTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionFromTokenRequestBuilder createSessionFromToken(String userId, String secret) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        return new CreateSessionFromTokenRequestBuilder(userId, secret);
    }
    private okhttp3.Call deleteAuthenticatorCall(String type, AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountDeleteAuthenticatorRequest;

        // create path and map variables
        String localVarPath = "/account/mfa/authenticators/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthenticatorValidateBeforeCall(String type, AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteAuthenticator(Async)");
        }

        return deleteAuthenticatorCall(type, accountDeleteAuthenticatorRequest, _callback);

    }


    private ApiResponse<User> deleteAuthenticatorWithHttpInfo(String type, AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthenticatorValidateBeforeCall(type, accountDeleteAuthenticatorRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAuthenticatorAsync(String type, AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthenticatorValidateBeforeCall(type, accountDeleteAuthenticatorRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAuthenticatorRequestBuilder {
        private final String otp;
        private final String type;

        private DeleteAuthenticatorRequestBuilder(String otp, String type) {
            this.otp = otp;
            this.type = type;
        }

        /**
         * Build call for deleteAuthenticator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest = buildBodyParams();
            return deleteAuthenticatorCall(type, accountDeleteAuthenticatorRequest, _callback);
        }

        private AccountDeleteAuthenticatorRequest buildBodyParams() {
            AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest = new AccountDeleteAuthenticatorRequest();
            accountDeleteAuthenticatorRequest.otp(this.otp);
            return accountDeleteAuthenticatorRequest;
        }

        /**
         * Execute deleteAuthenticator request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest = buildBodyParams();
            ApiResponse<User> localVarResp = deleteAuthenticatorWithHttpInfo(type, accountDeleteAuthenticatorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAuthenticator request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest = buildBodyParams();
            return deleteAuthenticatorWithHttpInfo(type, accountDeleteAuthenticatorRequest);
        }

        /**
         * Execute deleteAuthenticator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountDeleteAuthenticatorRequest accountDeleteAuthenticatorRequest = buildBodyParams();
            return deleteAuthenticatorAsync(type, accountDeleteAuthenticatorRequest, _callback);
        }
    }

    /**
     * Delete Authenticator
     * Delete an authenticator for a user by ID.
     * @param type Type of authenticator. (required)
     * @return DeleteAuthenticatorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAuthenticatorRequestBuilder deleteAuthenticator(String otp, String type) throws IllegalArgumentException {
        if (otp == null) throw new IllegalArgumentException("\"otp\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new DeleteAuthenticatorRequestBuilder(otp, type);
    }
    private okhttp3.Call deleteIdentityByIdCall(String identityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/identities/{identityId}"
            .replace("{" + "identityId" + "}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIdentityByIdValidateBeforeCall(String identityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling deleteIdentityById(Async)");
        }

        return deleteIdentityByIdCall(identityId, _callback);

    }


    private ApiResponse<Void> deleteIdentityByIdWithHttpInfo(String identityId) throws ApiException {
        okhttp3.Call localVarCall = deleteIdentityByIdValidateBeforeCall(identityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteIdentityByIdAsync(String identityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIdentityByIdValidateBeforeCall(identityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteIdentityByIdRequestBuilder {
        private final String identityId;

        private DeleteIdentityByIdRequestBuilder(String identityId) {
            this.identityId = identityId;
        }

        /**
         * Build call for deleteIdentityById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIdentityByIdCall(identityId, _callback);
        }


        /**
         * Execute deleteIdentityById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteIdentityByIdWithHttpInfo(identityId);
        }

        /**
         * Execute deleteIdentityById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteIdentityByIdWithHttpInfo(identityId);
        }

        /**
         * Execute deleteIdentityById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteIdentityByIdAsync(identityId, _callback);
        }
    }

    /**
     * Delete identity
     * Delete an identity by its unique ID.
     * @param identityId Identity ID. (required)
     * @return DeleteIdentityByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIdentityByIdRequestBuilder deleteIdentityById(String identityId) throws IllegalArgumentException {
        if (identityId == null) throw new IllegalArgumentException("\"identityId\" is required but got null");
            

        return new DeleteIdentityByIdRequestBuilder(identityId);
    }
    private okhttp3.Call deletePushTargetCall(String targetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/targets/{targetId}/push"
            .replace("{" + "targetId" + "}", localVarApiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePushTargetValidateBeforeCall(String targetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling deletePushTarget(Async)");
        }

        return deletePushTargetCall(targetId, _callback);

    }


    private ApiResponse<Target> deletePushTargetWithHttpInfo(String targetId) throws ApiException {
        okhttp3.Call localVarCall = deletePushTargetValidateBeforeCall(targetId, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePushTargetAsync(String targetId, final ApiCallback<Target> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePushTargetValidateBeforeCall(targetId, _callback);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeletePushTargetRequestBuilder {
        private final String targetId;

        private DeletePushTargetRequestBuilder(String targetId) {
            this.targetId = targetId;
        }

        /**
         * Build call for deletePushTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePushTargetCall(targetId, _callback);
        }


        /**
         * Execute deletePushTarget request
         * @return Target
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public Target execute() throws ApiException {
            ApiResponse<Target> localVarResp = deletePushTargetWithHttpInfo(targetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deletePushTarget request with HTTP info returned
         * @return ApiResponse&lt;Target&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Target> executeWithHttpInfo() throws ApiException {
            return deletePushTargetWithHttpInfo(targetId);
        }

        /**
         * Execute deletePushTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Target> _callback) throws ApiException {
            return deletePushTargetAsync(targetId, _callback);
        }
    }

    /**
     * Delete push target
     * 
     * @param targetId Target ID. (required)
     * @return DeletePushTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeletePushTargetRequestBuilder deletePushTarget(String targetId) throws IllegalArgumentException {
        if (targetId == null) throw new IllegalArgumentException("\"targetId\" is required but got null");
            

        return new DeletePushTargetRequestBuilder(targetId);
    }
    private okhttp3.Call extendSessionLengthCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extendSessionLengthValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling extendSessionLength(Async)");
        }

        return extendSessionLengthCall(sessionId, _callback);

    }


    private ApiResponse<Session> extendSessionLengthWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = extendSessionLengthValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extendSessionLengthAsync(String sessionId, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = extendSessionLengthValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtendSessionLengthRequestBuilder {
        private final String sessionId;

        private ExtendSessionLengthRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for extendSessionLength
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return extendSessionLengthCall(sessionId, _callback);
        }


        /**
         * Execute extendSessionLength request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            ApiResponse<Session> localVarResp = extendSessionLengthWithHttpInfo(sessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extendSessionLength request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            return extendSessionLengthWithHttpInfo(sessionId);
        }

        /**
         * Execute extendSessionLength request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            return extendSessionLengthAsync(sessionId, _callback);
        }
    }

    /**
     * Update session
     * Use this endpoint to extend a session&#39;s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.
     * @param sessionId Session ID. Use the string &#39;current&#39; to update the current device session. (required)
     * @return ExtendSessionLengthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public ExtendSessionLengthRequestBuilder extendSessionLength(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new ExtendSessionLengthRequestBuilder(sessionId);
    }
    private okhttp3.Call getCurrentUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentUserCall(_callback);

    }


    private ApiResponse<User> getCurrentUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentUserAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentUserRequestBuilder {

        private GetCurrentUserRequestBuilder() {
        }

        /**
         * Build call for getCurrentUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentUserCall(_callback);
        }


        /**
         * Execute getCurrentUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getCurrentUserWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getCurrentUserWithHttpInfo();
        }

        /**
         * Execute getCurrentUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getCurrentUserAsync(_callback);
        }
    }

    /**
     * Get account
     * Get the currently logged in user.
     * @return GetCurrentUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserRequestBuilder getCurrentUser() throws IllegalArgumentException {
        return new GetCurrentUserRequestBuilder();
    }
    private okhttp3.Call getMfaRecoveryCodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/mfa/recovery-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMfaRecoveryCodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMfaRecoveryCodesCall(_callback);

    }


    private ApiResponse<MfaRecoveryCodes> getMfaRecoveryCodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMfaRecoveryCodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MfaRecoveryCodes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMfaRecoveryCodesAsync(final ApiCallback<MfaRecoveryCodes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMfaRecoveryCodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MfaRecoveryCodes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMfaRecoveryCodesRequestBuilder {

        private GetMfaRecoveryCodesRequestBuilder() {
        }

        /**
         * Build call for getMfaRecoveryCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMfaRecoveryCodesCall(_callback);
        }


        /**
         * Execute getMfaRecoveryCodes request
         * @return MfaRecoveryCodes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public MfaRecoveryCodes execute() throws ApiException {
            ApiResponse<MfaRecoveryCodes> localVarResp = getMfaRecoveryCodesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMfaRecoveryCodes request with HTTP info returned
         * @return ApiResponse&lt;MfaRecoveryCodes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MfaRecoveryCodes> executeWithHttpInfo() throws ApiException {
            return getMfaRecoveryCodesWithHttpInfo();
        }

        /**
         * Execute getMfaRecoveryCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MfaRecoveryCodes> _callback) throws ApiException {
            return getMfaRecoveryCodesAsync(_callback);
        }
    }

    /**
     * Get MFA Recovery Codes
     * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.
     * @return GetMfaRecoveryCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
     </table>
     */
    public GetMfaRecoveryCodesRequestBuilder getMfaRecoveryCodes() throws IllegalArgumentException {
        return new GetMfaRecoveryCodesRequestBuilder();
    }
    private okhttp3.Call getPrefsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/prefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrefsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPrefsCall(_callback);

    }


    private ApiResponse<Map<String, Object>> getPrefsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPrefsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrefsAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrefsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPrefsRequestBuilder {

        private GetPrefsRequestBuilder() {
        }

        /**
         * Build call for getPrefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPrefsCall(_callback);
        }


        /**
         * Execute getPrefs request
         * @return Map&lt;String, Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, Object> execute() throws ApiException {
            ApiResponse<Map<String, Object>> localVarResp = getPrefsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrefs request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, Object>> executeWithHttpInfo() throws ApiException {
            return getPrefsWithHttpInfo();
        }

        /**
         * Execute getPrefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {
            return getPrefsAsync(_callback);
        }
    }

    /**
     * Get account preferences
     * Get the preferences as a key-value object for the currently logged in user.
     * @return GetPrefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
     </table>
     */
    public GetPrefsRequestBuilder getPrefs() throws IllegalArgumentException {
        return new GetPrefsRequestBuilder();
    }
    private okhttp3.Call getSessionCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSession(Async)");
        }

        return getSessionCall(sessionId, _callback);

    }


    private ApiResponse<Session> getSessionWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getSessionValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSessionAsync(String sessionId, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSessionRequestBuilder {
        private final String sessionId;

        private GetSessionRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for getSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSessionCall(sessionId, _callback);
        }


        /**
         * Execute getSession request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            ApiResponse<Session> localVarResp = getSessionWithHttpInfo(sessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSession request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            return getSessionWithHttpInfo(sessionId);
        }

        /**
         * Execute getSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            return getSessionAsync(sessionId, _callback);
        }
    }

    /**
     * Get session
     * Use this endpoint to get a logged in user&#39;s session using a Session ID. Inputting &#39;current&#39; will return the current session being used.
     * @param sessionId Session ID. Use the string &#39;current&#39; to get the current device session. (required)
     * @return GetSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionRequestBuilder getSession(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new GetSessionRequestBuilder(sessionId);
    }
    private okhttp3.Call listIdentitiesCall(List<String> queries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIdentitiesValidateBeforeCall(List<String> queries, final ApiCallback _callback) throws ApiException {
        return listIdentitiesCall(queries, _callback);

    }


    private ApiResponse<IdentityList> listIdentitiesWithHttpInfo(List<String> queries) throws ApiException {
        okhttp3.Call localVarCall = listIdentitiesValidateBeforeCall(queries, null);
        Type localVarReturnType = new TypeToken<IdentityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listIdentitiesAsync(List<String> queries, final ApiCallback<IdentityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIdentitiesValidateBeforeCall(queries, _callback);
        Type localVarReturnType = new TypeToken<IdentityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListIdentitiesRequestBuilder {
        private List<String> queries;

        private ListIdentitiesRequestBuilder() {
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry (optional)
         * @return ListIdentitiesRequestBuilder
         */
        public ListIdentitiesRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Build call for listIdentities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Identities List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listIdentitiesCall(queries, _callback);
        }


        /**
         * Execute listIdentities request
         * @return IdentityList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Identities List </td><td>  -  </td></tr>
         </table>
         */
        public IdentityList execute() throws ApiException {
            ApiResponse<IdentityList> localVarResp = listIdentitiesWithHttpInfo(queries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listIdentities request with HTTP info returned
         * @return ApiResponse&lt;IdentityList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Identities List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityList> executeWithHttpInfo() throws ApiException {
            return listIdentitiesWithHttpInfo(queries);
        }

        /**
         * Execute listIdentities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Identities List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityList> _callback) throws ApiException {
            return listIdentitiesAsync(queries, _callback);
        }
    }

    /**
     * List Identities
     * Get the list of identities for the currently logged in user.
     * @return ListIdentitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identities List </td><td>  -  </td></tr>
     </table>
     */
    public ListIdentitiesRequestBuilder listIdentities() throws IllegalArgumentException {
        return new ListIdentitiesRequestBuilder();
    }
    private okhttp3.Call listLogsCall(List<String> queries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLogsValidateBeforeCall(List<String> queries, final ApiCallback _callback) throws ApiException {
        return listLogsCall(queries, _callback);

    }


    private ApiResponse<LogList> listLogsWithHttpInfo(List<String> queries) throws ApiException {
        okhttp3.Call localVarCall = listLogsValidateBeforeCall(queries, null);
        Type localVarReturnType = new TypeToken<LogList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLogsAsync(List<String> queries, final ApiCallback<LogList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLogsValidateBeforeCall(queries, _callback);
        Type localVarReturnType = new TypeToken<LogList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLogsRequestBuilder {
        private List<String> queries;

        private ListLogsRequestBuilder() {
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset (optional)
         * @return ListLogsRequestBuilder
         */
        public ListLogsRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Build call for listLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Logs List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLogsCall(queries, _callback);
        }


        /**
         * Execute listLogs request
         * @return LogList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Logs List </td><td>  -  </td></tr>
         </table>
         */
        public LogList execute() throws ApiException {
            ApiResponse<LogList> localVarResp = listLogsWithHttpInfo(queries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLogs request with HTTP info returned
         * @return ApiResponse&lt;LogList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Logs List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogList> executeWithHttpInfo() throws ApiException {
            return listLogsWithHttpInfo(queries);
        }

        /**
         * Execute listLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Logs List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogList> _callback) throws ApiException {
            return listLogsAsync(queries, _callback);
        }
    }

    /**
     * List logs
     * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.
     * @return ListLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logs List </td><td>  -  </td></tr>
     </table>
     */
    public ListLogsRequestBuilder listLogs() throws IllegalArgumentException {
        return new ListLogsRequestBuilder();
    }
    private okhttp3.Call listMfaFactorsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/mfa/factors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMfaFactorsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listMfaFactorsCall(_callback);

    }


    private ApiResponse<MfaFactors> listMfaFactorsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMfaFactorsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MfaFactors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMfaFactorsAsync(final ApiCallback<MfaFactors> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMfaFactorsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MfaFactors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMfaFactorsRequestBuilder {

        private ListMfaFactorsRequestBuilder() {
        }

        /**
         * Build call for listMfaFactors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAFactors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMfaFactorsCall(_callback);
        }


        /**
         * Execute listMfaFactors request
         * @return MfaFactors
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAFactors </td><td>  -  </td></tr>
         </table>
         */
        public MfaFactors execute() throws ApiException {
            ApiResponse<MfaFactors> localVarResp = listMfaFactorsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMfaFactors request with HTTP info returned
         * @return ApiResponse&lt;MfaFactors&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAFactors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MfaFactors> executeWithHttpInfo() throws ApiException {
            return listMfaFactorsWithHttpInfo();
        }

        /**
         * Execute listMfaFactors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFAFactors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MfaFactors> _callback) throws ApiException {
            return listMfaFactorsAsync(_callback);
        }
    }

    /**
     * List Factors
     * List the factors available on the account to be used as a MFA challange.
     * @return ListMfaFactorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MFAFactors </td><td>  -  </td></tr>
     </table>
     */
    public ListMfaFactorsRequestBuilder listMfaFactors() throws IllegalArgumentException {
        return new ListMfaFactorsRequestBuilder();
    }
    private okhttp3.Call listSessionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSessionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSessionsCall(_callback);

    }


    private ApiResponse<SessionList> listSessionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSessionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SessionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSessionsAsync(final ApiCallback<SessionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSessionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SessionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSessionsRequestBuilder {

        private ListSessionsRequestBuilder() {
        }

        /**
         * Build call for listSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sessions List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSessionsCall(_callback);
        }


        /**
         * Execute listSessions request
         * @return SessionList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sessions List </td><td>  -  </td></tr>
         </table>
         */
        public SessionList execute() throws ApiException {
            ApiResponse<SessionList> localVarResp = listSessionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSessions request with HTTP info returned
         * @return ApiResponse&lt;SessionList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sessions List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SessionList> executeWithHttpInfo() throws ApiException {
            return listSessionsWithHttpInfo();
        }

        /**
         * Execute listSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sessions List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SessionList> _callback) throws ApiException {
            return listSessionsAsync(_callback);
        }
    }

    /**
     * List sessions
     * Get the list of active sessions across different devices for the currently logged in user.
     * @return ListSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sessions List </td><td>  -  </td></tr>
     </table>
     */
    public ListSessionsRequestBuilder listSessions() throws IllegalArgumentException {
        return new ListSessionsRequestBuilder();
    }
    private okhttp3.Call logoutSessionByIdCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutSessionByIdValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling logoutSessionById(Async)");
        }

        return logoutSessionByIdCall(sessionId, _callback);

    }


    private ApiResponse<Void> logoutSessionByIdWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = logoutSessionByIdValidateBeforeCall(sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call logoutSessionByIdAsync(String sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutSessionByIdValidateBeforeCall(sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class LogoutSessionByIdRequestBuilder {
        private final String sessionId;

        private LogoutSessionByIdRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for logoutSessionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return logoutSessionByIdCall(sessionId, _callback);
        }


        /**
         * Execute logoutSessionById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            logoutSessionByIdWithHttpInfo(sessionId);
        }

        /**
         * Execute logoutSessionById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return logoutSessionByIdWithHttpInfo(sessionId);
        }

        /**
         * Execute logoutSessionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return logoutSessionByIdAsync(sessionId, _callback);
        }
    }

    /**
     * Delete session
     * Logout the user. Use &#39;current&#39; as the session ID to logout on this device, use a session ID to logout on another device. If you&#39;re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.
     * @param sessionId Session ID. Use the string &#39;current&#39; to delete the current device session. (required)
     * @return LogoutSessionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public LogoutSessionByIdRequestBuilder logoutSessionById(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new LogoutSessionByIdRequestBuilder(sessionId);
    }
    private okhttp3.Call regenerateMfaRecoveryCodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/mfa/recovery-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateMfaRecoveryCodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return regenerateMfaRecoveryCodesCall(_callback);

    }


    private ApiResponse<MfaRecoveryCodes> regenerateMfaRecoveryCodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = regenerateMfaRecoveryCodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MfaRecoveryCodes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call regenerateMfaRecoveryCodesAsync(final ApiCallback<MfaRecoveryCodes> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateMfaRecoveryCodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MfaRecoveryCodes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegenerateMfaRecoveryCodesRequestBuilder {

        private RegenerateMfaRecoveryCodesRequestBuilder() {
        }

        /**
         * Build call for regenerateMfaRecoveryCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return regenerateMfaRecoveryCodesCall(_callback);
        }


        /**
         * Execute regenerateMfaRecoveryCodes request
         * @return MfaRecoveryCodes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public MfaRecoveryCodes execute() throws ApiException {
            ApiResponse<MfaRecoveryCodes> localVarResp = regenerateMfaRecoveryCodesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute regenerateMfaRecoveryCodes request with HTTP info returned
         * @return ApiResponse&lt;MfaRecoveryCodes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MfaRecoveryCodes> executeWithHttpInfo() throws ApiException {
            return regenerateMfaRecoveryCodesWithHttpInfo();
        }

        /**
         * Execute regenerateMfaRecoveryCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MfaRecoveryCodes> _callback) throws ApiException {
            return regenerateMfaRecoveryCodesAsync(_callback);
        }
    }

    /**
     * Regenerate MFA Recovery Codes
     * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.
     * @return RegenerateMfaRecoveryCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MFA Recovery Codes </td><td>  -  </td></tr>
     </table>
     */
    public RegenerateMfaRecoveryCodesRequestBuilder regenerateMfaRecoveryCodes() throws IllegalArgumentException {
        return new RegenerateMfaRecoveryCodesRequestBuilder();
    }
    private okhttp3.Call registerUserCall(AccountRegisterUserRequest accountRegisterUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountRegisterUserRequest;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUserValidateBeforeCall(AccountRegisterUserRequest accountRegisterUserRequest, final ApiCallback _callback) throws ApiException {
        return registerUserCall(accountRegisterUserRequest, _callback);

    }


    private ApiResponse<User> registerUserWithHttpInfo(AccountRegisterUserRequest accountRegisterUserRequest) throws ApiException {
        okhttp3.Call localVarCall = registerUserValidateBeforeCall(accountRegisterUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerUserAsync(AccountRegisterUserRequest accountRegisterUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUserValidateBeforeCall(accountRegisterUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterUserRequestBuilder {
        private final String userId;
        private final String email;
        private final String password;
        private String name;

        private RegisterUserRequestBuilder(String userId, String email, String password) {
            this.userId = userId;
            this.email = email;
            this.password = password;
        }

        /**
         * Set name
         * @param name User name. Max length: 128 chars. (optional)
         * @return RegisterUserRequestBuilder
         */
        public RegisterUserRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for registerUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountRegisterUserRequest accountRegisterUserRequest = buildBodyParams();
            return registerUserCall(accountRegisterUserRequest, _callback);
        }

        private AccountRegisterUserRequest buildBodyParams() {
            AccountRegisterUserRequest accountRegisterUserRequest = new AccountRegisterUserRequest();
            accountRegisterUserRequest.userId(this.userId);
            accountRegisterUserRequest.email(this.email);
            accountRegisterUserRequest.password(this.password);
            accountRegisterUserRequest.name(this.name);
            return accountRegisterUserRequest;
        }

        /**
         * Execute registerUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountRegisterUserRequest accountRegisterUserRequest = buildBodyParams();
            ApiResponse<User> localVarResp = registerUserWithHttpInfo(accountRegisterUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountRegisterUserRequest accountRegisterUserRequest = buildBodyParams();
            return registerUserWithHttpInfo(accountRegisterUserRequest);
        }

        /**
         * Execute registerUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountRegisterUserRequest accountRegisterUserRequest = buildBodyParams();
            return registerUserAsync(accountRegisterUserRequest, _callback);
        }
    }

    /**
     * Create account
     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
     * @return RegisterUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public RegisterUserRequestBuilder registerUser(String userId, String email, String password) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new RegisterUserRequestBuilder(userId, email, password);
    }
    private okhttp3.Call removeSessionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSessionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return removeSessionsCall(_callback);

    }


    private ApiResponse<Void> removeSessionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = removeSessionsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSessionsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSessionsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSessionsRequestBuilder {

        private RemoveSessionsRequestBuilder() {
        }

        /**
         * Build call for removeSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSessionsCall(_callback);
        }


        /**
         * Execute removeSessions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSessionsWithHttpInfo();
        }

        /**
         * Execute removeSessions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSessionsWithHttpInfo();
        }

        /**
         * Execute removeSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSessionsAsync(_callback);
        }
    }

    /**
     * Delete sessions
     * Delete all sessions from the user account and remove any sessions cookies from the end client.
     * @return RemoveSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSessionsRequestBuilder removeSessions() throws IllegalArgumentException {
        return new RemoveSessionsRequestBuilder();
    }
    private okhttp3.Call updateMagicUrlSessionCall(AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdateMagicUrlSessionRequest;

        // create path and map variables
        String localVarPath = "/account/sessions/magic-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMagicUrlSessionValidateBeforeCall(AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest, final ApiCallback _callback) throws ApiException {
        return updateMagicUrlSessionCall(accountUpdateMagicUrlSessionRequest, _callback);

    }


    private ApiResponse<Session> updateMagicUrlSessionWithHttpInfo(AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMagicUrlSessionValidateBeforeCall(accountUpdateMagicUrlSessionRequest, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMagicUrlSessionAsync(AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMagicUrlSessionValidateBeforeCall(accountUpdateMagicUrlSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMagicUrlSessionRequestBuilder {
        private final String userId;
        private final String secret;

        private UpdateMagicUrlSessionRequestBuilder(String userId, String secret) {
            this.userId = userId;
            this.secret = secret;
        }

        /**
         * Build call for updateMagicUrlSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest = buildBodyParams();
            return updateMagicUrlSessionCall(accountUpdateMagicUrlSessionRequest, _callback);
        }

        private AccountUpdateMagicUrlSessionRequest buildBodyParams() {
            AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest = new AccountUpdateMagicUrlSessionRequest();
            accountUpdateMagicUrlSessionRequest.userId(this.userId);
            accountUpdateMagicUrlSessionRequest.secret(this.secret);
            return accountUpdateMagicUrlSessionRequest;
        }

        /**
         * Execute updateMagicUrlSession request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest = buildBodyParams();
            ApiResponse<Session> localVarResp = updateMagicUrlSessionWithHttpInfo(accountUpdateMagicUrlSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMagicUrlSession request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest = buildBodyParams();
            return updateMagicUrlSessionWithHttpInfo(accountUpdateMagicUrlSessionRequest);
        }

        /**
         * Execute updateMagicUrlSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            AccountUpdateMagicUrlSessionRequest accountUpdateMagicUrlSessionRequest = buildBodyParams();
            return updateMagicUrlSessionAsync(accountUpdateMagicUrlSessionRequest, _callback);
        }
    }

    /**
     * Update magic URL session
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     * @return UpdateMagicUrlSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMagicUrlSessionRequestBuilder updateMagicUrlSession(String userId, String secret) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        return new UpdateMagicUrlSessionRequestBuilder(userId, secret);
    }
    private okhttp3.Call updateMfaStatusCall(AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdateMfaStatusRequest;

        // create path and map variables
        String localVarPath = "/account/mfa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMfaStatusValidateBeforeCall(AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest, final ApiCallback _callback) throws ApiException {
        return updateMfaStatusCall(accountUpdateMfaStatusRequest, _callback);

    }


    private ApiResponse<User> updateMfaStatusWithHttpInfo(AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMfaStatusValidateBeforeCall(accountUpdateMfaStatusRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMfaStatusAsync(AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMfaStatusValidateBeforeCall(accountUpdateMfaStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMfaStatusRequestBuilder {
        private final Boolean mfa;

        private UpdateMfaStatusRequestBuilder(Boolean mfa) {
            this.mfa = mfa;
        }

        /**
         * Build call for updateMfaStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest = buildBodyParams();
            return updateMfaStatusCall(accountUpdateMfaStatusRequest, _callback);
        }

        private AccountUpdateMfaStatusRequest buildBodyParams() {
            AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest = new AccountUpdateMfaStatusRequest();
            accountUpdateMfaStatusRequest.mfa(this.mfa);
            return accountUpdateMfaStatusRequest;
        }

        /**
         * Execute updateMfaStatus request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updateMfaStatusWithHttpInfo(accountUpdateMfaStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMfaStatus request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest = buildBodyParams();
            return updateMfaStatusWithHttpInfo(accountUpdateMfaStatusRequest);
        }

        /**
         * Execute updateMfaStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountUpdateMfaStatusRequest accountUpdateMfaStatusRequest = buildBodyParams();
            return updateMfaStatusAsync(accountUpdateMfaStatusRequest, _callback);
        }
    }

    /**
     * Update MFA
     * Enable or disable MFA on an account.
     * @return UpdateMfaStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMfaStatusRequestBuilder updateMfaStatus(Boolean mfa) throws IllegalArgumentException {
        if (mfa == null) throw new IllegalArgumentException("\"mfa\" is required but got null");
        return new UpdateMfaStatusRequestBuilder(mfa);
    }
    private okhttp3.Call updateNameOperationCall(AccountUpdateNameOperationRequest accountUpdateNameOperationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdateNameOperationRequest;

        // create path and map variables
        String localVarPath = "/account/name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameOperationValidateBeforeCall(AccountUpdateNameOperationRequest accountUpdateNameOperationRequest, final ApiCallback _callback) throws ApiException {
        return updateNameOperationCall(accountUpdateNameOperationRequest, _callback);

    }


    private ApiResponse<User> updateNameOperationWithHttpInfo(AccountUpdateNameOperationRequest accountUpdateNameOperationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNameOperationValidateBeforeCall(accountUpdateNameOperationRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNameOperationAsync(AccountUpdateNameOperationRequest accountUpdateNameOperationRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameOperationValidateBeforeCall(accountUpdateNameOperationRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateNameOperationRequestBuilder {
        private final String name;

        private UpdateNameOperationRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for updateNameOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdateNameOperationRequest accountUpdateNameOperationRequest = buildBodyParams();
            return updateNameOperationCall(accountUpdateNameOperationRequest, _callback);
        }

        private AccountUpdateNameOperationRequest buildBodyParams() {
            AccountUpdateNameOperationRequest accountUpdateNameOperationRequest = new AccountUpdateNameOperationRequest();
            accountUpdateNameOperationRequest.name(this.name);
            return accountUpdateNameOperationRequest;
        }

        /**
         * Execute updateNameOperation request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountUpdateNameOperationRequest accountUpdateNameOperationRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updateNameOperationWithHttpInfo(accountUpdateNameOperationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateNameOperation request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountUpdateNameOperationRequest accountUpdateNameOperationRequest = buildBodyParams();
            return updateNameOperationWithHttpInfo(accountUpdateNameOperationRequest);
        }

        /**
         * Execute updateNameOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountUpdateNameOperationRequest accountUpdateNameOperationRequest = buildBodyParams();
            return updateNameOperationAsync(accountUpdateNameOperationRequest, _callback);
        }
    }

    /**
     * Update name
     * Update currently logged in user account name.
     * @return UpdateNameOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameOperationRequestBuilder updateNameOperation(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new UpdateNameOperationRequestBuilder(name);
    }
    private okhttp3.Call updatePasswordCall(AccountUpdatePasswordRequest accountUpdatePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdatePasswordRequest;

        // create path and map variables
        String localVarPath = "/account/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePasswordValidateBeforeCall(AccountUpdatePasswordRequest accountUpdatePasswordRequest, final ApiCallback _callback) throws ApiException {
        return updatePasswordCall(accountUpdatePasswordRequest, _callback);

    }


    private ApiResponse<User> updatePasswordWithHttpInfo(AccountUpdatePasswordRequest accountUpdatePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePasswordValidateBeforeCall(accountUpdatePasswordRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePasswordAsync(AccountUpdatePasswordRequest accountUpdatePasswordRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePasswordValidateBeforeCall(accountUpdatePasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePasswordRequestBuilder {
        private final String password;
        private String oldPassword;

        private UpdatePasswordRequestBuilder(String password) {
            this.password = password;
        }

        /**
         * Set oldPassword
         * @param oldPassword Current user password. Must be at least 8 chars. (optional)
         * @return UpdatePasswordRequestBuilder
         */
        public UpdatePasswordRequestBuilder oldPassword(String oldPassword) {
            this.oldPassword = oldPassword;
            return this;
        }
        
        /**
         * Build call for updatePassword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdatePasswordRequest accountUpdatePasswordRequest = buildBodyParams();
            return updatePasswordCall(accountUpdatePasswordRequest, _callback);
        }

        private AccountUpdatePasswordRequest buildBodyParams() {
            AccountUpdatePasswordRequest accountUpdatePasswordRequest = new AccountUpdatePasswordRequest();
            accountUpdatePasswordRequest.password(this.password);
            accountUpdatePasswordRequest.oldPassword(this.oldPassword);
            return accountUpdatePasswordRequest;
        }

        /**
         * Execute updatePassword request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountUpdatePasswordRequest accountUpdatePasswordRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updatePasswordWithHttpInfo(accountUpdatePasswordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePassword request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountUpdatePasswordRequest accountUpdatePasswordRequest = buildBodyParams();
            return updatePasswordWithHttpInfo(accountUpdatePasswordRequest);
        }

        /**
         * Execute updatePassword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountUpdatePasswordRequest accountUpdatePasswordRequest = buildBodyParams();
            return updatePasswordAsync(accountUpdatePasswordRequest, _callback);
        }
    }

    /**
     * Update password
     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.
     * @return UpdatePasswordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePasswordRequestBuilder updatePassword(String password) throws IllegalArgumentException {
        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new UpdatePasswordRequestBuilder(password);
    }
    private okhttp3.Call updatePhoneCall(AccountUpdatePhoneRequest accountUpdatePhoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdatePhoneRequest;

        // create path and map variables
        String localVarPath = "/account/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePhoneValidateBeforeCall(AccountUpdatePhoneRequest accountUpdatePhoneRequest, final ApiCallback _callback) throws ApiException {
        return updatePhoneCall(accountUpdatePhoneRequest, _callback);

    }


    private ApiResponse<User> updatePhoneWithHttpInfo(AccountUpdatePhoneRequest accountUpdatePhoneRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePhoneValidateBeforeCall(accountUpdatePhoneRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePhoneAsync(AccountUpdatePhoneRequest accountUpdatePhoneRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePhoneValidateBeforeCall(accountUpdatePhoneRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePhoneRequestBuilder {
        private final String phone;
        private final String password;

        private UpdatePhoneRequestBuilder(String phone, String password) {
            this.phone = phone;
            this.password = password;
        }

        /**
         * Build call for updatePhone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdatePhoneRequest accountUpdatePhoneRequest = buildBodyParams();
            return updatePhoneCall(accountUpdatePhoneRequest, _callback);
        }

        private AccountUpdatePhoneRequest buildBodyParams() {
            AccountUpdatePhoneRequest accountUpdatePhoneRequest = new AccountUpdatePhoneRequest();
            accountUpdatePhoneRequest.phone(this.phone);
            accountUpdatePhoneRequest.password(this.password);
            return accountUpdatePhoneRequest;
        }

        /**
         * Execute updatePhone request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountUpdatePhoneRequest accountUpdatePhoneRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updatePhoneWithHttpInfo(accountUpdatePhoneRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePhone request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountUpdatePhoneRequest accountUpdatePhoneRequest = buildBodyParams();
            return updatePhoneWithHttpInfo(accountUpdatePhoneRequest);
        }

        /**
         * Execute updatePhone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountUpdatePhoneRequest accountUpdatePhoneRequest = buildBodyParams();
            return updatePhoneAsync(accountUpdatePhoneRequest, _callback);
        }
    }

    /**
     * Update phone
     * Update the currently logged in user&#39;s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.
     * @return UpdatePhoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePhoneRequestBuilder updatePhone(String phone, String password) throws IllegalArgumentException {
        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new UpdatePhoneRequestBuilder(phone, password);
    }
    private okhttp3.Call updatePhoneSessionCall(AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdatePhoneSessionRequest;

        // create path and map variables
        String localVarPath = "/account/sessions/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePhoneSessionValidateBeforeCall(AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest, final ApiCallback _callback) throws ApiException {
        return updatePhoneSessionCall(accountUpdatePhoneSessionRequest, _callback);

    }


    private ApiResponse<Session> updatePhoneSessionWithHttpInfo(AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePhoneSessionValidateBeforeCall(accountUpdatePhoneSessionRequest, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePhoneSessionAsync(AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePhoneSessionValidateBeforeCall(accountUpdatePhoneSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePhoneSessionRequestBuilder {
        private final String userId;
        private final String secret;

        private UpdatePhoneSessionRequestBuilder(String userId, String secret) {
            this.userId = userId;
            this.secret = secret;
        }

        /**
         * Build call for updatePhoneSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest = buildBodyParams();
            return updatePhoneSessionCall(accountUpdatePhoneSessionRequest, _callback);
        }

        private AccountUpdatePhoneSessionRequest buildBodyParams() {
            AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest = new AccountUpdatePhoneSessionRequest();
            accountUpdatePhoneSessionRequest.userId(this.userId);
            accountUpdatePhoneSessionRequest.secret(this.secret);
            return accountUpdatePhoneSessionRequest;
        }

        /**
         * Execute updatePhoneSession request
         * @return Session
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public Session execute() throws ApiException {
            AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest = buildBodyParams();
            ApiResponse<Session> localVarResp = updatePhoneSessionWithHttpInfo(accountUpdatePhoneSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePhoneSession request with HTTP info returned
         * @return ApiResponse&lt;Session&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Session> executeWithHttpInfo() throws ApiException {
            AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest = buildBodyParams();
            return updatePhoneSessionWithHttpInfo(accountUpdatePhoneSessionRequest);
        }

        /**
         * Execute updatePhoneSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Session> _callback) throws ApiException {
            AccountUpdatePhoneSessionRequest accountUpdatePhoneSessionRequest = buildBodyParams();
            return updatePhoneSessionAsync(accountUpdatePhoneSessionRequest, _callback);
        }
    }

    /**
     * Update phone session
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     * @return UpdatePhoneSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Session </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePhoneSessionRequestBuilder updatePhoneSession(String userId, String secret) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        return new UpdatePhoneSessionRequestBuilder(userId, secret);
    }
    private okhttp3.Call updatePreferencesCall(AccountUpdatePreferencesRequest accountUpdatePreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdatePreferencesRequest;

        // create path and map variables
        String localVarPath = "/account/prefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePreferencesValidateBeforeCall(AccountUpdatePreferencesRequest accountUpdatePreferencesRequest, final ApiCallback _callback) throws ApiException {
        return updatePreferencesCall(accountUpdatePreferencesRequest, _callback);

    }


    private ApiResponse<User> updatePreferencesWithHttpInfo(AccountUpdatePreferencesRequest accountUpdatePreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePreferencesValidateBeforeCall(accountUpdatePreferencesRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePreferencesAsync(AccountUpdatePreferencesRequest accountUpdatePreferencesRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePreferencesValidateBeforeCall(accountUpdatePreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePreferencesRequestBuilder {
        private final Object prefs;

        private UpdatePreferencesRequestBuilder(Object prefs) {
            this.prefs = prefs;
        }

        /**
         * Build call for updatePreferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdatePreferencesRequest accountUpdatePreferencesRequest = buildBodyParams();
            return updatePreferencesCall(accountUpdatePreferencesRequest, _callback);
        }

        private AccountUpdatePreferencesRequest buildBodyParams() {
            AccountUpdatePreferencesRequest accountUpdatePreferencesRequest = new AccountUpdatePreferencesRequest();
            accountUpdatePreferencesRequest.prefs(this.prefs);
            return accountUpdatePreferencesRequest;
        }

        /**
         * Execute updatePreferences request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountUpdatePreferencesRequest accountUpdatePreferencesRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updatePreferencesWithHttpInfo(accountUpdatePreferencesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePreferences request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountUpdatePreferencesRequest accountUpdatePreferencesRequest = buildBodyParams();
            return updatePreferencesWithHttpInfo(accountUpdatePreferencesRequest);
        }

        /**
         * Execute updatePreferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountUpdatePreferencesRequest accountUpdatePreferencesRequest = buildBodyParams();
            return updatePreferencesAsync(accountUpdatePreferencesRequest, _callback);
        }
    }

    /**
     * Update preferences
     * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
     * @return UpdatePreferencesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePreferencesRequestBuilder updatePreferences(Object prefs) throws IllegalArgumentException {
        if (prefs == null) throw new IllegalArgumentException("\"prefs\" is required but got null");
        return new UpdatePreferencesRequestBuilder(prefs);
    }
    private okhttp3.Call updatePushTargetCall(String targetId, AccountUpdatePushTargetRequest accountUpdatePushTargetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdatePushTargetRequest;

        // create path and map variables
        String localVarPath = "/account/targets/{targetId}/push"
            .replace("{" + "targetId" + "}", localVarApiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePushTargetValidateBeforeCall(String targetId, AccountUpdatePushTargetRequest accountUpdatePushTargetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling updatePushTarget(Async)");
        }

        return updatePushTargetCall(targetId, accountUpdatePushTargetRequest, _callback);

    }


    private ApiResponse<Target> updatePushTargetWithHttpInfo(String targetId, AccountUpdatePushTargetRequest accountUpdatePushTargetRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePushTargetValidateBeforeCall(targetId, accountUpdatePushTargetRequest, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePushTargetAsync(String targetId, AccountUpdatePushTargetRequest accountUpdatePushTargetRequest, final ApiCallback<Target> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePushTargetValidateBeforeCall(targetId, accountUpdatePushTargetRequest, _callback);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePushTargetRequestBuilder {
        private final String identifier;
        private final String targetId;

        private UpdatePushTargetRequestBuilder(String identifier, String targetId) {
            this.identifier = identifier;
            this.targetId = targetId;
        }

        /**
         * Build call for updatePushTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdatePushTargetRequest accountUpdatePushTargetRequest = buildBodyParams();
            return updatePushTargetCall(targetId, accountUpdatePushTargetRequest, _callback);
        }

        private AccountUpdatePushTargetRequest buildBodyParams() {
            AccountUpdatePushTargetRequest accountUpdatePushTargetRequest = new AccountUpdatePushTargetRequest();
            accountUpdatePushTargetRequest.identifier(this.identifier);
            return accountUpdatePushTargetRequest;
        }

        /**
         * Execute updatePushTarget request
         * @return Target
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public Target execute() throws ApiException {
            AccountUpdatePushTargetRequest accountUpdatePushTargetRequest = buildBodyParams();
            ApiResponse<Target> localVarResp = updatePushTargetWithHttpInfo(targetId, accountUpdatePushTargetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePushTarget request with HTTP info returned
         * @return ApiResponse&lt;Target&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Target> executeWithHttpInfo() throws ApiException {
            AccountUpdatePushTargetRequest accountUpdatePushTargetRequest = buildBodyParams();
            return updatePushTargetWithHttpInfo(targetId, accountUpdatePushTargetRequest);
        }

        /**
         * Execute updatePushTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Target </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Target> _callback) throws ApiException {
            AccountUpdatePushTargetRequest accountUpdatePushTargetRequest = buildBodyParams();
            return updatePushTargetAsync(targetId, accountUpdatePushTargetRequest, _callback);
        }
    }

    /**
     * Update push target
     * 
     * @param targetId Target ID. (required)
     * @return UpdatePushTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Target </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePushTargetRequestBuilder updatePushTarget(String identifier, String targetId) throws IllegalArgumentException {
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        if (targetId == null) throw new IllegalArgumentException("\"targetId\" is required but got null");
            

        return new UpdatePushTargetRequestBuilder(identifier, targetId);
    }
    private okhttp3.Call updateUserEmailCall(AccountUpdateUserEmailRequest accountUpdateUserEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountUpdateUserEmailRequest;

        // create path and map variables
        String localVarPath = "/account/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserEmailValidateBeforeCall(AccountUpdateUserEmailRequest accountUpdateUserEmailRequest, final ApiCallback _callback) throws ApiException {
        return updateUserEmailCall(accountUpdateUserEmailRequest, _callback);

    }


    private ApiResponse<User> updateUserEmailWithHttpInfo(AccountUpdateUserEmailRequest accountUpdateUserEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserEmailValidateBeforeCall(accountUpdateUserEmailRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserEmailAsync(AccountUpdateUserEmailRequest accountUpdateUserEmailRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserEmailValidateBeforeCall(accountUpdateUserEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserEmailRequestBuilder {
        private final String email;
        private final String password;

        private UpdateUserEmailRequestBuilder(String email, String password) {
            this.email = email;
            this.password = password;
        }

        /**
         * Build call for updateUserEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountUpdateUserEmailRequest accountUpdateUserEmailRequest = buildBodyParams();
            return updateUserEmailCall(accountUpdateUserEmailRequest, _callback);
        }

        private AccountUpdateUserEmailRequest buildBodyParams() {
            AccountUpdateUserEmailRequest accountUpdateUserEmailRequest = new AccountUpdateUserEmailRequest();
            accountUpdateUserEmailRequest.email(this.email);
            accountUpdateUserEmailRequest.password(this.password);
            return accountUpdateUserEmailRequest;
        }

        /**
         * Execute updateUserEmail request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountUpdateUserEmailRequest accountUpdateUserEmailRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updateUserEmailWithHttpInfo(accountUpdateUserEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserEmail request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountUpdateUserEmailRequest accountUpdateUserEmailRequest = buildBodyParams();
            return updateUserEmailWithHttpInfo(accountUpdateUserEmailRequest);
        }

        /**
         * Execute updateUserEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountUpdateUserEmailRequest accountUpdateUserEmailRequest = buildBodyParams();
            return updateUserEmailAsync(accountUpdateUserEmailRequest, _callback);
        }
    }

    /**
     * Update email
     * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. 
     * @return UpdateUserEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserEmailRequestBuilder updateUserEmail(String email, String password) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new UpdateUserEmailRequestBuilder(email, password);
    }
    private okhttp3.Call verifyAuthenticatorCall(String type, AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountVerifyAuthenticatorRequest;

        // create path and map variables
        String localVarPath = "/account/mfa/authenticators/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAuthenticatorValidateBeforeCall(String type, AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling verifyAuthenticator(Async)");
        }

        return verifyAuthenticatorCall(type, accountVerifyAuthenticatorRequest, _callback);

    }


    private ApiResponse<User> verifyAuthenticatorWithHttpInfo(String type, AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyAuthenticatorValidateBeforeCall(type, accountVerifyAuthenticatorRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyAuthenticatorAsync(String type, AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAuthenticatorValidateBeforeCall(type, accountVerifyAuthenticatorRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyAuthenticatorRequestBuilder {
        private final String otp;
        private final String type;

        private VerifyAuthenticatorRequestBuilder(String otp, String type) {
            this.otp = otp;
            this.type = type;
        }

        /**
         * Build call for verifyAuthenticator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest = buildBodyParams();
            return verifyAuthenticatorCall(type, accountVerifyAuthenticatorRequest, _callback);
        }

        private AccountVerifyAuthenticatorRequest buildBodyParams() {
            AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest = new AccountVerifyAuthenticatorRequest();
            accountVerifyAuthenticatorRequest.otp(this.otp);
            return accountVerifyAuthenticatorRequest;
        }

        /**
         * Execute verifyAuthenticator request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest = buildBodyParams();
            ApiResponse<User> localVarResp = verifyAuthenticatorWithHttpInfo(type, accountVerifyAuthenticatorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyAuthenticator request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest = buildBodyParams();
            return verifyAuthenticatorWithHttpInfo(type, accountVerifyAuthenticatorRequest);
        }

        /**
         * Execute verifyAuthenticator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            AccountVerifyAuthenticatorRequest accountVerifyAuthenticatorRequest = buildBodyParams();
            return verifyAuthenticatorAsync(type, accountVerifyAuthenticatorRequest, _callback);
        }
    }

    /**
     * Verify Authenticator
     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#addAuthenticator) method.
     * @param type Type of authenticator. (required)
     * @return VerifyAuthenticatorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public VerifyAuthenticatorRequestBuilder verifyAuthenticator(String otp, String type) throws IllegalArgumentException {
        if (otp == null) throw new IllegalArgumentException("\"otp\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new VerifyAuthenticatorRequestBuilder(otp, type);
    }
}
