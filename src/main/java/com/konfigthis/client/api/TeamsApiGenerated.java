/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Membership;
import com.konfigthis.client.model.MembershipList;
import com.konfigthis.client.model.Team;
import com.konfigthis.client.model.TeamList;
import com.konfigthis.client.model.TeamsCreateMembershipRequest;
import com.konfigthis.client.model.TeamsCreateNewTeamRequest;
import com.konfigthis.client.model.TeamsUpdateMembershipRolesRequest;
import com.konfigthis.client.model.TeamsUpdateMembershipStatusRequest;
import com.konfigthis.client.model.TeamsUpdateNameByIdRequest;
import com.konfigthis.client.model.TeamsUpdatePrefsByIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMembershipCall(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateMembershipRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMembershipValidateBeforeCall(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createMembership(Async)");
        }

        return createMembershipCall(teamId, teamsCreateMembershipRequest, _callback);

    }


    private ApiResponse<Membership> createMembershipWithHttpInfo(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest) throws ApiException {
        okhttp3.Call localVarCall = createMembershipValidateBeforeCall(teamId, teamsCreateMembershipRequest, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMembershipAsync(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMembershipValidateBeforeCall(teamId, teamsCreateMembershipRequest, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMembershipRequestBuilder {
        private final List<String> roles;
        private final String teamId;
        private String email;
        private String userId;
        private String phone;
        private String url;
        private String name;

        private CreateMembershipRequestBuilder(List<String> roles, String teamId) {
            this.roles = roles;
            this.teamId = teamId;
        }

        /**
         * Set email
         * @param email Email of the new team member. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set userId
         * @param userId ID of the user to be added to a team. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number. Format this number with a leading &#39;+&#39; and a country code, e.g., +16175551212. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set url
         * @param url URL to redirect the user back to your app from the invitation email.  Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the new team member. Max length: 128 chars. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsCreateMembershipRequest teamsCreateMembershipRequest = buildBodyParams();
            return createMembershipCall(teamId, teamsCreateMembershipRequest, _callback);
        }

        private TeamsCreateMembershipRequest buildBodyParams() {
            TeamsCreateMembershipRequest teamsCreateMembershipRequest = new TeamsCreateMembershipRequest();
            teamsCreateMembershipRequest.email(this.email);
            teamsCreateMembershipRequest.userId(this.userId);
            teamsCreateMembershipRequest.phone(this.phone);
            teamsCreateMembershipRequest.roles(this.roles);
            teamsCreateMembershipRequest.url(this.url);
            teamsCreateMembershipRequest.name(this.name);
            return teamsCreateMembershipRequest;
        }

        /**
         * Execute createMembership request
         * @return Membership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public Membership execute() throws ApiException {
            TeamsCreateMembershipRequest teamsCreateMembershipRequest = buildBodyParams();
            ApiResponse<Membership> localVarResp = createMembershipWithHttpInfo(teamId, teamsCreateMembershipRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMembership request with HTTP info returned
         * @return ApiResponse&lt;Membership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Membership> executeWithHttpInfo() throws ApiException {
            TeamsCreateMembershipRequest teamsCreateMembershipRequest = buildBodyParams();
            return createMembershipWithHttpInfo(teamId, teamsCreateMembershipRequest);
        }

        /**
         * Execute createMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Membership> _callback) throws ApiException {
            TeamsCreateMembershipRequest teamsCreateMembershipRequest = buildBodyParams();
            return createMembershipAsync(teamId, teamsCreateMembershipRequest, _callback);
        }
    }

    /**
     * Create team membership
     * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn&#39;t exist. If initiated from a Server SDK, the new member will be added automatically to the team.  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID &gt; email &gt; phone number if you provide more than one of these parameters.  Use the &#x60;url&#x60; parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team.   Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console. 
     * @param teamId Team ID. (required)
     * @return CreateMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public CreateMembershipRequestBuilder createMembership(List<String> roles, String teamId) throws IllegalArgumentException {
        if (roles == null) throw new IllegalArgumentException("\"roles\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateMembershipRequestBuilder(roles, teamId);
    }
    private okhttp3.Call createNewTeamCall(TeamsCreateNewTeamRequest teamsCreateNewTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateNewTeamRequest;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTeamValidateBeforeCall(TeamsCreateNewTeamRequest teamsCreateNewTeamRequest, final ApiCallback _callback) throws ApiException {
        return createNewTeamCall(teamsCreateNewTeamRequest, _callback);

    }


    private ApiResponse<Team> createNewTeamWithHttpInfo(TeamsCreateNewTeamRequest teamsCreateNewTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTeamValidateBeforeCall(teamsCreateNewTeamRequest, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTeamAsync(TeamsCreateNewTeamRequest teamsCreateNewTeamRequest, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTeamValidateBeforeCall(teamsCreateNewTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTeamRequestBuilder {
        private final String teamId;
        private final String name;
        private List<String> roles;

        private CreateNewTeamRequestBuilder(String teamId, String name) {
            this.teamId = teamId;
            this.name = name;
        }

        /**
         * Set roles
         * @param roles Array of strings. Use this param to set the roles in the team for the user who created it. The default role is **owner**. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long. (optional)
         * @return CreateNewTeamRequestBuilder
         */
        public CreateNewTeamRequestBuilder roles(List<String> roles) {
            this.roles = roles;
            return this;
        }
        
        /**
         * Build call for createNewTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsCreateNewTeamRequest teamsCreateNewTeamRequest = buildBodyParams();
            return createNewTeamCall(teamsCreateNewTeamRequest, _callback);
        }

        private TeamsCreateNewTeamRequest buildBodyParams() {
            TeamsCreateNewTeamRequest teamsCreateNewTeamRequest = new TeamsCreateNewTeamRequest();
            teamsCreateNewTeamRequest.teamId(this.teamId);
            teamsCreateNewTeamRequest.name(this.name);
            teamsCreateNewTeamRequest.roles(this.roles);
            return teamsCreateNewTeamRequest;
        }

        /**
         * Execute createNewTeam request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            TeamsCreateNewTeamRequest teamsCreateNewTeamRequest = buildBodyParams();
            ApiResponse<Team> localVarResp = createNewTeamWithHttpInfo(teamsCreateNewTeamRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTeam request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            TeamsCreateNewTeamRequest teamsCreateNewTeamRequest = buildBodyParams();
            return createNewTeamWithHttpInfo(teamsCreateNewTeamRequest);
        }

        /**
         * Execute createNewTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            TeamsCreateNewTeamRequest teamsCreateNewTeamRequest = buildBodyParams();
            return createNewTeamAsync(teamsCreateNewTeamRequest, _callback);
        }
    }

    /**
     * Create team
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.
     * @return CreateNewTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTeamRequestBuilder createNewTeam(String teamId, String name) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewTeamRequestBuilder(teamId, name);
    }
    private okhttp3.Call deleteMembershipCall(String teamId, String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembershipValidateBeforeCall(String teamId, String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling deleteMembership(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling deleteMembership(Async)");
        }

        return deleteMembershipCall(teamId, membershipId, _callback);

    }


    private ApiResponse<Void> deleteMembershipWithHttpInfo(String teamId, String membershipId) throws ApiException {
        okhttp3.Call localVarCall = deleteMembershipValidateBeforeCall(teamId, membershipId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMembershipAsync(String teamId, String membershipId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembershipValidateBeforeCall(teamId, membershipId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMembershipRequestBuilder {
        private final String teamId;
        private final String membershipId;

        private DeleteMembershipRequestBuilder(String teamId, String membershipId) {
            this.teamId = teamId;
            this.membershipId = membershipId;
        }

        /**
         * Build call for deleteMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMembershipCall(teamId, membershipId, _callback);
        }


        /**
         * Execute deleteMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMembershipWithHttpInfo(teamId, membershipId);
        }

        /**
         * Execute deleteMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMembershipWithHttpInfo(teamId, membershipId);
        }

        /**
         * Execute deleteMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMembershipAsync(teamId, membershipId, _callback);
        }
    }

    /**
     * Delete team membership
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     * @param teamId Team ID. (required)
     * @param membershipId Membership ID. (required)
     * @return DeleteMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMembershipRequestBuilder deleteMembership(String teamId, String membershipId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (membershipId == null) throw new IllegalArgumentException("\"membershipId\" is required but got null");
            

        return new DeleteMembershipRequestBuilder(teamId, membershipId);
    }
    private okhttp3.Call getByIdCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getById(Async)");
        }

        return getByIdCall(teamId, _callback);

    }


    private ApiResponse<Team> getByIdWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String teamId, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String teamId;

        private GetByIdRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(teamId, _callback);
        }


        /**
         * Execute getById request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            ApiResponse<Team> localVarResp = getByIdWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(teamId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            return getByIdAsync(teamId, _callback);
        }
    }

    /**
     * Get team
     * Get a team by its ID. All team members have read access for this resource.
     * @param teamId Team ID. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new GetByIdRequestBuilder(teamId);
    }
    private okhttp3.Call getMembershipCall(String teamId, String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembershipValidateBeforeCall(String teamId, String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getMembership(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling getMembership(Async)");
        }

        return getMembershipCall(teamId, membershipId, _callback);

    }


    private ApiResponse<Membership> getMembershipWithHttpInfo(String teamId, String membershipId) throws ApiException {
        okhttp3.Call localVarCall = getMembershipValidateBeforeCall(teamId, membershipId, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMembershipAsync(String teamId, String membershipId, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembershipValidateBeforeCall(teamId, membershipId, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMembershipRequestBuilder {
        private final String teamId;
        private final String membershipId;

        private GetMembershipRequestBuilder(String teamId, String membershipId) {
            this.teamId = teamId;
            this.membershipId = membershipId;
        }

        /**
         * Build call for getMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembershipCall(teamId, membershipId, _callback);
        }


        /**
         * Execute getMembership request
         * @return Membership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public Membership execute() throws ApiException {
            ApiResponse<Membership> localVarResp = getMembershipWithHttpInfo(teamId, membershipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMembership request with HTTP info returned
         * @return ApiResponse&lt;Membership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Membership> executeWithHttpInfo() throws ApiException {
            return getMembershipWithHttpInfo(teamId, membershipId);
        }

        /**
         * Execute getMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Membership> _callback) throws ApiException {
            return getMembershipAsync(teamId, membershipId, _callback);
        }
    }

    /**
     * Get team membership
     * Get a team member by the membership unique id. All team members have read access for this resource.
     * @param teamId Team ID. (required)
     * @param membershipId Membership ID. (required)
     * @return GetMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public GetMembershipRequestBuilder getMembership(String teamId, String membershipId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (membershipId == null) throw new IllegalArgumentException("\"membershipId\" is required but got null");
            

        return new GetMembershipRequestBuilder(teamId, membershipId);
    }
    private okhttp3.Call getPrefsCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/prefs"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrefsValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getPrefs(Async)");
        }

        return getPrefsCall(teamId, _callback);

    }


    private ApiResponse<Map<String, Object>> getPrefsWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = getPrefsValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrefsAsync(String teamId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrefsValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPrefsRequestBuilder {
        private final String teamId;

        private GetPrefsRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for getPrefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPrefsCall(teamId, _callback);
        }


        /**
         * Execute getPrefs request
         * @return Map&lt;String, Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, Object> execute() throws ApiException {
            ApiResponse<Map<String, Object>> localVarResp = getPrefsWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrefs request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, Object>> executeWithHttpInfo() throws ApiException {
            return getPrefsWithHttpInfo(teamId);
        }

        /**
         * Execute getPrefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {
            return getPrefsAsync(teamId, _callback);
        }
    }

    /**
     * Get team preferences
     * Get the team&#39;s shared preferences by its unique ID. If a preference doesn&#39;t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
     * @param teamId Team ID. (required)
     * @return GetPrefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
     </table>
     */
    public GetPrefsRequestBuilder getPrefs(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new GetPrefsRequestBuilder(teamId);
    }
    private okhttp3.Call getUserMembershipsCall(List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserMembershipsValidateBeforeCall(List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        return getUserMembershipsCall(queries, search, _callback);

    }


    private ApiResponse<TeamList> getUserMembershipsWithHttpInfo(List<String> queries, String search) throws ApiException {
        okhttp3.Call localVarCall = getUserMembershipsValidateBeforeCall(queries, search, null);
        Type localVarReturnType = new TypeToken<TeamList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserMembershipsAsync(List<String> queries, String search, final ApiCallback<TeamList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserMembershipsValidateBeforeCall(queries, search, _callback);
        Type localVarReturnType = new TypeToken<TeamList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserMembershipsRequestBuilder {
        private List<String> queries;
        private String search;

        private GetUserMembershipsRequestBuilder() {
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, total, billingPlan (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Set search
         * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getUserMemberships
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserMembershipsCall(queries, search, _callback);
        }


        /**
         * Execute getUserMemberships request
         * @return TeamList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
         </table>
         */
        public TeamList execute() throws ApiException {
            ApiResponse<TeamList> localVarResp = getUserMembershipsWithHttpInfo(queries, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserMemberships request with HTTP info returned
         * @return ApiResponse&lt;TeamList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamList> executeWithHttpInfo() throws ApiException {
            return getUserMembershipsWithHttpInfo(queries, search);
        }

        /**
         * Execute getUserMemberships request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamList> _callback) throws ApiException {
            return getUserMembershipsAsync(queries, search, _callback);
        }
    }

    /**
     * List teams
     * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.
     * @return GetUserMembershipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
     </table>
     */
    public GetUserMembershipsRequestBuilder getUserMemberships() throws IllegalArgumentException {
        return new GetUserMembershipsRequestBuilder();
    }
    private okhttp3.Call listMembershipsCall(String teamId, List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembershipsValidateBeforeCall(String teamId, List<String> queries, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listMemberships(Async)");
        }

        return listMembershipsCall(teamId, queries, search, _callback);

    }


    private ApiResponse<MembershipList> listMembershipsWithHttpInfo(String teamId, List<String> queries, String search) throws ApiException {
        okhttp3.Call localVarCall = listMembershipsValidateBeforeCall(teamId, queries, search, null);
        Type localVarReturnType = new TypeToken<MembershipList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMembershipsAsync(String teamId, List<String> queries, String search, final ApiCallback<MembershipList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembershipsValidateBeforeCall(teamId, queries, search, _callback);
        Type localVarReturnType = new TypeToken<MembershipList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMembershipsRequestBuilder {
        private final String teamId;
        private List<String> queries;
        private String search;

        private ListMembershipsRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm (optional)
         * @return ListMembershipsRequestBuilder
         */
        public ListMembershipsRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Set search
         * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
         * @return ListMembershipsRequestBuilder
         */
        public ListMembershipsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for listMemberships
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembershipsCall(teamId, queries, search, _callback);
        }


        /**
         * Execute listMemberships request
         * @return MembershipList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
         </table>
         */
        public MembershipList execute() throws ApiException {
            ApiResponse<MembershipList> localVarResp = listMembershipsWithHttpInfo(teamId, queries, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMemberships request with HTTP info returned
         * @return ApiResponse&lt;MembershipList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembershipList> executeWithHttpInfo() throws ApiException {
            return listMembershipsWithHttpInfo(teamId, queries, search);
        }

        /**
         * Execute listMemberships request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembershipList> _callback) throws ApiException {
            return listMembershipsAsync(teamId, queries, search, _callback);
        }
    }

    /**
     * List team memberships
     * Use this endpoint to list a team&#39;s members using the team&#39;s ID. All team members have read access to this endpoint.
     * @param teamId Team ID. (required)
     * @return ListMembershipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
     </table>
     */
    public ListMembershipsRequestBuilder listMemberships(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListMembershipsRequestBuilder(teamId);
    }
    private okhttp3.Call removeTeamCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTeamValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeTeam(Async)");
        }

        return removeTeamCall(teamId, _callback);

    }


    private ApiResponse<Void> removeTeamWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = removeTeamValidateBeforeCall(teamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTeamAsync(String teamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTeamValidateBeforeCall(teamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTeamRequestBuilder {
        private final String teamId;

        private RemoveTeamRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for removeTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTeamCall(teamId, _callback);
        }


        /**
         * Execute removeTeam request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTeamWithHttpInfo(teamId);
        }

        /**
         * Execute removeTeam request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTeamWithHttpInfo(teamId);
        }

        /**
         * Execute removeTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTeamAsync(teamId, _callback);
        }
    }

    /**
     * Delete team
     * Delete a team using its ID. Only team members with the owner role can delete the team.
     * @param teamId Team ID. (required)
     * @return RemoveTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTeamRequestBuilder removeTeam(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new RemoveTeamRequestBuilder(teamId);
    }
    private okhttp3.Call updateMembershipRolesCall(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateMembershipRolesRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembershipRolesValidateBeforeCall(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateMembershipRoles(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling updateMembershipRoles(Async)");
        }

        return updateMembershipRolesCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, _callback);

    }


    private ApiResponse<Membership> updateMembershipRolesWithHttpInfo(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMembershipRolesValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMembershipRolesAsync(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembershipRolesValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMembershipRolesRequestBuilder {
        private final List<String> roles;
        private final String teamId;
        private final String membershipId;

        private UpdateMembershipRolesRequestBuilder(List<String> roles, String teamId, String membershipId) {
            this.roles = roles;
            this.teamId = teamId;
            this.membershipId = membershipId;
        }

        /**
         * Build call for updateMembershipRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest = buildBodyParams();
            return updateMembershipRolesCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, _callback);
        }

        private TeamsUpdateMembershipRolesRequest buildBodyParams() {
            TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest = new TeamsUpdateMembershipRolesRequest();
            teamsUpdateMembershipRolesRequest.roles(this.roles);
            return teamsUpdateMembershipRolesRequest;
        }

        /**
         * Execute updateMembershipRoles request
         * @return Membership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public Membership execute() throws ApiException {
            TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest = buildBodyParams();
            ApiResponse<Membership> localVarResp = updateMembershipRolesWithHttpInfo(teamId, membershipId, teamsUpdateMembershipRolesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMembershipRoles request with HTTP info returned
         * @return ApiResponse&lt;Membership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Membership> executeWithHttpInfo() throws ApiException {
            TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest = buildBodyParams();
            return updateMembershipRolesWithHttpInfo(teamId, membershipId, teamsUpdateMembershipRolesRequest);
        }

        /**
         * Execute updateMembershipRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Membership> _callback) throws ApiException {
            TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest = buildBodyParams();
            return updateMembershipRolesAsync(teamId, membershipId, teamsUpdateMembershipRolesRequest, _callback);
        }
    }

    /**
     * Update membership
     * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). 
     * @param teamId Team ID. (required)
     * @param membershipId Membership ID. (required)
     * @return UpdateMembershipRolesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembershipRolesRequestBuilder updateMembershipRoles(List<String> roles, String teamId, String membershipId) throws IllegalArgumentException {
        if (roles == null) throw new IllegalArgumentException("\"roles\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (membershipId == null) throw new IllegalArgumentException("\"membershipId\" is required but got null");
            

        return new UpdateMembershipRolesRequestBuilder(roles, teamId, membershipId);
    }
    private okhttp3.Call updateMembershipStatusCall(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateMembershipStatusRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}/status"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembershipStatusValidateBeforeCall(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateMembershipStatus(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling updateMembershipStatus(Async)");
        }

        return updateMembershipStatusCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, _callback);

    }


    private ApiResponse<Membership> updateMembershipStatusWithHttpInfo(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMembershipStatusValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMembershipStatusAsync(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembershipStatusValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMembershipStatusRequestBuilder {
        private final String userId;
        private final String secret;
        private final String teamId;
        private final String membershipId;

        private UpdateMembershipStatusRequestBuilder(String userId, String secret, String teamId, String membershipId) {
            this.userId = userId;
            this.secret = secret;
            this.teamId = teamId;
            this.membershipId = membershipId;
        }

        /**
         * Build call for updateMembershipStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest = buildBodyParams();
            return updateMembershipStatusCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, _callback);
        }

        private TeamsUpdateMembershipStatusRequest buildBodyParams() {
            TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest = new TeamsUpdateMembershipStatusRequest();
            teamsUpdateMembershipStatusRequest.userId(this.userId);
            teamsUpdateMembershipStatusRequest.secret(this.secret);
            return teamsUpdateMembershipStatusRequest;
        }

        /**
         * Execute updateMembershipStatus request
         * @return Membership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public Membership execute() throws ApiException {
            TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest = buildBodyParams();
            ApiResponse<Membership> localVarResp = updateMembershipStatusWithHttpInfo(teamId, membershipId, teamsUpdateMembershipStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMembershipStatus request with HTTP info returned
         * @return ApiResponse&lt;Membership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Membership> executeWithHttpInfo() throws ApiException {
            TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest = buildBodyParams();
            return updateMembershipStatusWithHttpInfo(teamId, membershipId, teamsUpdateMembershipStatusRequest);
        }

        /**
         * Execute updateMembershipStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Membership> _callback) throws ApiException {
            TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest = buildBodyParams();
            return updateMembershipStatusAsync(teamId, membershipId, teamsUpdateMembershipStatusRequest, _callback);
        }
    }

    /**
     * Update team membership status
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.  If the request is successful, a session for the user is automatically created. 
     * @param teamId Team ID. (required)
     * @param membershipId Membership ID. (required)
     * @return UpdateMembershipStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembershipStatusRequestBuilder updateMembershipStatus(String userId, String secret, String teamId, String membershipId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (secret == null) throw new IllegalArgumentException("\"secret\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (membershipId == null) throw new IllegalArgumentException("\"membershipId\" is required but got null");
            

        return new UpdateMembershipStatusRequestBuilder(userId, secret, teamId, membershipId);
    }
    private okhttp3.Call updateNameByIdCall(String teamId, TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateNameByIdRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdValidateBeforeCall(String teamId, TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateNameById(Async)");
        }

        return updateNameByIdCall(teamId, teamsUpdateNameByIdRequest, _callback);

    }


    private ApiResponse<Team> updateNameByIdWithHttpInfo(String teamId, TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdValidateBeforeCall(teamId, teamsUpdateNameByIdRequest, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNameByIdAsync(String teamId, TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdValidateBeforeCall(teamId, teamsUpdateNameByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdRequestBuilder {
        private final String name;
        private final String teamId;

        private UpdateNameByIdRequestBuilder(String name, String teamId) {
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Build call for updateNameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest = buildBodyParams();
            return updateNameByIdCall(teamId, teamsUpdateNameByIdRequest, _callback);
        }

        private TeamsUpdateNameByIdRequest buildBodyParams() {
            TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest = new TeamsUpdateNameByIdRequest();
            teamsUpdateNameByIdRequest.name(this.name);
            return teamsUpdateNameByIdRequest;
        }

        /**
         * Execute updateNameById request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest = buildBodyParams();
            ApiResponse<Team> localVarResp = updateNameByIdWithHttpInfo(teamId, teamsUpdateNameByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateNameById request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest = buildBodyParams();
            return updateNameByIdWithHttpInfo(teamId, teamsUpdateNameByIdRequest);
        }

        /**
         * Execute updateNameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            TeamsUpdateNameByIdRequest teamsUpdateNameByIdRequest = buildBodyParams();
            return updateNameByIdAsync(teamId, teamsUpdateNameByIdRequest, _callback);
        }
    }

    /**
     * Update name
     * Update the team&#39;s name by its unique ID.
     * @param teamId Team ID. (required)
     * @return UpdateNameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdRequestBuilder updateNameById(String name, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new UpdateNameByIdRequestBuilder(name, teamId);
    }
    private okhttp3.Call updatePrefsByIdCall(String teamId, TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdatePrefsByIdRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/prefs"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsByIdValidateBeforeCall(String teamId, TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updatePrefsById(Async)");
        }

        return updatePrefsByIdCall(teamId, teamsUpdatePrefsByIdRequest, _callback);

    }


    private ApiResponse<Map<String, Object>> updatePrefsByIdWithHttpInfo(String teamId, TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsByIdValidateBeforeCall(teamId, teamsUpdatePrefsByIdRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePrefsByIdAsync(String teamId, TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsByIdValidateBeforeCall(teamId, teamsUpdatePrefsByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePrefsByIdRequestBuilder {
        private final Object prefs;
        private final String teamId;

        private UpdatePrefsByIdRequestBuilder(Object prefs, String teamId) {
            this.prefs = prefs;
            this.teamId = teamId;
        }

        /**
         * Build call for updatePrefsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest = buildBodyParams();
            return updatePrefsByIdCall(teamId, teamsUpdatePrefsByIdRequest, _callback);
        }

        private TeamsUpdatePrefsByIdRequest buildBodyParams() {
            TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest = new TeamsUpdatePrefsByIdRequest();
            teamsUpdatePrefsByIdRequest.prefs(this.prefs);
            return teamsUpdatePrefsByIdRequest;
        }

        /**
         * Execute updatePrefsById request
         * @return Map&lt;String, Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, Object> execute() throws ApiException {
            TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest = buildBodyParams();
            ApiResponse<Map<String, Object>> localVarResp = updatePrefsByIdWithHttpInfo(teamId, teamsUpdatePrefsByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePrefsById request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, Object>> executeWithHttpInfo() throws ApiException {
            TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest = buildBodyParams();
            return updatePrefsByIdWithHttpInfo(teamId, teamsUpdatePrefsByIdRequest);
        }

        /**
         * Execute updatePrefsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {
            TeamsUpdatePrefsByIdRequest teamsUpdatePrefsByIdRequest = buildBodyParams();
            return updatePrefsByIdAsync(teamId, teamsUpdatePrefsByIdRequest, _callback);
        }
    }

    /**
     * Update preferences
     * Update the team&#39;s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.
     * @param teamId Team ID. (required)
     * @return UpdatePrefsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferences </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsByIdRequestBuilder updatePrefsById(Object prefs, String teamId) throws IllegalArgumentException {
        if (prefs == null) throw new IllegalArgumentException("\"prefs\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new UpdatePrefsByIdRequestBuilder(prefs, teamId);
    }
}
