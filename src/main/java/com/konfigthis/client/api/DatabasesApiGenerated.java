/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DatabasesCreateDocumentRequest;
import com.konfigthis.client.model.DatabasesUpdateDocumentByIdRequest;
import com.konfigthis.client.model.Document;
import com.konfigthis.client.model.DocumentList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DatabasesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabasesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DatabasesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getProject() == null) {
            throw new IllegalArgumentException("\"X-Appwrite-Project\" is required but no API key was provided. Please set \"X-Appwrite-Project\" with ApiClient#setProject(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDocumentCall(String databaseId, String collectionId, DatabasesCreateDocumentRequest databasesCreateDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databasesCreateDocumentRequest;

        // create path and map variables
        String localVarPath = "/databases/{databaseId}/collections/{collectionId}/documents"
            .replace("{" + "databaseId" + "}", localVarApiClient.escapeString(databaseId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentValidateBeforeCall(String databaseId, String collectionId, DatabasesCreateDocumentRequest databasesCreateDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling createDocument(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling createDocument(Async)");
        }

        return createDocumentCall(databaseId, collectionId, databasesCreateDocumentRequest, _callback);

    }


    private ApiResponse<Document> createDocumentWithHttpInfo(String databaseId, String collectionId, DatabasesCreateDocumentRequest databasesCreateDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(databaseId, collectionId, databasesCreateDocumentRequest, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDocumentAsync(String databaseId, String collectionId, DatabasesCreateDocumentRequest databasesCreateDocumentRequest, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(databaseId, collectionId, databasesCreateDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDocumentRequestBuilder {
        private final String documentId;
        private final Object data;
        private final String databaseId;
        private final String collectionId;
        private List<String> permissions;

        private CreateDocumentRequestBuilder(String documentId, Object data, String databaseId, String collectionId) {
            this.documentId = documentId;
            this.data = data;
            this.databaseId = databaseId;
            this.collectionId = collectionId;
        }

        /**
         * Set permissions
         * @param permissions An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions). (optional)
         * @return CreateDocumentRequestBuilder
         */
        public CreateDocumentRequestBuilder permissions(List<String> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Build call for createDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DatabasesCreateDocumentRequest databasesCreateDocumentRequest = buildBodyParams();
            return createDocumentCall(databaseId, collectionId, databasesCreateDocumentRequest, _callback);
        }

        private DatabasesCreateDocumentRequest buildBodyParams() {
            DatabasesCreateDocumentRequest databasesCreateDocumentRequest = new DatabasesCreateDocumentRequest();
            databasesCreateDocumentRequest.documentId(this.documentId);
            databasesCreateDocumentRequest.data(this.data);
            databasesCreateDocumentRequest.permissions(this.permissions);
            return databasesCreateDocumentRequest;
        }

        /**
         * Execute createDocument request
         * @return Document
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public Document execute() throws ApiException {
            DatabasesCreateDocumentRequest databasesCreateDocumentRequest = buildBodyParams();
            ApiResponse<Document> localVarResp = createDocumentWithHttpInfo(databaseId, collectionId, databasesCreateDocumentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDocument request with HTTP info returned
         * @return ApiResponse&lt;Document&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Document> executeWithHttpInfo() throws ApiException {
            DatabasesCreateDocumentRequest databasesCreateDocumentRequest = buildBodyParams();
            return createDocumentWithHttpInfo(databaseId, collectionId, databasesCreateDocumentRequest);
        }

        /**
         * Execute createDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Document> _callback) throws ApiException {
            DatabasesCreateDocumentRequest databasesCreateDocumentRequest = buildBodyParams();
            return createDocumentAsync(databaseId, collectionId, databasesCreateDocumentRequest, _callback);
        }
    }

    /**
     * Create document
     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
     * @param databaseId Database ID. (required)
     * @param collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents. (required)
     * @return CreateDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public CreateDocumentRequestBuilder createDocument(String documentId, Object data, String databaseId, String collectionId) throws IllegalArgumentException {
        if (documentId == null) throw new IllegalArgumentException("\"documentId\" is required but got null");
            

        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new CreateDocumentRequestBuilder(documentId, data, databaseId, collectionId);
    }
    private okhttp3.Call deleteDocumentByIdCall(String databaseId, String collectionId, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{databaseId}/collections/{collectionId}/documents/{documentId}"
            .replace("{" + "databaseId" + "}", localVarApiClient.escapeString(databaseId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentByIdValidateBeforeCall(String databaseId, String collectionId, String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling deleteDocumentById(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteDocumentById(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentById(Async)");
        }

        return deleteDocumentByIdCall(databaseId, collectionId, documentId, _callback);

    }


    private ApiResponse<Void> deleteDocumentByIdWithHttpInfo(String databaseId, String collectionId, String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentByIdValidateBeforeCall(databaseId, collectionId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDocumentByIdAsync(String databaseId, String collectionId, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentByIdValidateBeforeCall(databaseId, collectionId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDocumentByIdRequestBuilder {
        private final String databaseId;
        private final String collectionId;
        private final String documentId;

        private DeleteDocumentByIdRequestBuilder(String databaseId, String collectionId, String documentId) {
            this.databaseId = databaseId;
            this.collectionId = collectionId;
            this.documentId = documentId;
        }

        /**
         * Build call for deleteDocumentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDocumentByIdCall(databaseId, collectionId, documentId, _callback);
        }


        /**
         * Execute deleteDocumentById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDocumentByIdWithHttpInfo(databaseId, collectionId, documentId);
        }

        /**
         * Execute deleteDocumentById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDocumentByIdWithHttpInfo(databaseId, collectionId, documentId);
        }

        /**
         * Execute deleteDocumentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDocumentByIdAsync(databaseId, collectionId, documentId, _callback);
        }
    }

    /**
     * Delete document
     * Delete a document by its unique ID.
     * @param databaseId Database ID. (required)
     * @param collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). (required)
     * @param documentId Document ID. (required)
     * @return DeleteDocumentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDocumentByIdRequestBuilder deleteDocumentById(String databaseId, String collectionId, String documentId) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        if (documentId == null) throw new IllegalArgumentException("\"documentId\" is required but got null");
            

        return new DeleteDocumentByIdRequestBuilder(databaseId, collectionId, documentId);
    }
    private okhttp3.Call getDocumentByIdCall(String databaseId, String collectionId, String documentId, List<String> queries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{databaseId}/collections/{collectionId}/documents/{documentId}"
            .replace("{" + "databaseId" + "}", localVarApiClient.escapeString(databaseId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentByIdValidateBeforeCall(String databaseId, String collectionId, String documentId, List<String> queries, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling getDocumentById(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getDocumentById(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentById(Async)");
        }

        return getDocumentByIdCall(databaseId, collectionId, documentId, queries, _callback);

    }


    private ApiResponse<Document> getDocumentByIdWithHttpInfo(String databaseId, String collectionId, String documentId, List<String> queries) throws ApiException {
        okhttp3.Call localVarCall = getDocumentByIdValidateBeforeCall(databaseId, collectionId, documentId, queries, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDocumentByIdAsync(String databaseId, String collectionId, String documentId, List<String> queries, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentByIdValidateBeforeCall(databaseId, collectionId, documentId, queries, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDocumentByIdRequestBuilder {
        private final String databaseId;
        private final String collectionId;
        private final String documentId;
        private List<String> queries;

        private GetDocumentByIdRequestBuilder(String databaseId, String collectionId, String documentId) {
            this.databaseId = databaseId;
            this.collectionId = collectionId;
            this.documentId = documentId;
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. (optional)
         * @return GetDocumentByIdRequestBuilder
         */
        public GetDocumentByIdRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Build call for getDocumentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocumentByIdCall(databaseId, collectionId, documentId, queries, _callback);
        }


        /**
         * Execute getDocumentById request
         * @return Document
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public Document execute() throws ApiException {
            ApiResponse<Document> localVarResp = getDocumentByIdWithHttpInfo(databaseId, collectionId, documentId, queries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDocumentById request with HTTP info returned
         * @return ApiResponse&lt;Document&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Document> executeWithHttpInfo() throws ApiException {
            return getDocumentByIdWithHttpInfo(databaseId, collectionId, documentId, queries);
        }

        /**
         * Execute getDocumentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Document> _callback) throws ApiException {
            return getDocumentByIdAsync(databaseId, collectionId, documentId, queries, _callback);
        }
    }

    /**
     * Get document
     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
     * @param databaseId Database ID. (required)
     * @param collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). (required)
     * @param documentId Document ID. (required)
     * @return GetDocumentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentByIdRequestBuilder getDocumentById(String databaseId, String collectionId, String documentId) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        if (documentId == null) throw new IllegalArgumentException("\"documentId\" is required but got null");
            

        return new GetDocumentByIdRequestBuilder(databaseId, collectionId, documentId);
    }
    private okhttp3.Call listUserDocumentsCall(String databaseId, String collectionId, List<String> queries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{databaseId}/collections/{collectionId}/documents"
            .replace("{" + "databaseId" + "}", localVarApiClient.escapeString(databaseId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "queries", queries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserDocumentsValidateBeforeCall(String databaseId, String collectionId, List<String> queries, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling listUserDocuments(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling listUserDocuments(Async)");
        }

        return listUserDocumentsCall(databaseId, collectionId, queries, _callback);

    }


    private ApiResponse<DocumentList> listUserDocumentsWithHttpInfo(String databaseId, String collectionId, List<String> queries) throws ApiException {
        okhttp3.Call localVarCall = listUserDocumentsValidateBeforeCall(databaseId, collectionId, queries, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserDocumentsAsync(String databaseId, String collectionId, List<String> queries, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserDocumentsValidateBeforeCall(databaseId, collectionId, queries, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserDocumentsRequestBuilder {
        private final String databaseId;
        private final String collectionId;
        private List<String> queries;

        private ListUserDocumentsRequestBuilder(String databaseId, String collectionId) {
            this.databaseId = databaseId;
            this.collectionId = collectionId;
        }

        /**
         * Set queries
         * @param queries Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. (optional)
         * @return ListUserDocumentsRequestBuilder
         */
        public ListUserDocumentsRequestBuilder queries(List<String> queries) {
            this.queries = queries;
            return this;
        }
        
        /**
         * Build call for listUserDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Documents List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserDocumentsCall(databaseId, collectionId, queries, _callback);
        }


        /**
         * Execute listUserDocuments request
         * @return DocumentList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Documents List </td><td>  -  </td></tr>
         </table>
         */
        public DocumentList execute() throws ApiException {
            ApiResponse<DocumentList> localVarResp = listUserDocumentsWithHttpInfo(databaseId, collectionId, queries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserDocuments request with HTTP info returned
         * @return ApiResponse&lt;DocumentList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Documents List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentList> executeWithHttpInfo() throws ApiException {
            return listUserDocumentsWithHttpInfo(databaseId, collectionId, queries);
        }

        /**
         * Execute listUserDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Documents List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentList> _callback) throws ApiException {
            return listUserDocumentsAsync(databaseId, collectionId, queries, _callback);
        }
    }

    /**
     * List documents
     * Get a list of all the user&#39;s documents in a given collection. You can use the query params to filter your results.
     * @param databaseId Database ID. (required)
     * @param collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). (required)
     * @return ListUserDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Documents List </td><td>  -  </td></tr>
     </table>
     */
    public ListUserDocumentsRequestBuilder listUserDocuments(String databaseId, String collectionId) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new ListUserDocumentsRequestBuilder(databaseId, collectionId);
    }
    private okhttp3.Call updateDocumentByIdCall(String databaseId, String collectionId, String documentId, DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databasesUpdateDocumentByIdRequest;

        // create path and map variables
        String localVarPath = "/databases/{databaseId}/collections/{collectionId}/documents/{documentId}"
            .replace("{" + "databaseId" + "}", localVarApiClient.escapeString(databaseId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT", "Project", "Session" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentByIdValidateBeforeCall(String databaseId, String collectionId, String documentId, DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling updateDocumentById(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling updateDocumentById(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocumentById(Async)");
        }

        return updateDocumentByIdCall(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest, _callback);

    }


    private ApiResponse<Document> updateDocumentByIdWithHttpInfo(String databaseId, String collectionId, String documentId, DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentByIdValidateBeforeCall(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDocumentByIdAsync(String databaseId, String collectionId, String documentId, DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentByIdValidateBeforeCall(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDocumentByIdRequestBuilder {
        private final String databaseId;
        private final String collectionId;
        private final String documentId;
        private Object data;
        private List<String> permissions;

        private UpdateDocumentByIdRequestBuilder(String databaseId, String collectionId, String documentId) {
            this.databaseId = databaseId;
            this.collectionId = collectionId;
            this.documentId = documentId;
        }

        /**
         * Set data
         * @param data Document data as JSON object. Include only attribute and value pairs to be updated. (optional)
         * @return UpdateDocumentByIdRequestBuilder
         */
        public UpdateDocumentByIdRequestBuilder data(Object data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions). (optional)
         * @return UpdateDocumentByIdRequestBuilder
         */
        public UpdateDocumentByIdRequestBuilder permissions(List<String> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Build call for updateDocumentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest = buildBodyParams();
            return updateDocumentByIdCall(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest, _callback);
        }

        private DatabasesUpdateDocumentByIdRequest buildBodyParams() {
            DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest = new DatabasesUpdateDocumentByIdRequest();
            databasesUpdateDocumentByIdRequest.data(this.data);
            databasesUpdateDocumentByIdRequest.permissions(this.permissions);
            return databasesUpdateDocumentByIdRequest;
        }

        /**
         * Execute updateDocumentById request
         * @return Document
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public Document execute() throws ApiException {
            DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest = buildBodyParams();
            ApiResponse<Document> localVarResp = updateDocumentByIdWithHttpInfo(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDocumentById request with HTTP info returned
         * @return ApiResponse&lt;Document&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Document> executeWithHttpInfo() throws ApiException {
            DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest = buildBodyParams();
            return updateDocumentByIdWithHttpInfo(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest);
        }

        /**
         * Execute updateDocumentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Document> _callback) throws ApiException {
            DatabasesUpdateDocumentByIdRequest databasesUpdateDocumentByIdRequest = buildBodyParams();
            return updateDocumentByIdAsync(databaseId, collectionId, documentId, databasesUpdateDocumentByIdRequest, _callback);
        }
    }

    /**
     * Update document
     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
     * @param databaseId Database ID. (required)
     * @param collectionId Collection ID. (required)
     * @param documentId Document ID. (required)
     * @return UpdateDocumentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDocumentByIdRequestBuilder updateDocumentById(String databaseId, String collectionId, String documentId) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        if (documentId == null) throw new IllegalArgumentException("\"documentId\" is required but got null");
            

        return new UpdateDocumentByIdRequestBuilder(databaseId, collectionId, documentId);
    }
}
